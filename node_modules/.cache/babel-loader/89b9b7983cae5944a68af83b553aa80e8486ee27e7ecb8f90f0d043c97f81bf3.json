{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// Cache object slugs to avoid repeated calls\nconst objectCache = {};\n\n// Replace this with actual attribute UUIDs as needed\nconst ATTRIBUTE_IDS = {\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\" // this is for \"Name\"\n};\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      ensureFields(item);\n      if (item.type === \"person\") {\n        const recordId = await upsertPerson(item);\n        item.record_id = recordId; // save for later task use\n      }\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process item:\", item, err);\n    }\n  }\n}\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n  }\n}\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date !== null && date !== void 0 && date.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);else if (Date.parse(date)) d = new Date(date);\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer !== null && mer !== void 0 && mer.includes(\"p\") && h < 12) h += 12;\n      if (mer !== null && mer !== void 0 && mer.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSON ==========\n\nasync function upsertPerson(data) {\n  var _data$name, _data$name2;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || ((_data$name = data.name) === null || _data$name === void 0 ? void 0 : _data$name.split(\" \")[0]) || \"Unknown\",\n      last_name: data.last_name || ((_data$name2 = data.name) === null || _data$name2 === void 0 ? void 0 : _data$name2.split(\" \")[1]) || \"\"\n    }]\n  };\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"❌ Person creation error:\", json);\n    return null;\n  } else {\n    var _json$data2, _json$data2$id;\n    console.log(\"✅ Person created:\", json);\n    return (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : (_json$data2$id = _json$data2.id) === null || _json$data2$id === void 0 ? void 0 : _json$data2$id.record_id;\n  }\n}\n\n// ========== TASK ==========\n\nasync function upsertTask(data) {\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: [],\n      record_links: data.record_id ? [{\n        target_object: \"people\",\n        target_record_id: data.record_id\n      }] : []\n    }\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"❌ Task creation failed:\", json);\n  } else {\n    console.log(\"✅ Task created:\", json);\n  }\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","ATTRIBUTE_IDS","name","sendToAttio","updates","item","ensureFields","type","recordId","upsertPerson","record_id","upsertTask","err","console","error","notes","description","due_date","parseDateTime","due_time","date","time","d","Date","toLowerCase","includes","setDate","getDate","parse","t","mer","split","h","m","map","Number","setHours","toISOString","getObjectIdBySlug","slug","_json$data","_json$data$id","res","fetch","headers","Authorization","json","id","data","object_id","Error","_data$name","_data$name2","peopleId","values","first_name","last_name","payload","JSON","stringify","method","body","ok","_json$data2","_json$data2$id","log","content","format","deadline_at","is_completed","assignees","record_links","target_object","target_record_id"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// Cache object slugs to avoid repeated calls\nconst objectCache = {};\n\n// Replace this with actual attribute UUIDs as needed\nconst ATTRIBUTE_IDS = {\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\" // this is for \"Name\"\n};\n\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      ensureFields(item);\n\n      if (item.type === \"person\") {\n        const recordId = await upsertPerson(item);\n        item.record_id = recordId; // save for later task use\n      }\n\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process item:\", item, err);\n    }\n  }\n}\n\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n  }\n}\n\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date?.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);\n    else if (Date.parse(date)) d = new Date(date);\n\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer?.includes(\"p\") && h < 12) h += 12;\n      if (mer?.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSON ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const values = {\n    [ATTRIBUTE_IDS.name]: [\n      {\n        first_name: data.first_name || data.name?.split(\" \")[0] || \"Unknown\",\n        last_name: data.last_name || data.name?.split(\" \")[1] || \"\"\n      }\n    ]\n  };\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n\n  if (!res.ok) {\n    console.error(\"❌ Person creation error:\", json);\n    return null;\n  } else {\n    console.log(\"✅ Person created:\", json);\n    return json.data?.id?.record_id;\n  }\n}\n\n// ========== TASK ==========\n\nasync function upsertTask(data) {\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: [],\n      record_links: data.record_id\n        ? [\n            {\n              target_object: \"people\",\n              target_record_id: data.record_id\n            }\n          ]\n        : []\n    }\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n\n  if (!res.ok) {\n    console.error(\"❌ Task creation failed:\", json);\n  } else {\n    console.log(\"✅ Task created:\", json);\n  }\n}\n\nexport { sendToAttio };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}