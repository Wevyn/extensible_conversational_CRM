{"ast":null,"code":"var _jsxFileName = \"/Users/Aditya/ConversationalAI_CRM_Attio/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport './speech-recorder.css';\nimport { sendToAttio } from './attio'; // Import our Attio helper\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpeechRecorder = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentLines, setCurrentLines] = useState(['', '']);\n  const [previousLines, setPreviousLines] = useState(['', '']);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const recognitionRef = useRef(null);\n  const currentTextRef = useRef('');\n  const fullTranscriptRef = useRef('');\n  const triggeredRef = useRef(false);\n  const crmCaptureRef = useRef('');\n  const triggerPhrase = \"initiate crm\";\n  const sendToDeepSeek = async text => {\n    var _data$choices, _data$choices$, _data$choices$$messag;\n    const prompt = `\nYou are a CRM enrichment assistant. Your job is to extract structured updates from sales conversations.\n\nReturn an array of JSON objects. Each object must include a \"type\" field. Supported types: person, deal, task, competitor.\n\nTranscript:\n\"\"\"\n${text}\n\"\"\"\n`;\n    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer YOUR_OPENROUTER_KEY',\n        'Content-Type': 'application/json',\n        'HTTP-Referer': 'http://localhost:3000',\n        'X-Title': 'Attio CRM Parser'\n      },\n      body: JSON.stringify({\n        model: 'deepseek/deepseek-chat-v3-0324:free',\n        messages: [{\n          role: 'system',\n          content: 'You are a helpful assistant that extracts structured CRM updates from transcripts.'\n        }, {\n          role: 'user',\n          content: prompt\n        }]\n      })\n    });\n    const data = await response.json();\n    const raw = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n    if (!raw) return [];\n    try {\n      return JSON.parse(raw);\n    } catch {\n      console.warn('Failed to parse JSON:', raw);\n      return [];\n    }\n  };\n  const updateLyricDisplay = text => {\n    const words = text.split(' ');\n    const wordsPerLine = 8;\n    if (words.length > wordsPerLine * 2) {\n      if (!isAnimating) {\n        setIsAnimating(true);\n        setPreviousLines([currentLines[0], currentLines[1]]);\n        const newLine1 = words.slice(-wordsPerLine * 2, -wordsPerLine).join(' ');\n        const newLine2 = words.slice(-wordsPerLine).join(' ');\n        setTimeout(() => {\n          setCurrentLines([newLine1, newLine2]);\n          setTimeout(() => {\n            setIsAnimating(false);\n            setTimeout(() => {\n              setPreviousLines(['', '']);\n            }, 500);\n          }, 100);\n        }, 50);\n        currentTextRef.current = newLine1 + ' ' + newLine2 + ' ';\n      }\n    } else {\n      const line1 = words.slice(0, wordsPerLine).join(' ');\n      const line2 = words.slice(wordsPerLine).join(' ');\n      setCurrentLines([line1, line2]);\n    }\n  };\n  const toggleRecording = async () => {\n    if (!isRecording) {\n      try {\n        await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        recognitionRef.current.start();\n        setIsRecording(true);\n        setCurrentLines(['', '']);\n        setPreviousLines(['', '']);\n        currentTextRef.current = '';\n        fullTranscriptRef.current = '';\n        triggeredRef.current = false;\n        crmCaptureRef.current = '';\n      } catch (error) {\n        alert('Microphone access denied.');\n      }\n    } else {\n      setIsRecording(false);\n      if (recognitionRef.current) {\n        recognitionRef.current.onend = null;\n        recognitionRef.current.stop();\n      }\n      const finalText = crmCaptureRef.current.trim();\n      if (finalText.length > 5) {\n        console.log('🔁 Sending CRM content to DeepSeek:', finalText);\n        const updates = await sendToDeepSeek(finalText);\n        console.log('📤 Parsed updates:', updates);\n        await sendToAttio(updates);\n      } else {\n        console.log('ℹ️ No CRM content captured.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      alert('Speech recognition not supported.');\n      return;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.lang = 'en-US';\n    recognitionRef.current.onresult = event => {\n      let interim = '',\n        final = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript + ' ';\n        } else {\n          interim += transcript;\n        }\n      }\n      const fullText = currentTextRef.current + final + interim;\n      updateLyricDisplay(fullText);\n      if (final) {\n        currentTextRef.current += final;\n        fullTranscriptRef.current += final + ' ';\n        const clean = final.toLowerCase().trim();\n        if (!triggeredRef.current && clean.includes(triggerPhrase)) {\n          triggeredRef.current = true;\n          crmCaptureRef.current = '';\n        } else if (triggeredRef.current) {\n          crmCaptureRef.current += final + ' ';\n        }\n      }\n    };\n    recognitionRef.current.onerror = e => console.error('Speech error:', e.error);\n    recognitionRef.current.onend = () => {\n      if (isRecording) recognitionRef.current.start();\n    };\n    return () => {\n      var _recognitionRef$curre;\n      return (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    };\n  }, [isRecording]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lyric-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `previous-lines ${isAnimating ? 'animating' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: previousLines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: previousLines[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: currentLines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: currentLines[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gradient-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleRecording,\n      className: `mic-button ${isRecording ? 'recording' : 'idle'}`,\n      children: [isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-ring pulse-ping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-ring pulse-beat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mic-icon\",\n        children: isRecording ? /*#__PURE__*/_jsxDEV(MicOff, {\n          size: 32\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 50\n        }, this) : /*#__PURE__*/_jsxDEV(Mic, {\n          size: 32\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 73\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-text\",\n      children: isRecording ? 'Recording... say \"initiate CRM\" to start logging' : 'Click to start recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechRecorder, \"hUNEAFJtfBE14rfFyjh0d+MSI5s=\");\n_c = SpeechRecorder;\nexport default SpeechRecorder;\nvar _c;\n$RefreshReg$(_c, \"SpeechRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Mic","MicOff","sendToAttio","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeechRecorder","_s","isRecording","setIsRecording","currentLines","setCurrentLines","previousLines","setPreviousLines","isAnimating","setIsAnimating","recognitionRef","currentTextRef","fullTranscriptRef","triggeredRef","crmCaptureRef","triggerPhrase","sendToDeepSeek","text","_data$choices","_data$choices$","_data$choices$$messag","prompt","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","raw","choices","message","parse","console","warn","updateLyricDisplay","words","split","wordsPerLine","length","newLine1","slice","join","newLine2","setTimeout","current","line1","line2","toggleRecording","navigator","mediaDevices","getUserMedia","audio","start","error","alert","onend","stop","finalText","trim","log","updates","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interim","final","i","resultIndex","results","transcript","isFinal","fullText","clean","toLowerCase","includes","onerror","e","_recognitionRef$curre","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","_c","$RefreshReg$"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport './speech-recorder.css';\nimport { sendToAttio } from './attio'; // Import our Attio helper\n\nconst SpeechRecorder = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentLines, setCurrentLines] = useState(['', '']);\n  const [previousLines, setPreviousLines] = useState(['', '']);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const recognitionRef = useRef(null);\n  const currentTextRef = useRef('');\n  const fullTranscriptRef = useRef('');\n  const triggeredRef = useRef(false);\n  const crmCaptureRef = useRef('');\n\n  const triggerPhrase = \"initiate crm\";\n\n  const sendToDeepSeek = async (text) => {\n    const prompt = `\nYou are a CRM enrichment assistant. Your job is to extract structured updates from sales conversations.\n\nReturn an array of JSON objects. Each object must include a \"type\" field. Supported types: person, deal, task, competitor.\n\nTranscript:\n\"\"\"\n${text}\n\"\"\"\n`;\n\n    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer YOUR_OPENROUTER_KEY',\n        'Content-Type': 'application/json',\n        'HTTP-Referer': 'http://localhost:3000',\n        'X-Title': 'Attio CRM Parser'\n      },\n      body: JSON.stringify({\n        model: 'deepseek/deepseek-chat-v3-0324:free',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a helpful assistant that extracts structured CRM updates from transcripts.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ]\n      })\n    });\n\n    const data = await response.json();\n    const raw = data.choices?.[0]?.message?.content;\n    if (!raw) return [];\n\n    try {\n      return JSON.parse(raw);\n    } catch {\n      console.warn('Failed to parse JSON:', raw);\n      return [];\n    }\n  };\n\n  const updateLyricDisplay = (text) => {\n    const words = text.split(' ');\n    const wordsPerLine = 8;\n    if (words.length > wordsPerLine * 2) {\n      if (!isAnimating) {\n        setIsAnimating(true);\n        setPreviousLines([currentLines[0], currentLines[1]]);\n        const newLine1 = words.slice(-wordsPerLine * 2, -wordsPerLine).join(' ');\n        const newLine2 = words.slice(-wordsPerLine).join(' ');\n        setTimeout(() => {\n          setCurrentLines([newLine1, newLine2]);\n          setTimeout(() => {\n            setIsAnimating(false);\n            setTimeout(() => {\n              setPreviousLines(['', '']);\n            }, 500);\n          }, 100);\n        }, 50);\n        currentTextRef.current = newLine1 + ' ' + newLine2 + ' ';\n      }\n    } else {\n      const line1 = words.slice(0, wordsPerLine).join(' ');\n      const line2 = words.slice(wordsPerLine).join(' ');\n      setCurrentLines([line1, line2]);\n    }\n  };\n\n  const toggleRecording = async () => {\n    if (!isRecording) {\n      try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        recognitionRef.current.start();\n        setIsRecording(true);\n        setCurrentLines(['', '']);\n        setPreviousLines(['', '']);\n        currentTextRef.current = '';\n        fullTranscriptRef.current = '';\n        triggeredRef.current = false;\n        crmCaptureRef.current = '';\n      } catch (error) {\n        alert('Microphone access denied.');\n      }\n    } else {\n      setIsRecording(false);\n      if (recognitionRef.current) {\n        recognitionRef.current.onend = null;\n        recognitionRef.current.stop();\n      }\n\n      const finalText = crmCaptureRef.current.trim();\n      if (finalText.length > 5) {\n        console.log('🔁 Sending CRM content to DeepSeek:', finalText);\n        const updates = await sendToDeepSeek(finalText);\n        console.log('📤 Parsed updates:', updates);\n        await sendToAttio(updates);\n      } else {\n        console.log('ℹ️ No CRM content captured.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      alert('Speech recognition not supported.');\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.lang = 'en-US';\n\n    recognitionRef.current.onresult = (event) => {\n      let interim = '', final = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript + ' ';\n        } else {\n          interim += transcript;\n        }\n      }\n\n      const fullText = currentTextRef.current + final + interim;\n      updateLyricDisplay(fullText);\n\n      if (final) {\n        currentTextRef.current += final;\n        fullTranscriptRef.current += final + ' ';\n\n        const clean = final.toLowerCase().trim();\n        if (!triggeredRef.current && clean.includes(triggerPhrase)) {\n          triggeredRef.current = true;\n          crmCaptureRef.current = '';\n        } else if (triggeredRef.current) {\n          crmCaptureRef.current += final + ' ';\n        }\n      }\n    };\n\n    recognitionRef.current.onerror = (e) => console.error('Speech error:', e.error);\n    recognitionRef.current.onend = () => {\n      if (isRecording) recognitionRef.current.start();\n    };\n\n    return () => recognitionRef.current?.stop();\n  }, [isRecording]);\n\n  return (\n    <div className=\"speech-recorder\">\n      <div className=\"lyric-display\">\n        <div className={`previous-lines ${isAnimating ? 'animating' : ''}`}>\n          <div className=\"lyric-line\">{previousLines[0]}</div>\n          <div className=\"lyric-line\">{previousLines[1]}</div>\n        </div>\n        <div className=\"current-lines\">\n          <div className=\"lyric-line\">{currentLines[0]}</div>\n          <div className=\"lyric-line\">{currentLines[1]}</div>\n        </div>\n        <div className=\"gradient-overlay\" />\n      </div>\n      <button onClick={toggleRecording} className={`mic-button ${isRecording ? 'recording' : 'idle'}`}>\n        {isRecording && <>\n          <div className=\"pulse-ring pulse-ping\"></div>\n          <div className=\"pulse-ring pulse-beat\"></div>\n        </>}\n        <div className=\"mic-icon\">{isRecording ? <MicOff size={32} /> : <Mic size={32} />}</div>\n      </button>\n      <div className=\"status-text\">\n        {isRecording ? 'Recording... say \"initiate CRM\" to start logging' : 'Click to start recording'}\n      </div>\n    </div>\n  );\n};\n\nexport default SpeechRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}