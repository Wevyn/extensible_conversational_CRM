{"ast":null,"code":"const ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n// Replace with your real token\n\nasync function sendToAttio(structuredUpdates) {\n  for (const item of structuredUpdates) {\n    try {\n      switch (item.type) {\n        case \"person\":\n          await upsertPerson(item);\n          break;\n        case \"deal\":\n          await updateDeal(item);\n          break;\n        case \"task\":\n          await createTask(item);\n          break;\n        case \"competitor\":\n          await createCompetitor(item);\n          break;\n        default:\n          console.warn(\"Unhandled item type:\", item);\n      }\n    } catch (err) {\n      console.error(\"Failed to send item:\", item, err);\n    }\n  }\n}\nasync function upsertPerson(data) {\n  var _data$name$split$, _data$name, _data$name$split$2, _data$name2;\n  const payload = {\n    first_name: (_data$name$split$ = (_data$name = data.name) === null || _data$name === void 0 ? void 0 : _data$name.split(\" \")[0]) !== null && _data$name$split$ !== void 0 ? _data$name$split$ : \"Unknown\",\n    last_name: (_data$name$split$2 = (_data$name2 = data.name) === null || _data$name2 === void 0 ? void 0 : _data$name2.split(\" \")[1]) !== null && _data$name$split$2 !== void 0 ? _data$name$split$2 : \"\",\n    attributes: {\n      \"Priority\": data.priority || \"Medium\",\n      \"Next Follow-up Date\": data.next_follow_up,\n      \"Notes\": data.notes\n    }\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/people/records?matching_attribute=first_name`, {\n    method: \"PUT\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nasync function updateDeal(data) {\n  const payload = {\n    attributes: {\n      \"Value\": data.value,\n      \"Close Date\": data.close_date,\n      \"Forecast Confidence\": data.forecast_confidence,\n      \"Pain Points\": data.pain_points,\n      \"Decision Maker\": data.decision_maker\n    }\n  };\n  // You’ll need to map a known deal ID here or pass it in `data`\n  const dealId = data.id || \"your-deal-id\";\n  await fetch(`${ATTIO_API_BASE}/objects/deals/records/${dealId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nasync function createTask(data) {\n  const payload = {\n    title: data.description,\n    due_date: data.due_date\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/tasks/records`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nasync function createCompetitor(data) {\n  const payload = {\n    name: data.name\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/competitors/records`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","sendToAttio","structuredUpdates","item","type","upsertPerson","updateDeal","createTask","createCompetitor","console","warn","err","error","data","_data$name$split$","_data$name","_data$name$split$2","_data$name2","payload","first_name","name","split","last_name","attributes","priority","next_follow_up","notes","fetch","method","headers","body","JSON","stringify","value","close_date","forecast_confidence","pain_points","decision_maker","dealId","id","title","description","due_date"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n // Replace with your real token\n\nasync function sendToAttio(structuredUpdates) {\n  for (const item of structuredUpdates) {\n    try {\n      switch (item.type) {\n        case \"person\":\n          await upsertPerson(item);\n          break;\n        case \"deal\":\n          await updateDeal(item);\n          break;\n        case \"task\":\n          await createTask(item);\n          break;\n        case \"competitor\":\n          await createCompetitor(item);\n          break;\n        default:\n          console.warn(\"Unhandled item type:\", item);\n      }\n    } catch (err) {\n      console.error(\"Failed to send item:\", item, err);\n    }\n  }\n}\n\nasync function upsertPerson(data) {\n  const payload = {\n    first_name: data.name?.split(\" \")[0] ?? \"Unknown\",\n    last_name: data.name?.split(\" \")[1] ?? \"\",\n    attributes: {\n      \"Priority\": data.priority || \"Medium\",\n      \"Next Follow-up Date\": data.next_follow_up,\n      \"Notes\": data.notes,\n    },\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/people/records?matching_attribute=first_name`, {\n    method: \"PUT\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n}\n\nasync function updateDeal(data) {\n  const payload = {\n    attributes: {\n      \"Value\": data.value,\n      \"Close Date\": data.close_date,\n      \"Forecast Confidence\": data.forecast_confidence,\n      \"Pain Points\": data.pain_points,\n      \"Decision Maker\": data.decision_maker,\n    },\n  };\n  // You’ll need to map a known deal ID here or pass it in `data`\n  const dealId = data.id || \"your-deal-id\";\n  await fetch(`${ATTIO_API_BASE}/objects/deals/records/${dealId}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n}\n\nasync function createTask(data) {\n  const payload = {\n    title: data.description,\n    due_date: data.due_date,\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/tasks/records`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n}\n\nasync function createCompetitor(data) {\n  const payload = {\n    name: data.name,\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/competitors/records`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}