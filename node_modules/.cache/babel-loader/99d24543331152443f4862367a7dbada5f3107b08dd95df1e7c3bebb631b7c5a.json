{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// In-memory cache for object IDs (e.g., people, companies)\nconst objectCache = {};\n\n// MAIN DISPATCHER\nasync function sendToAttio(structuredUpdates) {\n  for (const item of structuredUpdates) {\n    try {\n      ensureFields(item);\n      const intent = detectIntent(item);\n      if (item.type === \"person\") {\n        if (intent === \"delete\") {\n          await deletePersonByName(item.name);\n        } else {\n          await upsertPerson(item);\n        }\n      }\n      if (item.type === \"task\") {\n        if (intent === \"delete\") {\n          await deleteTaskByDescription(item.description);\n        } else {\n          await upsertTask(item);\n        }\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\n\n// ========== OBJECT ID RESOLUTION ==========\n\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (!res.ok) {\n    const err = await res.text();\n    throw new Error(`‚ùå Failed to fetch object ID for \"${slug}\": ${err}`);\n  }\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`‚ùå Could not extract object_id from: ${JSON.stringify(json)}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== UTILS ==========\n\nfunction detectIntent(item) {\n  const txt = (item.notes || item.description || \"\").toLowerCase();\n  if (txt.includes(\"remove\") || txt.includes(\"cancel\")) return \"delete\";\n  if (txt.includes(\"changed\") || txt.includes(\"update\")) return \"update\";\n  return \"upsert\";\n}\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n    item.linked_records = item.linked_records || [];\n    item.assignees = item.assignees || [];\n  }\n}\nfunction parseDateTime(dueDate, dueTime) {\n  try {\n    let date = new Date();\n    if (dueDate !== null && dueDate !== void 0 && dueDate.toLowerCase().includes(\"tomorrow\")) {\n      date.setDate(date.getDate() + 1);\n    } else {\n      const parsed = new Date(dueDate);\n      if (!isNaN(parsed)) date = parsed;\n    }\n    if (dueTime) {\n      const [timePart, meridian] = dueTime.split(\" \");\n      let [hour, minute] = timePart.split(\":\").map(Number);\n      if (meridian !== null && meridian !== void 0 && meridian.toLowerCase().includes(\"p\") && hour < 12) hour += 12;\n      if (meridian !== null && meridian !== void 0 && meridian.toLowerCase().includes(\"a\") && hour === 12) hour = 0;\n      date.setHours(hour || 0, minute || 0, 0, 0);\n    }\n    return date.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const existingId = await findPersonRecordIdByName(data.name);\n  const [firstName, ...rest] = data.name.split(\" \");\n  const lastName = rest.join(\" \");\n  const payload = {\n    data: {\n      properties: {\n        first_name: firstName,\n        last_name: lastName,\n        notes: data.notes\n      }\n    }\n  };\n  const url = existingId ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${existingId}` : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n  const method = existingId ? \"PATCH\" : \"POST\";\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (res.ok) {\n    var _json$data2;\n    console.log(`‚úÖ Person ${existingId ? \"updated\" : \"created\"}:`, json);\n    return (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.id;\n  } else {\n    console.error(\"‚ùå Person sync error:\", json);\n    return null;\n  }\n}\nasync function deletePersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const id = await findPersonRecordIdByName(name);\n  if (!id) return console.warn(\"‚ö†Ô∏è Person not found:\", name);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    console.log(\"üóëÔ∏è Deleted person:\", name);\n  } else {\n    console.error(\"‚ùå Failed to delete person:\", name);\n  }\n}\nasync function findPersonRecordIdByName(name) {\n  var _json$data3;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const match = (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3.find(entry => {\n    var _entry$properties, _entry$properties2;\n    const full = `${((_entry$properties = entry.properties) === null || _entry$properties === void 0 ? void 0 : _entry$properties.first_name) || \"\"} ${((_entry$properties2 = entry.properties) === null || _entry$properties2 === void 0 ? void 0 : _entry$properties2.last_name) || \"\"}`.trim().toLowerCase();\n    return full === name.toLowerCase();\n  });\n  return (match === null || match === void 0 ? void 0 : match.id) || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  await deleteTaskByDescription(data.description); // Prevent duplicates\n\n  const personId = data.link_to_person_name ? await findPersonRecordIdByName(data.link_to_person_name) : null;\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      linked_records: personId ? [{\n        target_object: \"people\",\n        target_record_id: personId\n      }] : [],\n      assignees: data.assignees\n    }\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"‚úÖ Task created:\", json);\n  } else {\n    console.error(\"‚ùå Task creation error:\", json);\n  }\n}\nasync function deleteTaskByDescription(desc) {\n  var _json$data4;\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const match = (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : _json$data4.find(t => {\n    var _t$content;\n    return ((_t$content = t.content) === null || _t$content === void 0 ? void 0 : _t$content.trim().toLowerCase()) === desc.trim().toLowerCase();\n  });\n  if (!match) return;\n  const del = await fetch(`${ATTIO_API_BASE}/tasks/${match.id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (del.ok) {\n    console.log(\"üóëÔ∏è Deleted task:\", desc);\n  } else {\n    console.error(\"‚ùå Failed to delete task:\", desc);\n  }\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","sendToAttio","structuredUpdates","item","ensureFields","intent","detectIntent","type","deletePersonByName","name","upsertPerson","deleteTaskByDescription","description","upsertTask","err","console","error","getObjectIdBySlug","slug","_json$data","_json$data$id","res","fetch","headers","Authorization","ok","text","Error","json","id","data","object_id","JSON","stringify","txt","notes","toLowerCase","includes","due_date","parseDateTime","due_time","linked_records","assignees","dueDate","dueTime","date","Date","setDate","getDate","parsed","isNaN","timePart","meridian","split","hour","minute","map","Number","setHours","toISOString","peopleId","existingId","findPersonRecordIdByName","firstName","rest","lastName","join","payload","properties","first_name","last_name","url","method","body","_json$data2","log","warn","_json$data3","match","find","entry","_entry$properties","_entry$properties2","full","trim","personId","link_to_person_name","content","format","deadline_at","is_completed","target_object","target_record_id","desc","_json$data4","t","_t$content","del"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// In-memory cache for object IDs (e.g., people, companies)\nconst objectCache = {};\n\n// MAIN DISPATCHER\nasync function sendToAttio(structuredUpdates) {\n  for (const item of structuredUpdates) {\n    try {\n      ensureFields(item);\n      const intent = detectIntent(item);\n\n      if (item.type === \"person\") {\n        if (intent === \"delete\") {\n          await deletePersonByName(item.name);\n        } else {\n          await upsertPerson(item);\n        }\n      }\n\n      if (item.type === \"task\") {\n        if (intent === \"delete\") {\n          await deleteTaskByDescription(item.description);\n        } else {\n          await upsertTask(item);\n        }\n      }\n\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\n\n// ========== OBJECT ID RESOLUTION ==========\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (!res.ok) {\n    const err = await res.text();\n    throw new Error(`‚ùå Failed to fetch object ID for \"${slug}\": ${err}`);\n  }\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`‚ùå Could not extract object_id from: ${JSON.stringify(json)}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\n\n// ========== UTILS ==========\n\nfunction detectIntent(item) {\n  const txt = (item.notes || item.description || \"\").toLowerCase();\n  if (txt.includes(\"remove\") || txt.includes(\"cancel\")) return \"delete\";\n  if (txt.includes(\"changed\") || txt.includes(\"update\")) return \"update\";\n  return \"upsert\";\n}\n\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n    item.linked_records = item.linked_records || [];\n    item.assignees = item.assignees || [];\n  }\n}\n\nfunction parseDateTime(dueDate, dueTime) {\n  try {\n    let date = new Date();\n    if (dueDate?.toLowerCase().includes(\"tomorrow\")) {\n      date.setDate(date.getDate() + 1);\n    } else {\n      const parsed = new Date(dueDate);\n      if (!isNaN(parsed)) date = parsed;\n    }\n\n    if (dueTime) {\n      const [timePart, meridian] = dueTime.split(\" \");\n      let [hour, minute] = timePart.split(\":\").map(Number);\n      if (meridian?.toLowerCase().includes(\"p\") && hour < 12) hour += 12;\n      if (meridian?.toLowerCase().includes(\"a\") && hour === 12) hour = 0;\n      date.setHours(hour || 0, minute || 0, 0, 0);\n    }\n\n    return date.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const existingId = await findPersonRecordIdByName(data.name);\n\n  const [firstName, ...rest] = data.name.split(\" \");\n  const lastName = rest.join(\" \");\n\n  const payload = {\n    data: {\n      properties: {\n        first_name: firstName,\n        last_name: lastName,\n        notes: data.notes\n      }\n    }\n  };\n\n  const url = existingId\n    ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${existingId}`\n    : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n\n  const method = existingId ? \"PATCH\" : \"POST\";\n\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n\n  if (res.ok) {\n    console.log(`‚úÖ Person ${existingId ? \"updated\" : \"created\"}:`, json);\n    return json.data?.id;\n  } else {\n    console.error(\"‚ùå Person sync error:\", json);\n    return null;\n  }\n}\n\nasync function deletePersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const id = await findPersonRecordIdByName(name);\n  if (!id) return console.warn(\"‚ö†Ô∏è Person not found:\", name);\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${id}`, {\n    method: \"DELETE\",\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (res.ok) {\n    console.log(\"üóëÔ∏è Deleted person:\", name);\n  } else {\n    console.error(\"‚ùå Failed to delete person:\", name);\n  }\n}\n\nasync function findPersonRecordIdByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const match = json.data?.find(entry => {\n    const full = `${entry.properties?.first_name || \"\"} ${entry.properties?.last_name || \"\"}`.trim().toLowerCase();\n    return full === name.toLowerCase();\n  });\n\n  return match?.id || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  await deleteTaskByDescription(data.description); // Prevent duplicates\n\n  const personId = data.link_to_person_name\n    ? await findPersonRecordIdByName(data.link_to_person_name)\n    : null;\n\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      linked_records: personId\n        ? [{ target_object: \"people\", target_record_id: personId }]\n        : [],\n      assignees: data.assignees\n    }\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n\n  if (res.ok) {\n    console.log(\"‚úÖ Task created:\", json);\n  } else {\n    console.error(\"‚ùå Task creation error:\", json);\n  }\n}\n\nasync function deleteTaskByDescription(desc) {\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n\n  const match = json.data?.find(\n    t => t.content?.trim().toLowerCase() === desc.trim().toLowerCase()\n  );\n\n  if (!match) return;\n\n  const del = await fetch(`${ATTIO_API_BASE}/tasks/${match.id}`, {\n    method: \"DELETE\",\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (del.ok) {\n    console.log(\"üóëÔ∏è Deleted task:\", desc);\n  } else {\n    console.error(\"‚ùå Failed to delete task:\", desc);\n  }\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}