{"ast":null,"code":"// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {};\nconst attributeCache = {};\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\"\n};\n\n// Deal stage mapping based on language patterns\nconst DEAL_STAGES = {\n  \"initial_contact\": [\"first call\", \"initial discussion\", \"introduction\"],\n  \"discovery\": [\"understanding\", \"requirements\", \"pain points\", \"challenges\"],\n  \"proposal\": [\"proposal\", \"quote\", \"pricing\", \"budget approved\"],\n  \"negotiation\": [\"legal review\", \"contract\", \"terms\", \"negotiating\"],\n  \"closed_won\": [\"signed\", \"closed\", \"deal done\", \"approved\"],\n  \"closed_lost\": [\"went with\", \"chose\", \"lost to\", \"not moving forward\"]\n};\n\n// Sentiment indicators\nconst SENTIMENT_INDICATORS = {\n  positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n  negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n  neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n};\n\n// Leading indicators for deal prediction\nconst LEADING_INDICATORS = {\n  strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n  risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n  urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n  technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n};\nasync function sendToAttio(updates) {\n  console.log('🔄 Processing advanced updates:', updates);\n\n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = updates.filter(item => item.type === \"company\");\n  const personUpdates = updates.filter(item => item.type === \"person\");\n  const dealUpdates = updates.filter(item => item.type === \"deal\");\n  const taskUpdates = updates.filter(item => item.type === \"task\");\n  const relationshipUpdates = updates.filter(item => item.type === \"relationship\");\n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n\n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"❌ Failed to process company:\", item, err);\n    }\n  }\n\n  // Process people with company relationships\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPerson(item);\n      processedEntities.people[item.name] = personId;\n\n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process person:\", item, err);\n    }\n  }\n\n  // Process deals with relationships\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDeal(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"❌ Failed to process deal:\", item, err);\n    }\n  }\n\n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"❌ Failed to process relationship:\", item, err);\n    }\n  }\n\n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"❌ Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('🏢 Upserting company:', data.name);\n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\nasync function createCompany(data) {\n  var _json$data, _json$data$id, _json$data2, _json$data2$id;\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Company created:\", (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.record_id);\n  return (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : (_json$data2$id = _json$data2.id) === null || _json$data2$id === void 0 ? void 0 : _json$data2$id.record_id;\n}\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Company updated:\", recordId);\n  return recordId;\n}\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== DEALS ==========\n\nasync function upsertDeal(data, processedEntities) {\n  console.log('💼 Upserting deal:', data.name);\n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDeal(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDeal(data, processedEntities);\n  }\n}\nasync function createDeal(data, processedEntities) {\n  var _json$data3, _json$data3$id, _json$data4, _json$data4$id;\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    values[ATTRIBUTE_IDS.stage] = data.stage;\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n  const payload = {\n    data: {\n      values\n    }\n  };\n\n  // Link to company and people\n  if (data.company && processedEntities.companies[data.company]) {\n    payload.data.linked_records = [{\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    }];\n  }\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Deal created:\", (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : (_json$data3$id = _json$data3.id) === null || _json$data3$id === void 0 ? void 0 : _json$data3$id.record_id);\n  return (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : (_json$data4$id = _json$data4.id) === null || _json$data4$id === void 0 ? void 0 : _json$data4$id.record_id;\n}\nasync function updateDeal(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    values[ATTRIBUTE_IDS.stage] = data.stage;\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Deal updated:\", recordId);\n  return recordId;\n}\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPerson(data) {\n  console.log('👤 Upserting person with sentiment:', data.name, data.sentiment);\n  const existing = await queryPersonByName(data.name);\n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    return await createPersonWithSentiment(data);\n  }\n}\nasync function createPersonWithSentiment(data) {\n  var _json$data5, _json$data5$id, _json$data6, _json$data6$id;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = data.notes;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Person created with sentiment:\", (_json$data5 = json.data) === null || _json$data5 === void 0 ? void 0 : (_json$data5$id = _json$data5.id) === null || _json$data5$id === void 0 ? void 0 : _json$data5$id.record_id);\n  return (_json$data6 = json.data) === null || _json$data6 === void 0 ? void 0 : (_json$data6$id = _json$data6.id) === null || _json$data6$id === void 0 ? void 0 : _json$data6$id.record_id;\n}\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {};\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    var _existing$values;\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = (existing === null || existing === void 0 ? void 0 : (_existing$values = existing.values) === null || _existing$values === void 0 ? void 0 : _existing$values[ATTRIBUTE_IDS.notes]) || \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes ? `${existingNotes}\\n\\n${data.notes}` : data.notes;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Person updated with sentiment:\", recordId);\n  return recordId;\n}\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('🔗 Updating relationships:', data);\n\n  // Multi-contact relationship updates\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n\n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n}\nasync function linkPersonToCompany(personId, companyId) {\n  // This would use Attio's relationship API to link person to company\n  console.log(`🔗 Linking person ${personId} to company ${companyId}`);\n  // Implementation depends on your Attio workspace setup\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  var _json$data7, _json$data8;\n  console.log('📋 Creating advanced task:', data.description);\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities\n  const linkedRecords = [];\n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n  console.log(\"✅ Advanced task created:\", (_json$data7 = json.data) === null || _json$data7 === void 0 ? void 0 : _json$data7.id);\n  return (_json$data8 = json.data) === null || _json$data8 === void 0 ? void 0 : _json$data8.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data9, _json$data9$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n  const json = await res.json();\n  const id = (_json$data9 = json.data) === null || _json$data9 === void 0 ? void 0 : (_json$data9$id = _json$data9.id) === null || _json$data9$id === void 0 ? void 0 : _json$data9$id.object_id;\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\nasync function initializeAttributeIds() {\n  try {\n    console.log('🔧 Initializing advanced attribute IDs...');\n\n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n\n    // Map to our attribute system\n    ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    ATTRIBUTE_IDS.role = peopleAttrs.role;\n    ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    console.log('✅ Advanced attribute IDs initialized');\n  } catch (err) {\n    console.error('❌ Failed to initialize advanced attribute IDs:', err);\n  }\n}\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const attributes = {};\n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n  const lowerText = text.toLowerCase();\n\n  // Stage detection\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => lowerText.includes(signal));\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => lowerText.includes(signal));\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n  return analysis;\n}\nexport { sendToAttio, initializeAttributeIds, analyzeDealLanguage, DEAL_STAGES, SENTIMENT_INDICATORS, LEADING_INDICATORS };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","attributeCache","ATTRIBUTE_IDS","name","email","phone","notes","role","sentiment","deal_name","deal_value","close_date","stage","probability","competitors","decision_maker","pain_points","company_name","relationship_health","expansion_opportunity","churn_risk","DEAL_STAGES","SENTIMENT_INDICATORS","positive","negative","neutral","LEADING_INDICATORS","strong_buying_signals","risk_signals","urgency_signals","technical_fit","sendToAttio","updates","console","log","companyUpdates","filter","item","type","personUpdates","dealUpdates","taskUpdates","relationshipUpdates","processedEntities","companies","people","deals","companyId","upsertCompany","err","error","personId","upsertPerson","company","linkPersonToCompany","dealId","upsertDeal","updateRelationships","upsertAdvancedTask","data","existing","queryCompanyByName","updateCompany","id","record_id","createCompany","_json$data","_json$data$id","_json$data2","_json$data2$id","companiesId","getObjectIdBySlug","values","payload","JSON","stringify","res","fetch","method","headers","Authorization","body","json","ok","Error","recordId","Object","keys","length","and","attribute","query","limit","queryDealByName","updateDeal","createDeal","_json$data3","_json$data3$id","_json$data4","_json$data4$id","dealsId","value","parseFloat","toString","replace","parseDealDate","linked_records","target_object","target_record_id","queryPersonByName","updatePersonWithSentiment","createPersonWithSentiment","_json$data5","_json$data5$id","_json$data6","_json$data6$id","peopleId","fullName","first_name","last_name","trim","full_name","email_address","_existing$values","getPersonById","existingNotes","contact_updates","update","context","account_health","overall_score","expansion_notes","risk_level","_json$data7","_json$data8","description","content","format","deadline_at","due_date","is_completed","assignees","linkedRecords","link_to_person_name","push","link_to_company","link_to_deal","dateStr","toLowerCase","includes","year","Date","getFullYear","toISOString","nextQuarter","setMonth","getMonth","slug","_json$data9","_json$data9$id","status","object_id","initializeAttributeIds","peopleAttrs","getAttributeIds","dealAttrs","companyAttrs","email_addresses","phone_numbers","objectSlug","objectId","attributes","forEach","attr","api_slug","attribute_id","analyzeDealLanguage","text","analysis","urgency","buying_signals","value_indicators","lowerText","indicators","entries","some","indicator","positiveCount","word","negativeCount","signal","valueMatch","match"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/advanced-attio.js"],"sourcesContent":["// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\nconst objectCache = {};\nconst attributeCache = {};\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  \n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  \n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\"\n};\n\n// Deal stage mapping based on language patterns\nconst DEAL_STAGES = {\n  \"initial_contact\": [\"first call\", \"initial discussion\", \"introduction\"],\n  \"discovery\": [\"understanding\", \"requirements\", \"pain points\", \"challenges\"],\n  \"proposal\": [\"proposal\", \"quote\", \"pricing\", \"budget approved\"],\n  \"negotiation\": [\"legal review\", \"contract\", \"terms\", \"negotiating\"],\n  \"closed_won\": [\"signed\", \"closed\", \"deal done\", \"approved\"],\n  \"closed_lost\": [\"went with\", \"chose\", \"lost to\", \"not moving forward\"]\n};\n\n// Sentiment indicators\nconst SENTIMENT_INDICATORS = {\n  positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n  negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n  neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n};\n\n// Leading indicators for deal prediction\nconst LEADING_INDICATORS = {\n  strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n  risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n  urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n  technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n};\n\nasync function sendToAttio(updates) {\n  console.log('🔄 Processing advanced updates:', updates);\n  \n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = updates.filter(item => item.type === \"company\");\n  const personUpdates = updates.filter(item => item.type === \"person\");\n  const dealUpdates = updates.filter(item => item.type === \"deal\");\n  const taskUpdates = updates.filter(item => item.type === \"task\");\n  const relationshipUpdates = updates.filter(item => item.type === \"relationship\");\n  \n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n  \n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"❌ Failed to process company:\", item, err);\n    }\n  }\n  \n  // Process people with company relationships\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPerson(item);\n      processedEntities.people[item.name] = personId;\n      \n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process person:\", item, err);\n    }\n  }\n  \n  // Process deals with relationships\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDeal(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"❌ Failed to process deal:\", item, err);\n    }\n  }\n  \n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"❌ Failed to process relationship:\", item, err);\n    }\n  }\n  \n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"❌ Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('🏢 Upserting company:', data.name);\n  \n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\n\nasync function createCompany(data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Company created:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Company updated:\", recordId);\n  return recordId;\n}\n\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== DEALS ==========\n\nasync function upsertDeal(data, processedEntities) {\n  console.log('💼 Upserting deal:', data.name);\n  \n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDeal(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDeal(data, processedEntities);\n  }\n}\n\nasync function createDeal(data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    values[ATTRIBUTE_IDS.stage] = data.stage;\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n\n  const payload = { data: { values } };\n  \n  // Link to company and people\n  if (data.company && processedEntities.companies[data.company]) {\n    payload.data.linked_records = [{\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    }];\n  }\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Deal created:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updateDeal(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    values[ATTRIBUTE_IDS.stage] = data.stage;\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Deal updated:\", recordId);\n  return recordId;\n}\n\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPerson(data) {\n  console.log('👤 Upserting person with sentiment:', data.name, data.sentiment);\n  \n  const existing = await queryPersonByName(data.name);\n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    return await createPersonWithSentiment(data);\n  }\n}\n\nasync function createPersonWithSentiment(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = data.notes;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Person created with sentiment:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const values = {};\n  \n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = existing?.values?.[ATTRIBUTE_IDS.notes] || \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes ? `${existingNotes}\\n\\n${data.notes}` : data.notes;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Person updated with sentiment:\", recordId);\n  return recordId;\n}\n\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('🔗 Updating relationships:', data);\n  \n  // Multi-contact relationship updates\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n  \n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n}\n\nasync function linkPersonToCompany(personId, companyId) {\n  // This would use Attio's relationship API to link person to company\n  console.log(`🔗 Linking person ${personId} to company ${companyId}`);\n  // Implementation depends on your Attio workspace setup\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  console.log('📋 Creating advanced task:', data.description);\n  \n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities\n  const linkedRecords = [];\n  \n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  \n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\", \n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  \n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"✅ Advanced task created:\", json.data?.id);\n  return json.data?.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    \n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\nasync function initializeAttributeIds() {\n  try {\n    console.log('🔧 Initializing advanced attribute IDs...');\n    \n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n    \n    // Map to our attribute system\n    ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    ATTRIBUTE_IDS.role = peopleAttrs.role;\n    ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    \n    ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    \n    ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    \n    console.log('✅ Advanced attribute IDs initialized');\n  } catch (err) {\n    console.error('❌ Failed to initialize advanced attribute IDs:', err);\n  }\n}\n\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const attributes = {};\n  \n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n\n  const lowerText = text.toLowerCase();\n\n  // Stage detection\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  \n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';\n  else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n\n  return analysis;\n}\n\nexport { \n  sendToAttio, \n  initializeAttributeIds, \n  analyzeDealLanguage,\n  DEAL_STAGES,\n  SENTIMENT_INDICATORS,\n  LEADING_INDICATORS \n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}