{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\"; // replace in .env or securely\n\nasync function sendToAttio(structuredUpdates) {\n  for (const item of structuredUpdates) {\n    try {\n      switch (item.type) {\n        case \"person\":\n          await upsertPerson(item);\n          break;\n        case \"task\":\n          await createTask(item);\n          break;\n        default:\n          console.warn(\"❓ Unhandled item type:\", item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to send item:\", item, err);\n    }\n  }\n}\nfunction parseDateTime(dueDate, dueTime) {\n  try {\n    // Naive parsing for \"tomorrow\" + \"3:00 p.m.\" or real date\n    let date = new Date();\n    if (dueDate !== null && dueDate !== void 0 && dueDate.toLowerCase().includes(\"tomorrow\")) {\n      date.setDate(date.getDate() + 1);\n    } else {\n      const parsed = new Date(dueDate);\n      if (!isNaN(parsed)) date = parsed;\n    }\n    if (dueTime) {\n      const [timePart, meridian] = dueTime.split(' ');\n      let [hour, minute] = timePart.split(':').map(Number);\n      if ((meridian === null || meridian === void 0 ? void 0 : meridian.toLowerCase()) === 'p.m.' && hour < 12) hour += 12;\n      if ((meridian === null || meridian === void 0 ? void 0 : meridian.toLowerCase()) === 'a.m.' && hour === 12) hour = 0;\n      date.setHours(hour || 0, minute || 0, 0, 0);\n    }\n    return date.toISOString();\n  } catch (err) {\n    console.warn('⚠️ Failed to parse datetime:', dueDate, dueTime, err);\n    return new Date().toISOString(); // fallback to now\n  }\n}\nasync function upsertPerson(data) {\n  const [firstName, ...rest] = (data.name || \"Unknown\").split(\" \");\n  const lastName = rest.join(\" \");\n  const payload = {\n    data: {\n      properties: {\n        first_name: firstName,\n        last_name: lastName,\n        notes: data.notes || \"\"\n      }\n    }\n  };\n  const response = await fetch(`${ATTIO_API_BASE}/objects/3a190831-e061-4b7f-af02-644a2ff25c04/records`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const result = await response.json();\n  if (response.ok) {\n    var _result$data;\n    console.log(\"✅ Created/Updated Person:\", result);\n    return (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.id; // record ID\n  } else {\n    console.error(\"❌ Person create error:\", result);\n    return null;\n  }\n}\nasync function createTask(data) {\n  if (!data.description || !data.due_date) {\n    console.warn(\"⚠️ Missing task description or due date.\");\n    return;\n  }\n\n  // Try linking to person by name if provided\n  let personRecordId = null;\n  if (data.link_to_person_name) {\n    personRecordId = await findPersonRecordIdByName(data.link_to_person_name);\n  }\n  const payload = {\n    data: {\n      content: data.description,\n      format: 'plaintext',\n      deadline_at: new Date(data.due_date).toISOString(),\n      is_completed: false,\n      linked_records: personRecordId ? [{\n        target_object: \"people\",\n        target_record_id: personRecordId\n      }] : [],\n      assignees: [] // optionally insert yourself later\n    }\n  };\n  const response = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const result = await response.json();\n  if (response.ok) {\n    console.log(\"✅ Task created:\", result);\n  } else {\n    console.error(\"❌ Task creation failed:\", result);\n  }\n}\nasync function findPersonRecordIdByName(name) {\n  if (!name) return null;\n  const response = await fetch(`${ATTIO_API_BASE}/objects/3a190831-e061-4b7f-af02-644a2ff25c04/records`, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN\n    }\n  });\n  const json = await response.json();\n  const match = json.data.find(entry => {\n    var _entry$properties, _entry$properties2;\n    const fullName = (((_entry$properties = entry.properties) === null || _entry$properties === void 0 ? void 0 : _entry$properties.first_name) || '') + ' ' + (((_entry$properties2 = entry.properties) === null || _entry$properties2 === void 0 ? void 0 : _entry$properties2.last_name) || '');\n    return fullName.toLowerCase() === name.toLowerCase();\n  });\n  return (match === null || match === void 0 ? void 0 : match.id) || null;\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","sendToAttio","structuredUpdates","item","type","upsertPerson","createTask","console","warn","err","error","parseDateTime","dueDate","dueTime","date","Date","toLowerCase","includes","setDate","getDate","parsed","isNaN","timePart","meridian","split","hour","minute","map","Number","setHours","toISOString","data","firstName","rest","name","lastName","join","payload","properties","first_name","last_name","notes","response","fetch","method","headers","body","JSON","stringify","result","json","ok","_result$data","log","id","description","due_date","personRecordId","link_to_person_name","findPersonRecordIdByName","content","format","deadline_at","is_completed","linked_records","target_object","target_record_id","assignees","match","find","entry","_entry$properties","_entry$properties2","fullName"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\"; // replace in .env or securely\n\n\nasync function sendToAttio(structuredUpdates) {\n  for (const item of structuredUpdates) {\n    try {\n      switch (item.type) {\n        case \"person\":\n          await upsertPerson(item);\n          break;\n        case \"task\":\n          await createTask(item);\n          break;\n        default:\n          console.warn(\"❓ Unhandled item type:\", item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to send item:\", item, err);\n    }\n  }\n}\nfunction parseDateTime(dueDate, dueTime) {\n  try {\n    // Naive parsing for \"tomorrow\" + \"3:00 p.m.\" or real date\n    let date = new Date();\n    if (dueDate?.toLowerCase().includes(\"tomorrow\")) {\n      date.setDate(date.getDate() + 1);\n    } else {\n      const parsed = new Date(dueDate);\n      if (!isNaN(parsed)) date = parsed;\n    }\n\n    if (dueTime) {\n      const [timePart, meridian] = dueTime.split(' ');\n      let [hour, minute] = timePart.split(':').map(Number);\n      if (meridian?.toLowerCase() === 'p.m.' && hour < 12) hour += 12;\n      if (meridian?.toLowerCase() === 'a.m.' && hour === 12) hour = 0;\n\n      date.setHours(hour || 0, minute || 0, 0, 0);\n    }\n\n    return date.toISOString();\n  } catch (err) {\n    console.warn('⚠️ Failed to parse datetime:', dueDate, dueTime, err);\n    return new Date().toISOString(); // fallback to now\n  }\n}\n\nasync function upsertPerson(data) {\n  const [firstName, ...rest] = (data.name || \"Unknown\").split(\" \");\n  const lastName = rest.join(\" \");\n  \n  const payload = {\n    data: {\n      properties: {\n        first_name: firstName,\n        last_name: lastName,\n        notes: data.notes || \"\",\n      }\n    }\n  };\n\n  const response = await fetch(`${ATTIO_API_BASE}/objects/3a190831-e061-4b7f-af02-644a2ff25c04/records`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n\n  const result = await response.json();\n  if (response.ok) {\n    console.log(\"✅ Created/Updated Person:\", result);\n    return result.data?.id; // record ID\n  } else {\n    console.error(\"❌ Person create error:\", result);\n    return null;\n  }\n}\n\nasync function createTask(data) {\n  if (!data.description || !data.due_date) {\n    console.warn(\"⚠️ Missing task description or due date.\");\n    return;\n  }\n\n  // Try linking to person by name if provided\n  let personRecordId = null;\n  if (data.link_to_person_name) {\n    personRecordId = await findPersonRecordIdByName(data.link_to_person_name);\n  }\n\n  const payload = {\n    data: {\n      content: data.description,\n      format: 'plaintext',\n      deadline_at: new Date(data.due_date).toISOString(),\n      is_completed: false,\n      linked_records: personRecordId ? [\n        { target_object: \"people\", target_record_id: personRecordId }\n      ] : [],\n      assignees: [] // optionally insert yourself later\n    }\n  };\n\n  const response = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n  });\n\n  const result = await response.json();\n  if (response.ok) {\n    console.log(\"✅ Task created:\", result);\n  } else {\n    console.error(\"❌ Task creation failed:\", result);\n  }\n}\n\nasync function findPersonRecordIdByName(name) {\n  if (!name) return null;\n  const response = await fetch(`${ATTIO_API_BASE}/objects/3a190831-e061-4b7f-af02-644a2ff25c04/records`, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": BEARER_TOKEN,\n    }\n  });\n\n  const json = await response.json();\n  const match = json.data.find((entry) => {\n    const fullName = (entry.properties?.first_name || '') + ' ' + (entry.properties?.last_name || '');\n    return fullName.toLowerCase() === name.toLowerCase();\n  });\n\n  return match?.id || null;\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}