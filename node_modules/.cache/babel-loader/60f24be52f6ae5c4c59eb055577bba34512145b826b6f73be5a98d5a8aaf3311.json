{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// Cache to avoid redundant fetches\nconst objectCache = {};\nconst attributeCache = {};\n\n// === UTILITY ===\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\nasync function getAttributeId(slug, field) {\n  const cacheKey = `${slug}.${field}`;\n  if (attributeCache[cacheKey]) return attributeCache[cacheKey];\n  const objectId = await getObjectIdBySlug(slug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const attr = json.data.find(attr => attr.name.toLowerCase().includes(field));\n  if (!attr) throw new Error(`❌ Attribute \"${field}\" not found`);\n  attributeCache[cacheKey] = attr.id;\n  return attr.id;\n}\nfunction parseDateTime(dateStr) {\n  try {\n    return new Date(dateStr).toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\n// === MAIN ENTRY ===\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      if (item.type === \"person\") {\n        await upsertPerson(item);\n      }\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process item:\", item, err);\n    }\n  }\n}\n\n// === PEOPLE ===\nasync function upsertPerson(data) {\n  var _json$data2;\n  const objectSlug = \"people\";\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const record = await queryPersonByName(data.name);\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n  const values = {\n    [await getAttributeId(objectSlug, \"first_name\")]: first,\n    [await getAttributeId(objectSlug, \"last_name\")]: last,\n    [await getAttributeId(objectSlug, \"notes\")]: data.notes || \"\"\n  };\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const url = record ? `${ATTIO_API_BASE}/objects/${objectId}/records/${record.id}` : `${ATTIO_API_BASE}/objects/${objectId}/records`;\n  const method = record ? \"PUT\" : \"POST\";\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"❌ Person sync error:\", json);\n  } else {\n    console.log(`✅ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n  return (record === null || record === void 0 ? void 0 : record.id) || ((_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.id);\n}\nasync function queryPersonByName(name) {\n  var _json$data3;\n  const objectId = await getObjectIdBySlug(\"people\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      filter: {\n        name\n      },\n      limit: 1,\n      offset: 0\n    })\n  });\n  const json = await res.json();\n  return ((_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3[0]) || null;\n}\nasync function getPersonIdByName(name) {\n  const record = await queryPersonByName(name);\n  return (record === null || record === void 0 ? void 0 : record.id) || null;\n}\n\n// === TASKS ===\nasync function upsertTask(data) {\n  const personId = data.link_to_person_name ? await getPersonIdByName(data.link_to_person_name) : null;\n  const payload = {\n    data: {\n      content: data.description || \"Untitled task\",\n      format: \"plaintext\",\n      deadline_at: parseDateTime(data.due_date),\n      is_completed: false,\n      assignees: data.assignees || [],\n      linked_records: personId ? [{\n        target_object: \"people\",\n        target_record_id: personId\n      }] : []\n    }\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"✅ Task created:\", json);\n  } else {\n    console.error(\"❌ Task creation failed:\", json);\n  }\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","attributeCache","getObjectIdBySlug","slug","_json$data","_json$data$id","res","fetch","headers","Authorization","json","id","data","object_id","Error","getAttributeId","field","cacheKey","objectId","attr","find","name","toLowerCase","includes","parseDateTime","dateStr","Date","toISOString","sendToAttio","updates","item","type","upsertPerson","upsertTask","err","console","error","_json$data2","objectSlug","record","queryPersonByName","first","rest","split","last","join","values","notes","payload","JSON","stringify","url","method","body","ok","log","_json$data3","filter","limit","offset","getPersonIdByName","personId","link_to_person_name","content","description","format","deadline_at","due_date","is_completed","assignees","linked_records","target_object","target_record_id"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n\n// Cache to avoid redundant fetches\nconst objectCache = {};\nconst attributeCache = {};\n\n// === UTILITY ===\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\nasync function getAttributeId(slug, field) {\n  const cacheKey = `${slug}.${field}`;\n  if (attributeCache[cacheKey]) return attributeCache[cacheKey];\n\n  const objectId = await getObjectIdBySlug(slug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n  const json = await res.json();\n\n  const attr = json.data.find(attr => attr.name.toLowerCase().includes(field));\n  if (!attr) throw new Error(`❌ Attribute \"${field}\" not found`);\n\n  attributeCache[cacheKey] = attr.id;\n  return attr.id;\n}\n\nfunction parseDateTime(dateStr) {\n  try {\n    return new Date(dateStr).toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\n// === MAIN ENTRY ===\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      if (item.type === \"person\") {\n        await upsertPerson(item);\n      }\n\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process item:\", item, err);\n    }\n  }\n}\n\n// === PEOPLE ===\nasync function upsertPerson(data) {\n  const objectSlug = \"people\";\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const record = await queryPersonByName(data.name);\n\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n\n  const values = {\n    [await getAttributeId(objectSlug, \"first_name\")]: first,\n    [await getAttributeId(objectSlug, \"last_name\")]: last,\n    [await getAttributeId(objectSlug, \"notes\")]: data.notes || \"\"\n  };\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const url = record\n    ? `${ATTIO_API_BASE}/objects/${objectId}/records/${record.id}`\n    : `${ATTIO_API_BASE}/objects/${objectId}/records`;\n\n  const method = record ? \"PUT\" : \"POST\";\n\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"❌ Person sync error:\", json);\n  } else {\n    console.log(`✅ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n\n  return record?.id || json.data?.id;\n}\n\nasync function queryPersonByName(name) {\n  const objectId = await getObjectIdBySlug(\"people\");\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ filter: { name }, limit: 1, offset: 0 })\n  });\n\n  const json = await res.json();\n  return json.data?.[0] || null;\n}\n\nasync function getPersonIdByName(name) {\n  const record = await queryPersonByName(name);\n  return record?.id || null;\n}\n\n// === TASKS ===\nasync function upsertTask(data) {\n  const personId = data.link_to_person_name\n    ? await getPersonIdByName(data.link_to_person_name)\n    : null;\n\n  const payload = {\n    data: {\n      content: data.description || \"Untitled task\",\n      format: \"plaintext\",\n      deadline_at: parseDateTime(data.due_date),\n      is_completed: false,\n      assignees: data.assignees || [],\n      linked_records: personId\n        ? [{ target_object: \"people\", target_record_id: personId }]\n        : []\n    }\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"✅ Task created:\", json);\n  } else {\n    console.error(\"❌ Task creation failed:\", json);\n  }\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}