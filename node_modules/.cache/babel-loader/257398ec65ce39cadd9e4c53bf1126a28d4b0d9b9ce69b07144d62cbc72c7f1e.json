{"ast":null,"code":"const ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n// Replace with your real token\n\nlet objectMap = {}; // e.g., { person: 'obj_abc123', task: 'obj_def456' }\nlet attributeMap = {}; // e.g., { person: { first_name: 'attr_123', notes: 'attr_456' } }\n\nasync function fetchObjectsAndAttributes() {\n  const objectRes = await fetch(`${ATTIO_API_BASE}/objects`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const objectData = await objectRes.json();\n  for (const obj of objectData.data) {\n    if (!obj.label) continue; // Skip unnamed objects\n    const label = obj.label.toLowerCase();\n    objectMap[label] = obj.id;\n    const attrRes = await fetch(`${ATTIO_API_BASE}/objects/${obj.id}/attributes`, {\n      headers: {\n        Authorization: BEARER_TOKEN\n      }\n    });\n    const attrData = await attrRes.json();\n    attributeMap[label] = {};\n    for (const attr of attrData.data) {\n      const key = attr.label.toLowerCase().replace(/\\s+/g, \"_\");\n      attributeMap[label][key] = attr.id;\n    }\n  }\n}\nasync function sendToAttio(structuredUpdates) {\n  if (!Object.keys(objectMap).length) {\n    await fetchObjectsAndAttributes();\n  }\n  for (const item of structuredUpdates) {\n    try {\n      switch (item.type) {\n        case \"person\":\n          await upsertPerson(item);\n          break;\n        case \"deal\":\n          await updateDeal(item);\n          break;\n        case \"task\":\n          await createTask(item);\n          break;\n        case \"competitor\":\n          await createCompetitor(item);\n          break;\n        default:\n          console.warn(\"Unhandled item type:\", item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to send item:\", item, err);\n    }\n  }\n}\nasync function upsertPerson(data) {\n  const personId = objectMap[\"person\"];\n  const attrs = attributeMap[\"person\"];\n  const [first, last] = (data.name || \"Unknown\").split(\" \");\n  const payload = {\n    values: {\n      [attrs.first_name]: first,\n      [attrs.last_name]: last || '',\n      ...(data.notes ? {\n        [attrs.notes]: data.notes\n      } : {}),\n      ...(data.priority ? {\n        [attrs.priority]: data.priority\n      } : {})\n    }\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/${personId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nasync function updateDeal(data) {\n  const dealId = objectMap[\"deal\"];\n  const attrs = attributeMap[\"deal\"];\n  const payload = {\n    values: {\n      ...(data.value ? {\n        [attrs.value]: data.value\n      } : {}),\n      ...(data.close_date ? {\n        [attrs.close_date]: data.close_date\n      } : {}),\n      ...(data.pain_points ? {\n        [attrs.pain_points]: data.pain_points\n      } : {}),\n      ...(data.decision_maker ? {\n        [attrs.decision_maker]: data.decision_maker\n      } : {})\n    }\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/${dealId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nasync function createTask(data) {\n  const taskId = objectMap[\"task\"];\n  const attrs = attributeMap[\"task\"];\n  const payload = {\n    values: {\n      ...(data.description ? {\n        [attrs.title || attrs.description]: data.description\n      } : {}),\n      ...(data.due_date ? {\n        [attrs.due_date]: data.due_date\n      } : {})\n    }\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/${taskId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nasync function createCompetitor(data) {\n  const competitorId = objectMap[\"competitor\"];\n  const attrs = attributeMap[\"competitor\"];\n  const payload = {\n    values: {\n      [attrs.name]: data.name\n    }\n  };\n  await fetch(`${ATTIO_API_BASE}/objects/${competitorId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectMap","attributeMap","fetchObjectsAndAttributes","objectRes","fetch","headers","Authorization","objectData","json","obj","data","label","toLowerCase","id","attrRes","attrData","attr","key","replace","sendToAttio","structuredUpdates","Object","keys","length","item","type","upsertPerson","updateDeal","createTask","createCompetitor","console","warn","err","error","personId","attrs","first","last","name","split","payload","values","first_name","last_name","notes","priority","method","body","JSON","stringify","dealId","value","close_date","pain_points","decision_maker","taskId","description","title","due_date","competitorId"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n // Replace with your real token\n\nlet objectMap = {};       // e.g., { person: 'obj_abc123', task: 'obj_def456' }\nlet attributeMap = {};    // e.g., { person: { first_name: 'attr_123', notes: 'attr_456' } }\n\nasync function fetchObjectsAndAttributes() {\n  const objectRes = await fetch(`${ATTIO_API_BASE}/objects`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n  const objectData = await objectRes.json();\n\n  for (const obj of objectData.data) {\n    if (!obj.label) continue; // Skip unnamed objects\n    const label = obj.label.toLowerCase();\n    objectMap[label] = obj.id;\n\n    const attrRes = await fetch(`${ATTIO_API_BASE}/objects/${obj.id}/attributes`, {\n      headers: { Authorization: BEARER_TOKEN }\n    });\n    const attrData = await attrRes.json();\n    attributeMap[label] = {};\n    for (const attr of attrData.data) {\n      const key = attr.label.toLowerCase().replace(/\\s+/g, \"_\");\n      attributeMap[label][key] = attr.id;\n    }\n  }\n}\n\nasync function sendToAttio(structuredUpdates) {\n  if (!Object.keys(objectMap).length) {\n    await fetchObjectsAndAttributes();\n  }\n\n  for (const item of structuredUpdates) {\n    try {\n      switch (item.type) {\n        case \"person\":\n          await upsertPerson(item);\n          break;\n        case \"deal\":\n          await updateDeal(item);\n          break;\n        case \"task\":\n          await createTask(item);\n          break;\n        case \"competitor\":\n          await createCompetitor(item);\n          break;\n        default:\n          console.warn(\"Unhandled item type:\", item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to send item:\", item, err);\n    }\n  }\n}\n\nasync function upsertPerson(data) {\n  const personId = objectMap[\"person\"];\n  const attrs = attributeMap[\"person\"];\n  const [first, last] = (data.name || \"Unknown\").split(\" \");\n\n  const payload = {\n    values: {\n      [attrs.first_name]: first,\n      [attrs.last_name]: last || '',\n      ...(data.notes ? { [attrs.notes]: data.notes } : {}),\n      ...(data.priority ? { [attrs.priority]: data.priority } : {})\n    }\n  };\n\n  await fetch(`${ATTIO_API_BASE}/objects/${personId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\n\nasync function updateDeal(data) {\n  const dealId = objectMap[\"deal\"];\n  const attrs = attributeMap[\"deal\"];\n\n  const payload = {\n    values: {\n      ...(data.value ? { [attrs.value]: data.value } : {}),\n      ...(data.close_date ? { [attrs.close_date]: data.close_date } : {}),\n      ...(data.pain_points ? { [attrs.pain_points]: data.pain_points } : {}),\n      ...(data.decision_maker ? { [attrs.decision_maker]: data.decision_maker } : {})\n    }\n  };\n\n  await fetch(`${ATTIO_API_BASE}/objects/${dealId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\n\nasync function createTask(data) {\n  const taskId = objectMap[\"task\"];\n  const attrs = attributeMap[\"task\"];\n\n  const payload = {\n    values: {\n      ...(data.description ? { [attrs.title || attrs.description]: data.description } : {}),\n      ...(data.due_date ? { [attrs.due_date]: data.due_date } : {})\n    }\n  };\n\n  await fetch(`${ATTIO_API_BASE}/objects/${taskId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\n\nasync function createCompetitor(data) {\n  const competitorId = objectMap[\"competitor\"];\n  const attrs = attributeMap[\"competitor\"];\n\n  const payload = {\n    values: {\n      [attrs.name]: data.name\n    }\n  };\n\n  await fetch(`${ATTIO_API_BASE}/objects/${competitorId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}