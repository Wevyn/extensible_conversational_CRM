{"ast":null,"code":"var _jsxFileName = \"/Users/Aditya/ConversationalAI_CRM_Attio/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport './speech-recorder.css';\nimport { sendToAttio, initializeAttributeIds } from './attio'; // Updated Attio integration\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpeechRecorder = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentLines, setCurrentLines] = useState(['', '']);\n  const [previousLines, setPreviousLines] = useState(['', '']);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const recognitionRef = useRef(null);\n  const currentTextRef = useRef('');\n  const fullTranscriptRef = useRef('');\n  const triggeredRef = useRef(false);\n  const crmCaptureRef = useRef('');\n  const triggerPhrase = \"initiate CRM\";\n\n  // Initialize attribute IDs on component mount\n  useEffect(() => {\n    initializeAttributeIds();\n  }, []);\n  const sendToDeepSeek = async text => {\n    const prompt = `\nYou are an Attio CRM enrichment assistant. Extract structured updates from sales conversations and return ONLY a valid JSON array.\n\nCRITICAL RULES:\n1. Always create a person object when a name is mentioned\n2. Always create a task when there's an action item or follow-up mentioned\n3. Link tasks to people using \"link_to_person_name\" field\n4. Use ISO 8601 date format for all dates\n5. Extract emails, phone numbers, and other contact info\n6. Return ONLY the JSON array, no other text\n\nEXAMPLE INPUT: \"just had a talk with John Smith and he is really interested. he wants to meet next week to discuss the proposal\"\nEXAMPLE OUTPUT:\n[\n  {\n    \"type\": \"person\",\n    \"name\": \"John Smith\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"notes\": \"Really interested in our proposal\"\n  },\n  {\n    \"type\": \"task\",\n    \"name\": \"Meet with John Smith to discuss proposal\",\n    \"description\": \"Follow up meeting with John Smith to discuss the proposal\",\n    \"due_date\": \"2025-08-06T15:00:00Z\",\n    \"link_to_person_name\": \"John Smith\"\n  }\n]\n\nTRANSCRIPT TO PROCESS:\n\"\"\"\n${text}\n\"\"\"\n\nReturn only the JSON array:`;\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer 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',\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'http://localhost:3000',\n          'X-Title': 'Attio CRM Parser'\n        },\n        body: JSON.stringify({\n          model: 'deepseek/deepseek-r1:free',\n          messages: [{\n            role: 'system',\n            content: 'You are a CRM data extraction assistant. Return only valid JSON arrays with person and task objects. Always link tasks to people when mentioned together.'\n          }, {\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.1 // Lower temperature for more consistent parsing\n        })\n      });\n      const data = await response.json();\n      const raw = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n      if (!raw) {\n        console.warn('❌ No response from DeepSeek');\n        return [];\n      }\n      console.log('🤖 Raw DeepSeek response:', raw);\n\n      // Clean the response - remove markdown and extra text\n      let cleaned = raw.replace(/```json|```/g, '').trim();\n\n      // Find JSON array in the response\n      const jsonMatch = cleaned.match(/\\[[\\s\\S]*\\]/);\n      if (jsonMatch) {\n        cleaned = jsonMatch[0];\n      }\n      console.log('🧹 Cleaned response:', cleaned);\n      const parsed = JSON.parse(cleaned);\n      if (!Array.isArray(parsed)) {\n        console.warn('❌ Response is not an array');\n        return [];\n      }\n\n      // Enhance parsed data with defaults and validation\n      parsed.forEach(item => {\n        if (item.type === 'task') {\n          // Ensure task has required fields\n          item.name = item.name || item.description || 'Follow-up task';\n          item.description = item.description || item.name || 'Follow-up task';\n          item.due_date = item.due_date || getDefaultDueDate();\n          item.linked_records = item.linked_records || [];\n          item.assignees = item.assignees || [];\n\n          // If no due date specified but mentions \"next week\", set it\n          if (!item.due_date && (item.description.toLowerCase().includes('next week') || item.name.toLowerCase().includes('next week'))) {\n            const nextWeek = new Date();\n            nextWeek.setDate(nextWeek.getDate() + 7);\n            item.due_date = nextWeek.toISOString();\n          }\n        }\n        if (item.type === 'person') {\n          item.notes = item.notes || '';\n\n          // Extract name parts if not provided\n          if (item.name && (!item.first_name || !item.last_name)) {\n            const [first, ...rest] = item.name.split(' ');\n            item.first_name = item.first_name || first || 'Unknown';\n            item.last_name = item.last_name || rest.join(' ') || '';\n          }\n        }\n      });\n      console.log('✅ Parsed and enhanced data:', parsed);\n      return parsed;\n    } catch (err) {\n      console.error('❌ Failed to parse DeepSeek response:', err);\n      return [];\n    }\n  };\n  const getDefaultDueDate = () => {\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    nextWeek.setHours(14, 0, 0, 0); // Default to 2 PM next week\n    return nextWeek.toISOString();\n  };\n  const updateLyricDisplay = text => {\n    const words = text.split(' ');\n    const wordsPerLine = 8;\n    if (words.length > wordsPerLine * 2) {\n      if (!isAnimating) {\n        setIsAnimating(true);\n        setPreviousLines([currentLines[0], currentLines[1]]);\n        const newLine1 = words.slice(-wordsPerLine * 2, -wordsPerLine).join(' ');\n        const newLine2 = words.slice(-wordsPerLine).join(' ');\n        setTimeout(() => {\n          setCurrentLines([newLine1, newLine2]);\n          setTimeout(() => {\n            setIsAnimating(false);\n            setTimeout(() => {\n              setPreviousLines(['', '']);\n            }, 500);\n          }, 100);\n        }, 50);\n        currentTextRef.current = newLine1 + ' ' + newLine2 + ' ';\n      }\n    } else {\n      const line1 = words.slice(0, wordsPerLine).join(' ');\n      const line2 = words.slice(wordsPerLine).join(' ');\n      setCurrentLines([line1, line2]);\n    }\n  };\n  const toggleRecording = async () => {\n    if (!isRecording) {\n      try {\n        await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        recognitionRef.current.start();\n        setIsRecording(true);\n        setCurrentLines(['', '']);\n        setPreviousLines(['', '']);\n        currentTextRef.current = '';\n        fullTranscriptRef.current = '';\n        triggeredRef.current = false;\n        crmCaptureRef.current = '';\n      } catch (error) {\n        alert('Microphone access denied.');\n      }\n    } else {\n      setIsRecording(false);\n      if (recognitionRef.current) {\n        recognitionRef.current.onend = null;\n        recognitionRef.current.stop();\n      }\n      const finalText = crmCaptureRef.current.trim();\n      if (finalText.length > 5) {\n        console.log('🔁 Sending CRM content to DeepSeek:', finalText);\n        try {\n          const updates = await sendToDeepSeek(finalText);\n          console.log('📤 Parsed updates:', updates);\n          if (updates.length > 0) {\n            await sendToAttio(updates);\n            console.log('✅ Successfully sent to Attio');\n          } else {\n            console.log('ℹ️ No valid updates extracted');\n          }\n        } catch (error) {\n          console.error('❌ Error processing CRM data:', error);\n        }\n      } else {\n        console.log('ℹ️ No CRM content captured.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      alert('Speech recognition not supported.');\n      return;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.lang = 'en-US';\n    recognitionRef.current.onresult = event => {\n      let interim = '',\n        final = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript + ' ';\n        } else {\n          interim += transcript;\n        }\n      }\n      const fullText = currentTextRef.current + final + interim;\n      updateLyricDisplay(fullText);\n      if (final) {\n        currentTextRef.current += final;\n        fullTranscriptRef.current += final + ' ';\n        const clean = final.toLowerCase().trim();\n        if (!triggeredRef.current && clean.includes(triggerPhrase.toLowerCase())) {\n          console.log(\"✅ Trigger phrase detected\");\n          triggeredRef.current = true;\n          crmCaptureRef.current = '';\n        } else if (triggeredRef.current) {\n          crmCaptureRef.current += final + ' ';\n        }\n      }\n    };\n    recognitionRef.current.onerror = e => console.error('Speech error:', e.error);\n    recognitionRef.current.onend = () => {\n      if (isRecording) recognitionRef.current.start();\n    };\n    return () => {\n      var _recognitionRef$curre;\n      return (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    };\n  }, [isRecording]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lyric-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `previous-lines ${isAnimating ? 'animating' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: previousLines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: previousLines[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: currentLines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: currentLines[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gradient-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleRecording,\n      className: `mic-button ${isRecording ? 'recording' : 'idle'}`,\n      children: [isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-ring pulse-ping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-ring pulse-beat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mic-icon\",\n        children: isRecording ? /*#__PURE__*/_jsxDEV(MicOff, {\n          size: 32\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 50\n        }, this) : /*#__PURE__*/_jsxDEV(Mic, {\n          size: 32\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 73\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-text\",\n      children: isRecording ? 'Recording... say \"initiate CRM\" to start logging' : 'Click to start recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechRecorder, \"fvp2NPag9k5E0F6G7dnYykZKHLI=\");\n_c = SpeechRecorder;\nexport default SpeechRecorder;\nvar _c;\n$RefreshReg$(_c, \"SpeechRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Mic","MicOff","sendToAttio","initializeAttributeIds","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeechRecorder","_s","isRecording","setIsRecording","currentLines","setCurrentLines","previousLines","setPreviousLines","isAnimating","setIsAnimating","recognitionRef","currentTextRef","fullTranscriptRef","triggeredRef","crmCaptureRef","triggerPhrase","sendToDeepSeek","text","prompt","_data$choices","_data$choices$","_data$choices$$messag","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","data","json","raw","choices","message","console","warn","log","cleaned","replace","trim","jsonMatch","match","parsed","parse","Array","isArray","forEach","item","type","name","description","due_date","getDefaultDueDate","linked_records","assignees","toLowerCase","includes","nextWeek","Date","setDate","getDate","toISOString","notes","first_name","last_name","first","rest","split","join","err","error","setHours","updateLyricDisplay","words","wordsPerLine","length","newLine1","slice","newLine2","setTimeout","current","line1","line2","toggleRecording","navigator","mediaDevices","getUserMedia","audio","start","alert","onend","stop","finalText","updates","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interim","final","i","resultIndex","results","transcript","isFinal","fullText","clean","onerror","e","_recognitionRef$curre","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","_c","$RefreshReg$"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport './speech-recorder.css';\nimport { sendToAttio, initializeAttributeIds } from './attio'; // Updated Attio integration\n\nconst SpeechRecorder = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentLines, setCurrentLines] = useState(['', '']);\n  const [previousLines, setPreviousLines] = useState(['', '']);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const recognitionRef = useRef(null);\n  const currentTextRef = useRef('');\n  const fullTranscriptRef = useRef('');\n  const triggeredRef = useRef(false);\n  const crmCaptureRef = useRef('');\n\n  const triggerPhrase = \"initiate CRM\";\n\n  // Initialize attribute IDs on component mount\n  useEffect(() => {\n    initializeAttributeIds();\n  }, []);\n\n  const sendToDeepSeek = async (text) => {\n    const prompt = `\nYou are an Attio CRM enrichment assistant. Extract structured updates from sales conversations and return ONLY a valid JSON array.\n\nCRITICAL RULES:\n1. Always create a person object when a name is mentioned\n2. Always create a task when there's an action item or follow-up mentioned\n3. Link tasks to people using \"link_to_person_name\" field\n4. Use ISO 8601 date format for all dates\n5. Extract emails, phone numbers, and other contact info\n6. Return ONLY the JSON array, no other text\n\nEXAMPLE INPUT: \"just had a talk with John Smith and he is really interested. he wants to meet next week to discuss the proposal\"\nEXAMPLE OUTPUT:\n[\n  {\n    \"type\": \"person\",\n    \"name\": \"John Smith\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"notes\": \"Really interested in our proposal\"\n  },\n  {\n    \"type\": \"task\",\n    \"name\": \"Meet with John Smith to discuss proposal\",\n    \"description\": \"Follow up meeting with John Smith to discuss the proposal\",\n    \"due_date\": \"2025-08-06T15:00:00Z\",\n    \"link_to_person_name\": \"John Smith\"\n  }\n]\n\nTRANSCRIPT TO PROCESS:\n\"\"\"\n${text}\n\"\"\"\n\nReturn only the JSON array:`;\n\n    try {\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer 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',\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'http://localhost:3000',\n          'X-Title': 'Attio CRM Parser'\n        },\n        body: JSON.stringify({\n          model: 'deepseek/deepseek-r1:free',\n          messages: [\n            {\n              role: 'system',\n              content: 'You are a CRM data extraction assistant. Return only valid JSON arrays with person and task objects. Always link tasks to people when mentioned together.'\n            },\n            {\n              role: 'user',\n              content: prompt\n            }\n          ],\n          temperature: 0.1 // Lower temperature for more consistent parsing\n        })\n      });\n\n      const data = await response.json();\n      const raw = data.choices?.[0]?.message?.content;\n      if (!raw) {\n        console.warn('❌ No response from DeepSeek');\n        return [];\n      }\n\n      console.log('🤖 Raw DeepSeek response:', raw);\n\n      // Clean the response - remove markdown and extra text\n      let cleaned = raw.replace(/```json|```/g, '').trim();\n      \n      // Find JSON array in the response\n      const jsonMatch = cleaned.match(/\\[[\\s\\S]*\\]/);\n      if (jsonMatch) {\n        cleaned = jsonMatch[0];\n      }\n\n      console.log('🧹 Cleaned response:', cleaned);\n\n      const parsed = JSON.parse(cleaned);\n\n      if (!Array.isArray(parsed)) {\n        console.warn('❌ Response is not an array');\n        return [];\n      }\n\n      // Enhance parsed data with defaults and validation\n      parsed.forEach(item => {\n        if (item.type === 'task') {\n          // Ensure task has required fields\n          item.name = item.name || item.description || 'Follow-up task';\n          item.description = item.description || item.name || 'Follow-up task';\n          item.due_date = item.due_date || getDefaultDueDate();\n          item.linked_records = item.linked_records || [];\n          item.assignees = item.assignees || [];\n          \n          // If no due date specified but mentions \"next week\", set it\n          if (!item.due_date && (item.description.toLowerCase().includes('next week') || item.name.toLowerCase().includes('next week'))) {\n            const nextWeek = new Date();\n            nextWeek.setDate(nextWeek.getDate() + 7);\n            item.due_date = nextWeek.toISOString();\n          }\n        }\n        \n        if (item.type === 'person') {\n          item.notes = item.notes || '';\n          \n          // Extract name parts if not provided\n          if (item.name && (!item.first_name || !item.last_name)) {\n            const [first, ...rest] = item.name.split(' ');\n            item.first_name = item.first_name || first || 'Unknown';\n            item.last_name = item.last_name || rest.join(' ') || '';\n          }\n        }\n      });\n\n      console.log('✅ Parsed and enhanced data:', parsed);\n      return parsed;\n\n    } catch (err) {\n      console.error('❌ Failed to parse DeepSeek response:', err);\n      return [];\n    }\n  };\n\n  const getDefaultDueDate = () => {\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    nextWeek.setHours(14, 0, 0, 0); // Default to 2 PM next week\n    return nextWeek.toISOString();\n  };\n\n  const updateLyricDisplay = (text) => {\n    const words = text.split(' ');\n    const wordsPerLine = 8;\n    if (words.length > wordsPerLine * 2) {\n      if (!isAnimating) {\n        setIsAnimating(true);\n        setPreviousLines([currentLines[0], currentLines[1]]);\n        const newLine1 = words.slice(-wordsPerLine * 2, -wordsPerLine).join(' ');\n        const newLine2 = words.slice(-wordsPerLine).join(' ');\n        setTimeout(() => {\n          setCurrentLines([newLine1, newLine2]);\n          setTimeout(() => {\n            setIsAnimating(false);\n            setTimeout(() => {\n              setPreviousLines(['', '']);\n            }, 500);\n          }, 100);\n        }, 50);\n        currentTextRef.current = newLine1 + ' ' + newLine2 + ' ';\n      }\n    } else {\n      const line1 = words.slice(0, wordsPerLine).join(' ');\n      const line2 = words.slice(wordsPerLine).join(' ');\n      setCurrentLines([line1, line2]);\n    }\n  };\n\n  const toggleRecording = async () => {\n    if (!isRecording) {\n      try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        recognitionRef.current.start();\n        setIsRecording(true);\n        setCurrentLines(['', '']);\n        setPreviousLines(['', '']);\n        currentTextRef.current = '';\n        fullTranscriptRef.current = '';\n        triggeredRef.current = false;\n        crmCaptureRef.current = '';\n      } catch (error) {\n        alert('Microphone access denied.');\n      }\n    } else {\n      setIsRecording(false);\n      if (recognitionRef.current) {\n        recognitionRef.current.onend = null;\n        recognitionRef.current.stop();\n      }\n\n      const finalText = crmCaptureRef.current.trim();\n      if (finalText.length > 5) {\n        console.log('🔁 Sending CRM content to DeepSeek:', finalText);\n        try {\n          const updates = await sendToDeepSeek(finalText);\n          console.log('📤 Parsed updates:', updates);\n          \n          if (updates.length > 0) {\n            await sendToAttio(updates);\n            console.log('✅ Successfully sent to Attio');\n          } else {\n            console.log('ℹ️ No valid updates extracted');\n          }\n        } catch (error) {\n          console.error('❌ Error processing CRM data:', error);\n        }\n      } else {\n        console.log('ℹ️ No CRM content captured.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      alert('Speech recognition not supported.');\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.lang = 'en-US';\n\n    recognitionRef.current.onresult = (event) => {\n      let interim = '', final = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript + ' ';\n        } else {\n          interim += transcript;\n        }\n      }\n\n      const fullText = currentTextRef.current + final + interim;\n      updateLyricDisplay(fullText);\n\n      if (final) {\n        currentTextRef.current += final;\n        fullTranscriptRef.current += final + ' ';\n\n        const clean = final.toLowerCase().trim();\n        if (!triggeredRef.current && clean.includes(triggerPhrase.toLowerCase())) {\n          console.log(\"✅ Trigger phrase detected\");\n          triggeredRef.current = true;\n          crmCaptureRef.current = '';\n        }\n        else if (triggeredRef.current) {\n          crmCaptureRef.current += final + ' ';\n        }\n      }\n    };\n\n    recognitionRef.current.onerror = (e) => console.error('Speech error:', e.error);\n    recognitionRef.current.onend = () => {\n      if (isRecording) recognitionRef.current.start();\n    };\n\n    return () => recognitionRef.current?.stop();\n  }, [isRecording]);\n\n  return (\n    <div className=\"speech-recorder\">\n      <div className=\"lyric-display\">\n        <div className={`previous-lines ${isAnimating ? 'animating' : ''}`}>\n          <div className=\"lyric-line\">{previousLines[0]}</div>\n          <div className=\"lyric-line\">{previousLines[1]}</div>\n        </div>\n        <div className=\"current-lines\">\n          <div className=\"lyric-line\">{currentLines[0]}</div>\n          <div className=\"lyric-line\">{currentLines[1]}</div>\n        </div>\n        <div className=\"gradient-overlay\" />\n      </div>\n      <button onClick={toggleRecording} className={`mic-button ${isRecording ? 'recording' : 'idle'}`}>\n        {isRecording && <>\n          <div className=\"pulse-ring pulse-ping\"></div>\n          <div className=\"pulse-ring pulse-beat\"></div>\n        </>}\n        <div className=\"mic-icon\">{isRecording ? <MicOff size={32} /> : <Mic size={32} />}</div>\n      </button>\n      <div className=\"status-text\">\n        {isRecording ? 'Recording... say \"initiate CRM\" to start logging' : 'Click to start recording'}\n      </div>\n    </div>\n  );\n};\n\nexport default SpeechRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}