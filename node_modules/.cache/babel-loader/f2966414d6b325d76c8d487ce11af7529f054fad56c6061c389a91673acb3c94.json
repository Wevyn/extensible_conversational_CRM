{"ast":null,"code":"var _jsxFileName = \"/Users/Aditya/ConversationalAI_CRM_Attio/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport './speech-recorder.css';\nimport { sendToAttio } from './attio'; // Updated Attio integration\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpeechRecorder = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentLines, setCurrentLines] = useState(['', '']);\n  const [previousLines, setPreviousLines] = useState(['', '']);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const recognitionRef = useRef(null);\n  const currentTextRef = useRef('');\n  const fullTranscriptRef = useRef('');\n  const triggeredRef = useRef(false);\n  const crmCaptureRef = useRef('');\n  const triggerPhrase = \"initiate CRM\";\n  const sendToDeepSeek = async text => {\n    const prompt = `\nYou are a Attio CRM enrichment assistant. Your job is to extract structured updates from sales conversations.\n\nReturn a **strictly valid** JSON array. Use only double quotes (\"\") around keys and string values.\nEach object must include a \"type\" field (\"person\", \"task\", etc).\nEnsure all date/time values are ISO 8601 strings (e.g. \"2025-08-06T15:00:00Z\").\nTranscript:\n\"\"\"\n${text}\n\"\"\"\n`;\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer 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',\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'http://localhost:3000',\n          'X-Title': 'Attio CRM Parser'\n        },\n        body: JSON.stringify({\n          model: 'deepseek/deepseek-r1:free',\n          messages: [{\n            role: 'system',\n            content: 'You are a helpful assistant that extracts structured CRM updates from transcripts.'\n          }, {\n            role: 'user',\n            content: prompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const raw = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n      if (!raw) return [];\n      const cleaned = raw.replace(/```json|```/g, '').trim();\n      const parsed = JSON.parse(cleaned);\n\n      // Fallbacks to prevent errors\n      parsed.forEach(item => {\n        if (item.type === 'task') {\n          item.linked_records = item.linked_records || [];\n          item.assignees = item.assignees || [];\n          item.description = item.description || item.name || '';\n          item.due_date = item.due_date || new Date().toISOString();\n        }\n        if (item.type === 'person') {\n          item.notes = item.notes || '';\n        }\n        if (item.type === 'task' && !item.link_to_person_name && parsed.some(p => p.type === 'person')) {\n          var _parsed$find;\n          item.link_to_person_name = (_parsed$find = parsed.find(p => p.type === 'person')) === null || _parsed$find === void 0 ? void 0 : _parsed$find.name;\n        }\n      });\n      return parsed;\n    } catch (err) {\n      console.warn('❌ Failed to parse DeepSeek response:', err);\n      return [];\n    }\n  };\n  const updateLyricDisplay = text => {\n    const words = text.split(' ');\n    const wordsPerLine = 8;\n    if (words.length > wordsPerLine * 2) {\n      if (!isAnimating) {\n        setIsAnimating(true);\n        setPreviousLines([currentLines[0], currentLines[1]]);\n        const newLine1 = words.slice(-wordsPerLine * 2, -wordsPerLine).join(' ');\n        const newLine2 = words.slice(-wordsPerLine).join(' ');\n        setTimeout(() => {\n          setCurrentLines([newLine1, newLine2]);\n          setTimeout(() => {\n            setIsAnimating(false);\n            setTimeout(() => {\n              setPreviousLines(['', '']);\n            }, 500);\n          }, 100);\n        }, 50);\n        currentTextRef.current = newLine1 + ' ' + newLine2 + ' ';\n      }\n    } else {\n      const line1 = words.slice(0, wordsPerLine).join(' ');\n      const line2 = words.slice(wordsPerLine).join(' ');\n      setCurrentLines([line1, line2]);\n    }\n  };\n  const toggleRecording = async () => {\n    if (!isRecording) {\n      try {\n        await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        recognitionRef.current.start();\n        setIsRecording(true);\n        setCurrentLines(['', '']);\n        setPreviousLines(['', '']);\n        currentTextRef.current = '';\n        fullTranscriptRef.current = '';\n        triggeredRef.current = false;\n        crmCaptureRef.current = '';\n      } catch (error) {\n        alert('Microphone access denied.');\n      }\n    } else {\n      setIsRecording(false);\n      if (recognitionRef.current) {\n        recognitionRef.current.onend = null;\n        recognitionRef.current.stop();\n      }\n      const finalText = crmCaptureRef.current.trim();\n      if (finalText.length > 5) {\n        console.log('🔁 Sending CRM content to DeepSeek:', finalText);\n        const updates = await sendToDeepSeek(finalText);\n        console.log('📤 Parsed updates:', updates);\n        await sendToAttio(updates);\n      } else {\n        console.log('ℹ️ No CRM content captured.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      alert('Speech recognition not supported.');\n      return;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.lang = 'en-US';\n    recognitionRef.current.onresult = event => {\n      let interim = '',\n        final = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript + ' ';\n        } else {\n          interim += transcript;\n        }\n      }\n      const fullText = currentTextRef.current + final + interim;\n      updateLyricDisplay(fullText);\n      if (final) {\n        currentTextRef.current += final;\n        fullTranscriptRef.current += final + ' ';\n        const clean = final.toLowerCase().trim();\n        if (!triggeredRef.current && clean.includes(triggerPhrase.toLowerCase())) {\n          console.log(\"✅ Trigger phrase detected\");\n          triggeredRef.current = true;\n          crmCaptureRef.current = '';\n        } else if (triggeredRef.current) {\n          crmCaptureRef.current += final + ' ';\n        }\n      }\n    };\n    recognitionRef.current.onerror = e => console.error('Speech error:', e.error);\n    recognitionRef.current.onend = () => {\n      if (isRecording) recognitionRef.current.start();\n    };\n    return () => {\n      var _recognitionRef$curre;\n      return (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    };\n  }, [isRecording]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lyric-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `previous-lines ${isAnimating ? 'animating' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: previousLines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: previousLines[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-lines\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: currentLines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lyric-line\",\n          children: currentLines[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gradient-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleRecording,\n      className: `mic-button ${isRecording ? 'recording' : 'idle'}`,\n      children: [isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-ring pulse-ping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse-ring pulse-beat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mic-icon\",\n        children: isRecording ? /*#__PURE__*/_jsxDEV(MicOff, {\n          size: 32\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 50\n        }, this) : /*#__PURE__*/_jsxDEV(Mic, {\n          size: 32\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 73\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-text\",\n      children: isRecording ? 'Recording... say \"initiate CRM\" to start logging' : 'Click to start recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechRecorder, \"hUNEAFJtfBE14rfFyjh0d+MSI5s=\");\n_c = SpeechRecorder;\nexport default SpeechRecorder;\nvar _c;\n$RefreshReg$(_c, \"SpeechRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Mic","MicOff","sendToAttio","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeechRecorder","_s","isRecording","setIsRecording","currentLines","setCurrentLines","previousLines","setPreviousLines","isAnimating","setIsAnimating","recognitionRef","currentTextRef","fullTranscriptRef","triggeredRef","crmCaptureRef","triggerPhrase","sendToDeepSeek","text","prompt","_data$choices","_data$choices$","_data$choices$$messag","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","raw","choices","message","cleaned","replace","trim","parsed","parse","forEach","item","type","linked_records","assignees","description","name","due_date","Date","toISOString","notes","link_to_person_name","some","p","_parsed$find","find","err","console","warn","updateLyricDisplay","words","split","wordsPerLine","length","newLine1","slice","join","newLine2","setTimeout","current","line1","line2","toggleRecording","navigator","mediaDevices","getUserMedia","audio","start","error","alert","onend","stop","finalText","log","updates","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interim","final","i","resultIndex","results","transcript","isFinal","fullText","clean","toLowerCase","includes","onerror","e","_recognitionRef$curre","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","_c","$RefreshReg$"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Mic, MicOff } from 'lucide-react';\nimport './speech-recorder.css';\nimport { sendToAttio } from './attio'; // Updated Attio integration\n\nconst SpeechRecorder = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentLines, setCurrentLines] = useState(['', '']);\n  const [previousLines, setPreviousLines] = useState(['', '']);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const recognitionRef = useRef(null);\n  const currentTextRef = useRef('');\n  const fullTranscriptRef = useRef('');\n  const triggeredRef = useRef(false);\n  const crmCaptureRef = useRef('');\n\n  const triggerPhrase = \"initiate CRM\";\n\n  const sendToDeepSeek = async (text) => {\n    const prompt = `\nYou are a Attio CRM enrichment assistant. Your job is to extract structured updates from sales conversations.\n\nReturn a **strictly valid** JSON array. Use only double quotes (\"\") around keys and string values.\nEach object must include a \"type\" field (\"person\", \"task\", etc).\nEnsure all date/time values are ISO 8601 strings (e.g. \"2025-08-06T15:00:00Z\").\nTranscript:\n\"\"\"\n${text}\n\"\"\"\n`;\n\n    try {\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer 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',\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'http://localhost:3000',\n          'X-Title': 'Attio CRM Parser'\n        },\n        body: JSON.stringify({\n          model: 'deepseek/deepseek-r1:free',\n          messages: [\n            {\n              role: 'system',\n              content: 'You are a helpful assistant that extracts structured CRM updates from transcripts.'\n            },\n            {\n              role: 'user',\n              content: prompt\n            }\n          ]\n        })\n      });\n\n      const data = await response.json();\n      const raw = data.choices?.[0]?.message?.content;\n      if (!raw) return [];\n\n      const cleaned = raw.replace(/```json|```/g, '').trim();\n      const parsed = JSON.parse(cleaned);\n\n      // Fallbacks to prevent errors\n      parsed.forEach(item => {\n        if (item.type === 'task') {\n          item.linked_records = item.linked_records || [];\n          item.assignees = item.assignees || [];\n          item.description = item.description || item.name || '';\n          item.due_date = item.due_date || new Date().toISOString();\n        }\n        if (item.type === 'person') {\n          item.notes = item.notes || '';\n        }\n        if (item.type === 'task' && !item.link_to_person_name && parsed.some(p => p.type === 'person')) {\n          item.link_to_person_name = parsed.find(p => p.type === 'person')?.name;\n        }\n\n      });\n\n      return parsed;\n\n    } catch (err) {\n      console.warn('❌ Failed to parse DeepSeek response:', err);\n      return [];\n    }\n  };\n\n  const updateLyricDisplay = (text) => {\n    const words = text.split(' ');\n    const wordsPerLine = 8;\n    if (words.length > wordsPerLine * 2) {\n      if (!isAnimating) {\n        setIsAnimating(true);\n        setPreviousLines([currentLines[0], currentLines[1]]);\n        const newLine1 = words.slice(-wordsPerLine * 2, -wordsPerLine).join(' ');\n        const newLine2 = words.slice(-wordsPerLine).join(' ');\n        setTimeout(() => {\n          setCurrentLines([newLine1, newLine2]);\n          setTimeout(() => {\n            setIsAnimating(false);\n            setTimeout(() => {\n              setPreviousLines(['', '']);\n            }, 500);\n          }, 100);\n        }, 50);\n        currentTextRef.current = newLine1 + ' ' + newLine2 + ' ';\n      }\n    } else {\n      const line1 = words.slice(0, wordsPerLine).join(' ');\n      const line2 = words.slice(wordsPerLine).join(' ');\n      setCurrentLines([line1, line2]);\n    }\n  };\n\n  const toggleRecording = async () => {\n    if (!isRecording) {\n      try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        recognitionRef.current.start();\n        setIsRecording(true);\n        setCurrentLines(['', '']);\n        setPreviousLines(['', '']);\n        currentTextRef.current = '';\n        fullTranscriptRef.current = '';\n        triggeredRef.current = false;\n        crmCaptureRef.current = '';\n      } catch (error) {\n        alert('Microphone access denied.');\n      }\n    } else {\n      setIsRecording(false);\n      if (recognitionRef.current) {\n        recognitionRef.current.onend = null;\n        recognitionRef.current.stop();\n      }\n\n      const finalText = crmCaptureRef.current.trim();\n      if (finalText.length > 5) {\n        console.log('🔁 Sending CRM content to DeepSeek:', finalText);\n        const updates = await sendToDeepSeek(finalText);\n        console.log('📤 Parsed updates:', updates);\n        await sendToAttio(updates);\n      } else {\n        console.log('ℹ️ No CRM content captured.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      alert('Speech recognition not supported.');\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    recognitionRef.current.continuous = true;\n    recognitionRef.current.interimResults = true;\n    recognitionRef.current.lang = 'en-US';\n\n    recognitionRef.current.onresult = (event) => {\n      let interim = '', final = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript + ' ';\n        } else {\n          interim += transcript;\n        }\n      }\n\n      const fullText = currentTextRef.current + final + interim;\n      updateLyricDisplay(fullText);\n\n      if (final) {\n        currentTextRef.current += final;\n        fullTranscriptRef.current += final + ' ';\n\n        const clean = final.toLowerCase().trim();\n        if (!triggeredRef.current && clean.includes(triggerPhrase.toLowerCase())) {\n          console.log(\"✅ Trigger phrase detected\");\n          triggeredRef.current = true;\n          crmCaptureRef.current = '';\n        }\n        else if (triggeredRef.current) {\n          crmCaptureRef.current += final + ' ';\n        }\n      }\n    };\n\n    recognitionRef.current.onerror = (e) => console.error('Speech error:', e.error);\n    recognitionRef.current.onend = () => {\n      if (isRecording) recognitionRef.current.start();\n    };\n\n    return () => recognitionRef.current?.stop();\n  }, [isRecording]);\n\n  return (\n    <div className=\"speech-recorder\">\n      <div className=\"lyric-display\">\n        <div className={`previous-lines ${isAnimating ? 'animating' : ''}`}>\n          <div className=\"lyric-line\">{previousLines[0]}</div>\n          <div className=\"lyric-line\">{previousLines[1]}</div>\n        </div>\n        <div className=\"current-lines\">\n          <div className=\"lyric-line\">{currentLines[0]}</div>\n          <div className=\"lyric-line\">{currentLines[1]}</div>\n        </div>\n        <div className=\"gradient-overlay\" />\n      </div>\n      <button onClick={toggleRecording} className={`mic-button ${isRecording ? 'recording' : 'idle'}`}>\n        {isRecording && <>\n          <div className=\"pulse-ring pulse-ping\"></div>\n          <div className=\"pulse-ring pulse-beat\"></div>\n        </>}\n        <div className=\"mic-icon\">{isRecording ? <MicOff size={32} /> : <Mic size={32} />}</div>\n      </button>\n      <div className=\"status-text\">\n        {isRecording ? 'Recording... say \"initiate CRM\" to start logging' : 'Click to start recording'}\n      </div>\n    </div>\n  );\n};\n\nexport default SpeechRecorder;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,GAAG,EAAEC,MAAM,QAAQ,cAAc;AAC1C,OAAO,uBAAuB;AAC9B,SAASC,WAAW,QAAQ,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EAC1D,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EAC5D,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMoB,cAAc,GAAGlB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMmB,cAAc,GAAGnB,MAAM,CAAC,EAAE,CAAC;EACjC,MAAMoB,iBAAiB,GAAGpB,MAAM,CAAC,EAAE,CAAC;EACpC,MAAMqB,YAAY,GAAGrB,MAAM,CAAC,KAAK,CAAC;EAClC,MAAMsB,aAAa,GAAGtB,MAAM,CAAC,EAAE,CAAC;EAEhC,MAAMuB,aAAa,GAAG,cAAc;EAEpC,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;IACrC,MAAMC,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAED,IAAI;AACN;AACA,CAAC;IAEG,IAAI;MAAA,IAAAE,aAAA,EAAAC,cAAA,EAAAC,qBAAA;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAE,kFAAkF;UACnG,cAAc,EAAE,kBAAkB;UAClC,cAAc,EAAE,uBAAuB;UACvC,SAAS,EAAE;QACb,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,2BAA2B;UAClCC,QAAQ,EAAE,CACR;YACEC,IAAI,EAAE,QAAQ;YACdC,OAAO,EAAE;UACX,CAAC,EACD;YACED,IAAI,EAAE,MAAM;YACZC,OAAO,EAAEd;UACX,CAAC;QAEL,CAAC;MACH,CAAC,CAAC;MAEF,MAAMe,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,MAAMC,GAAG,IAAAhB,aAAA,GAAGc,IAAI,CAACG,OAAO,cAAAjB,aAAA,wBAAAC,cAAA,GAAZD,aAAA,CAAe,CAAC,CAAC,cAAAC,cAAA,wBAAAC,qBAAA,GAAjBD,cAAA,CAAmBiB,OAAO,cAAAhB,qBAAA,uBAA1BA,qBAAA,CAA4BW,OAAO;MAC/C,IAAI,CAACG,GAAG,EAAE,OAAO,EAAE;MAEnB,MAAMG,OAAO,GAAGH,GAAG,CAACI,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;MACtD,MAAMC,MAAM,GAAGd,IAAI,CAACe,KAAK,CAACJ,OAAO,CAAC;;MAElC;MACAG,MAAM,CAACE,OAAO,CAACC,IAAI,IAAI;QACrB,IAAIA,IAAI,CAACC,IAAI,KAAK,MAAM,EAAE;UACxBD,IAAI,CAACE,cAAc,GAAGF,IAAI,CAACE,cAAc,IAAI,EAAE;UAC/CF,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACG,SAAS,IAAI,EAAE;UACrCH,IAAI,CAACI,WAAW,GAAGJ,IAAI,CAACI,WAAW,IAAIJ,IAAI,CAACK,IAAI,IAAI,EAAE;UACtDL,IAAI,CAACM,QAAQ,GAAGN,IAAI,CAACM,QAAQ,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC3D;QACA,IAAIR,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;UAC1BD,IAAI,CAACS,KAAK,GAAGT,IAAI,CAACS,KAAK,IAAI,EAAE;QAC/B;QACA,IAAIT,IAAI,CAACC,IAAI,KAAK,MAAM,IAAI,CAACD,IAAI,CAACU,mBAAmB,IAAIb,MAAM,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,IAAI,KAAK,QAAQ,CAAC,EAAE;UAAA,IAAAY,YAAA;UAC9Fb,IAAI,CAACU,mBAAmB,IAAAG,YAAA,GAAGhB,MAAM,CAACiB,IAAI,CAACF,CAAC,IAAIA,CAAC,CAACX,IAAI,KAAK,QAAQ,CAAC,cAAAY,YAAA,uBAArCA,YAAA,CAAuCR,IAAI;QACxE;MAEF,CAAC,CAAC;MAEF,OAAOR,MAAM;IAEf,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZC,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAEF,GAAG,CAAC;MACzD,OAAO,EAAE;IACX;EACF,CAAC;EAED,MAAMG,kBAAkB,GAAI7C,IAAI,IAAK;IACnC,MAAM8C,KAAK,GAAG9C,IAAI,CAAC+C,KAAK,CAAC,GAAG,CAAC;IAC7B,MAAMC,YAAY,GAAG,CAAC;IACtB,IAAIF,KAAK,CAACG,MAAM,GAAGD,YAAY,GAAG,CAAC,EAAE;MACnC,IAAI,CAACzD,WAAW,EAAE;QAChBC,cAAc,CAAC,IAAI,CAAC;QACpBF,gBAAgB,CAAC,CAACH,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM+D,QAAQ,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAACH,YAAY,GAAG,CAAC,EAAE,CAACA,YAAY,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;QACxE,MAAMC,QAAQ,GAAGP,KAAK,CAACK,KAAK,CAAC,CAACH,YAAY,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;QACrDE,UAAU,CAAC,MAAM;UACflE,eAAe,CAAC,CAAC8D,QAAQ,EAAEG,QAAQ,CAAC,CAAC;UACrCC,UAAU,CAAC,MAAM;YACf9D,cAAc,CAAC,KAAK,CAAC;YACrB8D,UAAU,CAAC,MAAM;cACfhE,gBAAgB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC5B,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,EAAE,EAAE,CAAC;QACNI,cAAc,CAAC6D,OAAO,GAAGL,QAAQ,GAAG,GAAG,GAAGG,QAAQ,GAAG,GAAG;MAC1D;IACF,CAAC,MAAM;MACL,MAAMG,KAAK,GAAGV,KAAK,CAACK,KAAK,CAAC,CAAC,EAAEH,YAAY,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;MACpD,MAAMK,KAAK,GAAGX,KAAK,CAACK,KAAK,CAACH,YAAY,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;MACjDhE,eAAe,CAAC,CAACoE,KAAK,EAAEC,KAAK,CAAC,CAAC;IACjC;EACF,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAACzE,WAAW,EAAE;MAChB,IAAI;QACF,MAAM0E,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QAC1DrE,cAAc,CAAC8D,OAAO,CAACQ,KAAK,CAAC,CAAC;QAC9B7E,cAAc,CAAC,IAAI,CAAC;QACpBE,eAAe,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACzBE,gBAAgB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1BI,cAAc,CAAC6D,OAAO,GAAG,EAAE;QAC3B5D,iBAAiB,CAAC4D,OAAO,GAAG,EAAE;QAC9B3D,YAAY,CAAC2D,OAAO,GAAG,KAAK;QAC5B1D,aAAa,CAAC0D,OAAO,GAAG,EAAE;MAC5B,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,KAAK,CAAC,2BAA2B,CAAC;MACpC;IACF,CAAC,MAAM;MACL/E,cAAc,CAAC,KAAK,CAAC;MACrB,IAAIO,cAAc,CAAC8D,OAAO,EAAE;QAC1B9D,cAAc,CAAC8D,OAAO,CAACW,KAAK,GAAG,IAAI;QACnCzE,cAAc,CAAC8D,OAAO,CAACY,IAAI,CAAC,CAAC;MAC/B;MAEA,MAAMC,SAAS,GAAGvE,aAAa,CAAC0D,OAAO,CAAChC,IAAI,CAAC,CAAC;MAC9C,IAAI6C,SAAS,CAACnB,MAAM,GAAG,CAAC,EAAE;QACxBN,OAAO,CAAC0B,GAAG,CAAC,qCAAqC,EAAED,SAAS,CAAC;QAC7D,MAAME,OAAO,GAAG,MAAMvE,cAAc,CAACqE,SAAS,CAAC;QAC/CzB,OAAO,CAAC0B,GAAG,CAAC,oBAAoB,EAAEC,OAAO,CAAC;QAC1C,MAAM5F,WAAW,CAAC4F,OAAO,CAAC;MAC5B,CAAC,MAAM;QACL3B,OAAO,CAAC0B,GAAG,CAAC,6BAA6B,CAAC;MAC5C;IACF;EACF,CAAC;EAED/F,SAAS,CAAC,MAAM;IACd,IAAI,EAAE,yBAAyB,IAAIiG,MAAM,CAAC,IAAI,EAAE,mBAAmB,IAAIA,MAAM,CAAC,EAAE;MAC9EN,KAAK,CAAC,mCAAmC,CAAC;MAC1C;IACF;IAEA,MAAMO,iBAAiB,GAAGD,MAAM,CAACC,iBAAiB,IAAID,MAAM,CAACE,uBAAuB;IACpFhF,cAAc,CAAC8D,OAAO,GAAG,IAAIiB,iBAAiB,CAAC,CAAC;IAChD/E,cAAc,CAAC8D,OAAO,CAACmB,UAAU,GAAG,IAAI;IACxCjF,cAAc,CAAC8D,OAAO,CAACoB,cAAc,GAAG,IAAI;IAC5ClF,cAAc,CAAC8D,OAAO,CAACqB,IAAI,GAAG,OAAO;IAErCnF,cAAc,CAAC8D,OAAO,CAACsB,QAAQ,GAAIC,KAAK,IAAK;MAC3C,IAAIC,OAAO,GAAG,EAAE;QAAEC,KAAK,GAAG,EAAE;MAC5B,KAAK,IAAIC,CAAC,GAAGH,KAAK,CAACI,WAAW,EAAED,CAAC,GAAGH,KAAK,CAACK,OAAO,CAAClC,MAAM,EAAEgC,CAAC,EAAE,EAAE;QAC7D,MAAMG,UAAU,GAAGN,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACG,UAAU;QACjD,IAAIN,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAACI,OAAO,EAAE;UAC5BL,KAAK,IAAII,UAAU,GAAG,GAAG;QAC3B,CAAC,MAAM;UACLL,OAAO,IAAIK,UAAU;QACvB;MACF;MAEA,MAAME,QAAQ,GAAG5F,cAAc,CAAC6D,OAAO,GAAGyB,KAAK,GAAGD,OAAO;MACzDlC,kBAAkB,CAACyC,QAAQ,CAAC;MAE5B,IAAIN,KAAK,EAAE;QACTtF,cAAc,CAAC6D,OAAO,IAAIyB,KAAK;QAC/BrF,iBAAiB,CAAC4D,OAAO,IAAIyB,KAAK,GAAG,GAAG;QAExC,MAAMO,KAAK,GAAGP,KAAK,CAACQ,WAAW,CAAC,CAAC,CAACjE,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC3B,YAAY,CAAC2D,OAAO,IAAIgC,KAAK,CAACE,QAAQ,CAAC3F,aAAa,CAAC0F,WAAW,CAAC,CAAC,CAAC,EAAE;UACxE7C,OAAO,CAAC0B,GAAG,CAAC,2BAA2B,CAAC;UACxCzE,YAAY,CAAC2D,OAAO,GAAG,IAAI;UAC3B1D,aAAa,CAAC0D,OAAO,GAAG,EAAE;QAC5B,CAAC,MACI,IAAI3D,YAAY,CAAC2D,OAAO,EAAE;UAC7B1D,aAAa,CAAC0D,OAAO,IAAIyB,KAAK,GAAG,GAAG;QACtC;MACF;IACF,CAAC;IAEDvF,cAAc,CAAC8D,OAAO,CAACmC,OAAO,GAAIC,CAAC,IAAKhD,OAAO,CAACqB,KAAK,CAAC,eAAe,EAAE2B,CAAC,CAAC3B,KAAK,CAAC;IAC/EvE,cAAc,CAAC8D,OAAO,CAACW,KAAK,GAAG,MAAM;MACnC,IAAIjF,WAAW,EAAEQ,cAAc,CAAC8D,OAAO,CAACQ,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,OAAO;MAAA,IAAA6B,qBAAA;MAAA,QAAAA,qBAAA,GAAMnG,cAAc,CAAC8D,OAAO,cAAAqC,qBAAA,uBAAtBA,qBAAA,CAAwBzB,IAAI,CAAC,CAAC;IAAA;EAC7C,CAAC,EAAE,CAAClF,WAAW,CAAC,CAAC;EAEjB,oBACEL,OAAA;IAAKiH,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BlH,OAAA;MAAKiH,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BlH,OAAA;QAAKiH,SAAS,EAAE,kBAAkBtG,WAAW,GAAG,WAAW,GAAG,EAAE,EAAG;QAAAuG,QAAA,gBACjElH,OAAA;UAAKiH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAEzG,aAAa,CAAC,CAAC;QAAC;UAAA0G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpDtH,OAAA;UAAKiH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAEzG,aAAa,CAAC,CAAC;QAAC;UAAA0G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACNtH,OAAA;QAAKiH,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BlH,OAAA;UAAKiH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAE3G,YAAY,CAAC,CAAC;QAAC;UAAA4G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACnDtH,OAAA;UAAKiH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAE3G,YAAY,CAAC,CAAC;QAAC;UAAA4G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eACNtH,OAAA;QAAKiH,SAAS,EAAC;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACNtH,OAAA;MAAQuH,OAAO,EAAEzC,eAAgB;MAACmC,SAAS,EAAE,cAAc5G,WAAW,GAAG,WAAW,GAAG,MAAM,EAAG;MAAA6G,QAAA,GAC7F7G,WAAW,iBAAIL,OAAA,CAAAE,SAAA;QAAAgH,QAAA,gBACdlH,OAAA;UAAKiH,SAAS,EAAC;QAAuB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7CtH,OAAA;UAAKiH,SAAS,EAAC;QAAuB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,eAC7C,CAAC,eACHtH,OAAA;QAAKiH,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAE7G,WAAW,gBAAGL,OAAA,CAACH,MAAM;UAAC2H,IAAI,EAAE;QAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGtH,OAAA,CAACJ,GAAG;UAAC4H,IAAI,EAAE;QAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClF,CAAC,eACTtH,OAAA;MAAKiH,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzB7G,WAAW,GAAG,kDAAkD,GAAG;IAA0B;MAAA8G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3F,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClH,EAAA,CA1NID,cAAc;AAAAsH,EAAA,GAAdtH,cAAc;AA4NpB,eAAeA,cAAc;AAAC,IAAAsH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}