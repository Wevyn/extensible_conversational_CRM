{"ast":null,"code":"// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {};\nconst attributeCache = {};\nconst validStagesCache = {}; // Cache for valid stage options\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\"\n};\n\n// Deal stage mapping based on language patterns - now maps to common Attio stage names\nconst DEAL_STAGES = {\n  \"Qualified\": [\"first call\", \"initial discussion\", \"introduction\", \"qualified\"],\n  \"Discovery\": [\"understanding\", \"requirements\", \"pain points\", \"challenges\", \"discovery\"],\n  \"Demo\": [\"Demo\", \"demonstration\", \"showing\", \"presentation\"],\n  \"Proposal\": [\"proposal\", \"quote\", \"pricing\", \"budget approved\"],\n  \"Negotiation\": [\"legal review\", \"contract\", \"terms\", \"negotiating\", \"negotiation\"],\n  \"Closed Won\": [\"signed\", \"closed\", \"deal done\", \"approved\", \"won\"],\n  \"Closed Lost\": [\"went with\", \"chose\", \"lost to\", \"not moving forward\", \"lost\"]\n};\n\n// Function to get valid stage options from Attio\nasync function getValidStageOptions() {\n  if (validStagesCache.stages) {\n    return validStagesCache.stages;\n  }\n  try {\n    const dealsId = await getObjectIdBySlug(\"deals\");\n    const stageAttributeId = ATTRIBUTE_IDS.stage;\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/attributes/${stageAttributeId}`, {\n      headers: {\n        Authorization: BEARER_TOKEN\n      }\n    });\n    if (res.ok) {\n      var _json$data, _json$data$config;\n      const json = await res.json();\n      const options = ((_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$config = _json$data.config) === null || _json$data$config === void 0 ? void 0 : _json$data$config.options) || [];\n      validStagesCache.stages = options.map(option => ({\n        id: option.id,\n        title: option.title\n      }));\n      console.log('‚úÖ Valid stage options loaded:', validStagesCache.stages);\n      return validStagesCache.stages;\n    }\n  } catch (err) {\n    console.error('‚ùå Failed to load stage options:', err);\n  }\n\n  // Fallback to common stage names\n  validStagesCache.stages = [{\n    id: 'qualified',\n    title: 'Qualified'\n  }, {\n    id: 'discovery',\n    title: 'Discovery'\n  }, {\n    id: 'demo',\n    title: 'Demo'\n  }, {\n    id: 'proposal',\n    title: 'Proposal'\n  }, {\n    id: 'negotiation',\n    title: 'Negotiation'\n  }, {\n    id: 'closed-won',\n    title: 'Closed Won'\n  }, {\n    id: 'closed-lost',\n    title: 'Closed Lost'\n  }];\n  return validStagesCache.stages;\n}\n\n// Function to map stage name to valid Attio stage\nasync function mapToValidStage(stageInput) {\n  const validStages = await getValidStageOptions();\n  const lowerInput = stageInput.toLowerCase();\n\n  // First try exact match by title\n  const exactMatch = validStages.find(stage => stage.title.toLowerCase() === lowerInput);\n  if (exactMatch) return exactMatch.title;\n\n  // Try fuzzy matching with our stage mapping\n  for (const [validStage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerInput.includes(indicator))) {\n      const match = validStages.find(stage => stage.title.toLowerCase().includes(validStage.toLowerCase()));\n      if (match) return match.title;\n    }\n  }\n\n  // Default to first valid stage or Discovery\n  const defaultStage = validStages.find(stage => stage.title.toLowerCase().includes('discovery') || stage.title.toLowerCase().includes('qualified'));\n  if (defaultStage) {\n    console.log(`‚ö†Ô∏è Using default stage \"${defaultStage.title}\" for input \"${stageInput}\"`);\n    return defaultStage.title;\n  }\n\n  // Last resort - use first available stage\n  if (validStages.length > 0) {\n    console.log(`‚ö†Ô∏è Using first available stage \"${validStages[0].title}\" for input \"${stageInput}\"`);\n    return validStages[0].title;\n  }\n  return null; // Don't set stage if none available\n}\n\n// Sentiment indicators\nconst SENTIMENT_INDICATORS = {\n  positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n  negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n  neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n};\n\n// Leading indicators for deal prediction\nconst LEADING_INDICATORS = {\n  strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n  risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n  urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n  technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n};\nasync function sendToAttio(updates) {\n  console.log('üîÑ Processing advanced updates:', updates);\n\n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = updates.filter(item => item.type === \"company\");\n  const personUpdates = updates.filter(item => item.type === \"person\");\n  const dealUpdates = updates.filter(item => item.type === \"deal\");\n  const taskUpdates = updates.filter(item => item.type === \"task\");\n  const relationshipUpdates = updates.filter(item => item.type === \"relationship\");\n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n\n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process company:\", item, err);\n    }\n  }\n\n  // Process people with company relationships\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPerson(item);\n      processedEntities.people[item.name] = personId;\n\n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process person:\", item, err);\n    }\n  }\n\n  // Process deals with relationships\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDeal(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process deal:\", item, err);\n    }\n  }\n\n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process relationship:\", item, err);\n    }\n  }\n\n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('üè¢ Upserting company:', data.name);\n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\nasync function createCompany(data) {\n  var _json$data2, _json$data2$id, _json$data3, _json$data3$id;\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Company created:\", (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : (_json$data2$id = _json$data2.id) === null || _json$data2$id === void 0 ? void 0 : _json$data2$id.record_id);\n  return (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : (_json$data3$id = _json$data3.id) === null || _json$data3$id === void 0 ? void 0 : _json$data3$id.record_id;\n}\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Company updated:\", recordId);\n  return recordId;\n}\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== DEALS ==========\n\nasync function upsertDeal(data, processedEntities) {\n  console.log('üíº Upserting deal:', data.name);\n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDeal(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDeal(data, processedEntities);\n  }\n}\nasync function createDeal(data, processedEntities) {\n  var _json$data4, _json$data4$id, _json$data5, _json$data5$id;\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n\n  // FIX: Validate and map stage to valid Attio stage\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    const validStage = await mapToValidStage(data.stage);\n    if (validStage) {\n      values[ATTRIBUTE_IDS.stage] = validStage;\n      console.log(`‚úÖ Mapped stage \"${data.stage}\" to \"${validStage}\"`);\n    } else {\n      console.log(`‚ö†Ô∏è Skipping invalid stage: \"${data.stage}\"`);\n    }\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n  const payload = {\n    data: {\n      values\n    }\n  };\n\n  // Link to company and people\n  if (data.company && processedEntities.companies[data.company]) {\n    payload.data.linked_records = [{\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    }];\n  }\n  console.log('üìù Creating deal with payload:', JSON.stringify(payload, null, 2));\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error('‚ùå Deal creation failed:', JSON.stringify(json, null, 2));\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Deal created:\", (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : (_json$data4$id = _json$data4.id) === null || _json$data4$id === void 0 ? void 0 : _json$data4$id.record_id);\n  return (_json$data5 = json.data) === null || _json$data5 === void 0 ? void 0 : (_json$data5$id = _json$data5.id) === null || _json$data5$id === void 0 ? void 0 : _json$data5$id.record_id;\n}\nasync function updateDeal(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n\n  // FIX: Validate and map stage to valid Attio stage\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    const validStage = await mapToValidStage(data.stage);\n    if (validStage) {\n      values[ATTRIBUTE_IDS.stage] = validStage;\n      console.log(`‚úÖ Mapped stage \"${data.stage}\" to \"${validStage}\"`);\n    } else {\n      console.log(`‚ö†Ô∏è Skipping invalid stage: \"${data.stage}\"`);\n    }\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Deal updated:\", recordId);\n  return recordId;\n}\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPerson(data) {\n  console.log('üë§ Upserting person with sentiment:', data.name, data.sentiment);\n  const existing = await queryPersonByName(data.name);\n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    return await createPersonWithSentiment(data);\n  }\n}\nasync function createPersonWithSentiment(data) {\n  var _json$data6, _json$data6$id, _json$data7, _json$data7$id;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = data.notes;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Person created with sentiment:\", (_json$data6 = json.data) === null || _json$data6 === void 0 ? void 0 : (_json$data6$id = _json$data6.id) === null || _json$data6$id === void 0 ? void 0 : _json$data6$id.record_id);\n  return (_json$data7 = json.data) === null || _json$data7 === void 0 ? void 0 : (_json$data7$id = _json$data7.id) === null || _json$data7$id === void 0 ? void 0 : _json$data7$id.record_id;\n}\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {};\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    var _existing$values;\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = (existing === null || existing === void 0 ? void 0 : (_existing$values = existing.values) === null || _existing$values === void 0 ? void 0 : _existing$values[ATTRIBUTE_IDS.notes]) || \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes ? `${existingNotes}\\n\\n${data.notes}` : data.notes;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Person updated with sentiment:\", recordId);\n  return recordId;\n}\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('üîó Updating relationships:', data);\n\n  // Multi-contact relationship updates\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n\n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n}\nasync function linkPersonToCompany(personId, companyId) {\n  // This would use Attio's relationship API to link person to company\n  console.log(`üîó Linking person ${personId} to company ${companyId}`);\n  // Implementation depends on your Attio workspace setup\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  var _json$data8, _json$data9;\n  console.log('üìã Creating advanced task:', data.description);\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities\n  const linkedRecords = [];\n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Advanced task created:\", (_json$data8 = json.data) === null || _json$data8 === void 0 ? void 0 : _json$data8.id);\n  return (_json$data9 = json.data) === null || _json$data9 === void 0 ? void 0 : _json$data9.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data0, _json$data0$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n  const json = await res.json();\n  const id = (_json$data0 = json.data) === null || _json$data0 === void 0 ? void 0 : (_json$data0$id = _json$data0.id) === null || _json$data0$id === void 0 ? void 0 : _json$data0$id.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\nasync function initializeAttributeIds() {\n  try {\n    var _validStagesCache$sta;\n    console.log('üîß Initializing advanced attribute IDs...');\n\n    // Load valid stage options first\n    await getValidStageOptions();\n\n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n\n    // Map to our attribute system\n    ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    ATTRIBUTE_IDS.role = peopleAttrs.role;\n    ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    console.log('‚úÖ Advanced attribute IDs initialized');\n    console.log('üìã Available stages:', (_validStagesCache$sta = validStagesCache.stages) === null || _validStagesCache$sta === void 0 ? void 0 : _validStagesCache$sta.map(s => s.title));\n  } catch (err) {\n    console.error('‚ùå Failed to initialize advanced attribute IDs:', err);\n  }\n}\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const attributes = {};\n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'Discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n  const lowerText = text.toLowerCase();\n\n  // Stage detection - now uses proper stage names\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => lowerText.includes(signal));\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => lowerText.includes(signal));\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n  return analysis;\n}\nexport { sendToAttio, initializeAttributeIds, analyzeDealLanguage, DEAL_STAGES, SENTIMENT_INDICATORS, LEADING_INDICATORS, mapToValidStage, getValidStageOptions };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","attributeCache","validStagesCache","ATTRIBUTE_IDS","name","email","phone","notes","role","sentiment","deal_name","deal_value","close_date","stage","probability","competitors","decision_maker","pain_points","company_name","relationship_health","expansion_opportunity","churn_risk","DEAL_STAGES","getValidStageOptions","stages","dealsId","getObjectIdBySlug","stageAttributeId","res","fetch","headers","Authorization","ok","_json$data","_json$data$config","json","options","data","config","map","option","id","title","console","log","err","error","mapToValidStage","stageInput","validStages","lowerInput","toLowerCase","exactMatch","find","validStage","indicators","Object","entries","some","indicator","includes","match","defaultStage","length","SENTIMENT_INDICATORS","positive","negative","neutral","LEADING_INDICATORS","strong_buying_signals","risk_signals","urgency_signals","technical_fit","sendToAttio","updates","companyUpdates","filter","item","type","personUpdates","dealUpdates","taskUpdates","relationshipUpdates","processedEntities","companies","people","deals","companyId","upsertCompany","personId","upsertPerson","company","linkPersonToCompany","dealId","upsertDeal","updateRelationships","upsertAdvancedTask","existing","queryCompanyByName","updateCompany","record_id","createCompany","_json$data2","_json$data2$id","_json$data3","_json$data3$id","companiesId","values","payload","JSON","stringify","method","body","Error","recordId","keys","and","attribute","query","limit","queryDealByName","updateDeal","createDeal","_json$data4","_json$data4$id","_json$data5","_json$data5$id","value","parseFloat","toString","replace","parseDealDate","linked_records","target_object","target_record_id","queryPersonByName","updatePersonWithSentiment","createPersonWithSentiment","_json$data6","_json$data6$id","_json$data7","_json$data7$id","peopleId","fullName","first_name","last_name","trim","full_name","email_address","_existing$values","getPersonById","existingNotes","contact_updates","update","context","account_health","overall_score","expansion_notes","risk_level","_json$data8","_json$data9","description","content","format","deadline_at","due_date","is_completed","assignees","linkedRecords","link_to_person_name","push","link_to_company","link_to_deal","dateStr","year","Date","getFullYear","toISOString","nextQuarter","setMonth","getMonth","slug","_json$data0","_json$data0$id","status","object_id","initializeAttributeIds","_validStagesCache$sta","peopleAttrs","getAttributeIds","dealAttrs","companyAttrs","email_addresses","phone_numbers","s","objectSlug","objectId","attributes","forEach","attr","api_slug","attribute_id","analyzeDealLanguage","text","analysis","urgency","buying_signals","value_indicators","lowerText","positiveCount","word","negativeCount","signal","valueMatch"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/advanced-attio.js"],"sourcesContent":["// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\nconst objectCache = {};\nconst attributeCache = {};\nconst validStagesCache = {}; // Cache for valid stage options\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  \n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  \n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\"\n};\n\n// Deal stage mapping based on language patterns - now maps to common Attio stage names\nconst DEAL_STAGES = {\n  \"Qualified\": [\"first call\", \"initial discussion\", \"introduction\", \"qualified\"],\n  \"Discovery\": [\"understanding\", \"requirements\", \"pain points\", \"challenges\", \"discovery\"],\n  \"Demo\": [\"Demo\", \"demonstration\", \"showing\", \"presentation\"],\n  \"Proposal\": [\"proposal\", \"quote\", \"pricing\", \"budget approved\"],\n  \"Negotiation\": [\"legal review\", \"contract\", \"terms\", \"negotiating\", \"negotiation\"],\n  \"Closed Won\": [\"signed\", \"closed\", \"deal done\", \"approved\", \"won\"],\n  \"Closed Lost\": [\"went with\", \"chose\", \"lost to\", \"not moving forward\", \"lost\"]\n};\n\n// Function to get valid stage options from Attio\nasync function getValidStageOptions() {\n  if (validStagesCache.stages) {\n    return validStagesCache.stages;\n  }\n\n  try {\n    const dealsId = await getObjectIdBySlug(\"deals\");\n    const stageAttributeId = ATTRIBUTE_IDS.stage;\n    \n    const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/attributes/${stageAttributeId}`, {\n      headers: { Authorization: BEARER_TOKEN }\n    });\n\n    if (res.ok) {\n      const json = await res.json();\n      const options = json.data?.config?.options || [];\n      validStagesCache.stages = options.map(option => ({\n        id: option.id,\n        title: option.title\n      }));\n      console.log('‚úÖ Valid stage options loaded:', validStagesCache.stages);\n      return validStagesCache.stages;\n    }\n  } catch (err) {\n    console.error('‚ùå Failed to load stage options:', err);\n  }\n\n  // Fallback to common stage names\n  validStagesCache.stages = [\n    { id: 'qualified', title: 'Qualified' },\n    { id: 'discovery', title: 'Discovery' },\n    { id: 'demo', title: 'Demo' },\n    { id: 'proposal', title: 'Proposal' },\n    { id: 'negotiation', title: 'Negotiation' },\n    { id: 'closed-won', title: 'Closed Won' },\n    { id: 'closed-lost', title: 'Closed Lost' }\n  ];\n  return validStagesCache.stages;\n}\n\n// Function to map stage name to valid Attio stage\nasync function mapToValidStage(stageInput) {\n  const validStages = await getValidStageOptions();\n  const lowerInput = stageInput.toLowerCase();\n\n  // First try exact match by title\n  const exactMatch = validStages.find(stage => \n    stage.title.toLowerCase() === lowerInput\n  );\n  if (exactMatch) return exactMatch.title;\n\n  // Try fuzzy matching with our stage mapping\n  for (const [validStage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerInput.includes(indicator))) {\n      const match = validStages.find(stage => \n        stage.title.toLowerCase().includes(validStage.toLowerCase())\n      );\n      if (match) return match.title;\n    }\n  }\n\n  // Default to first valid stage or Discovery\n  const defaultStage = validStages.find(stage => \n    stage.title.toLowerCase().includes('discovery') || \n    stage.title.toLowerCase().includes('qualified')\n  );\n  \n  if (defaultStage) {\n    console.log(`‚ö†Ô∏è Using default stage \"${defaultStage.title}\" for input \"${stageInput}\"`);\n    return defaultStage.title;\n  }\n\n  // Last resort - use first available stage\n  if (validStages.length > 0) {\n    console.log(`‚ö†Ô∏è Using first available stage \"${validStages[0].title}\" for input \"${stageInput}\"`);\n    return validStages[0].title;\n  }\n\n  return null; // Don't set stage if none available\n}\n\n// Sentiment indicators\nconst SENTIMENT_INDICATORS = {\n  positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n  negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n  neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n};\n\n// Leading indicators for deal prediction\nconst LEADING_INDICATORS = {\n  strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n  risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n  urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n  technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n};\n\nasync function sendToAttio(updates) {\n  console.log('üîÑ Processing advanced updates:', updates);\n  \n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = updates.filter(item => item.type === \"company\");\n  const personUpdates = updates.filter(item => item.type === \"person\");\n  const dealUpdates = updates.filter(item => item.type === \"deal\");\n  const taskUpdates = updates.filter(item => item.type === \"task\");\n  const relationshipUpdates = updates.filter(item => item.type === \"relationship\");\n  \n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n  \n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process company:\", item, err);\n    }\n  }\n  \n  // Process people with company relationships\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPerson(item);\n      processedEntities.people[item.name] = personId;\n      \n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process person:\", item, err);\n    }\n  }\n  \n  // Process deals with relationships\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDeal(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process deal:\", item, err);\n    }\n  }\n  \n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process relationship:\", item, err);\n    }\n  }\n  \n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('üè¢ Upserting company:', data.name);\n  \n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\n\nasync function createCompany(data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Company created:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Company updated:\", recordId);\n  return recordId;\n}\n\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== DEALS ==========\n\nasync function upsertDeal(data, processedEntities) {\n  console.log('üíº Upserting deal:', data.name);\n  \n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDeal(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDeal(data, processedEntities);\n  }\n}\n\nasync function createDeal(data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  \n  // FIX: Validate and map stage to valid Attio stage\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    const validStage = await mapToValidStage(data.stage);\n    if (validStage) {\n      values[ATTRIBUTE_IDS.stage] = validStage;\n      console.log(`‚úÖ Mapped stage \"${data.stage}\" to \"${validStage}\"`);\n    } else {\n      console.log(`‚ö†Ô∏è Skipping invalid stage: \"${data.stage}\"`);\n    }\n  }\n  \n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n\n  const payload = { data: { values } };\n  \n  // Link to company and people\n  if (data.company && processedEntities.companies[data.company]) {\n    payload.data.linked_records = [{\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    }];\n  }\n\n  console.log('üìù Creating deal with payload:', JSON.stringify(payload, null, 2));\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error('‚ùå Deal creation failed:', JSON.stringify(json, null, 2));\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Deal created:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updateDeal(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  \n  // FIX: Validate and map stage to valid Attio stage\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    const validStage = await mapToValidStage(data.stage);\n    if (validStage) {\n      values[ATTRIBUTE_IDS.stage] = validStage;\n      console.log(`‚úÖ Mapped stage \"${data.stage}\" to \"${validStage}\"`);\n    } else {\n      console.log(`‚ö†Ô∏è Skipping invalid stage: \"${data.stage}\"`);\n    }\n  }\n  \n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = data.pain_points;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Deal updated:\", recordId);\n  return recordId;\n}\n\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPerson(data) {\n  console.log('üë§ Upserting person with sentiment:', data.name, data.sentiment);\n  \n  const existing = await queryPersonByName(data.name);\n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    return await createPersonWithSentiment(data);\n  }\n}\n\nasync function createPersonWithSentiment(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = data.notes;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Person created with sentiment:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const values = {};\n  \n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = existing?.values?.[ATTRIBUTE_IDS.notes] || \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes ? `${existingNotes}\\n\\n${data.notes}` : data.notes;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Person updated with sentiment:\", recordId);\n  return recordId;\n}\n\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('üîó Updating relationships:', data);\n  \n  // Multi-contact relationship updates\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n  \n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n}\n\nasync function linkPersonToCompany(personId, companyId) {\n  // This would use Attio's relationship API to link person to company\n  console.log(`üîó Linking person ${personId} to company ${companyId}`);\n  // Implementation depends on your Attio workspace setup\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  console.log('üìã Creating advanced task:', data.description);\n  \n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities\n  const linkedRecords = [];\n  \n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  \n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\", \n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  \n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Advanced task created:\", json.data?.id);\n  return json.data?.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    \n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\nasync function initializeAttributeIds() {\n  try {\n    console.log('üîß Initializing advanced attribute IDs...');\n    \n    // Load valid stage options first\n    await getValidStageOptions();\n    \n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n    \n    // Map to our attribute system\n    ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    ATTRIBUTE_IDS.role = peopleAttrs.role;\n    ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    \n    ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    \n    ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    \n    console.log('‚úÖ Advanced attribute IDs initialized');\n    console.log('üìã Available stages:', validStagesCache.stages?.map(s => s.title));\n  } catch (err) {\n    console.error('‚ùå Failed to initialize advanced attribute IDs:', err);\n  }\n}\n\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const attributes = {};\n  \n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'Discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n\n  const lowerText = text.toLowerCase();\n\n  // Stage detection - now uses proper stage names\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  \n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';\n  else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n\n  return analysis;\n}\n\nexport { \n  sendToAttio, \n  initializeAttributeIds, \n  analyzeDealLanguage,\n  DEAL_STAGES,\n  SENTIMENT_INDICATORS,\n  LEADING_INDICATORS,\n  mapToValidStage,\n  getValidStageOptions\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}