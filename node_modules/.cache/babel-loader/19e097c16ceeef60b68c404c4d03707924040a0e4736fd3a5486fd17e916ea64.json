{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// In-memory cache for object IDs (e.g., people, companies)\nconst objectCache = {}; // caches object_ids like \"people\"\n\n// üß† Map attributes for people records\nconst ATTRIBUTE_IDS = {\n  first_name: \"first_name\",\n  // Replace with actual UUID like \"41252299-f8c7...\"\n  last_name: \"last_name\",\n  notes: \"notes\"\n};\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      const intent = detectIntent(item);\n      ensureFields(item);\n      if (item.type === \"person\") {\n        if (intent === \"delete\") await deletePerson(item.name);else await upsertPerson(item);\n      }\n      if (item.type === \"task\") {\n        if (intent === \"delete\") await deleteTaskByDescription(item.description);else await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\nfunction detectIntent(item) {\n  const text = (item.description || item.notes || \"\").toLowerCase();\n  if (text.includes(\"remove\") || text.includes(\"cancel\")) return \"delete\";\n  if (text.includes(\"update\") || text.includes(\"change\")) return \"update\";\n  return \"upsert\";\n}\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n    item.assignees = item.assignees || [];\n    item.linked_records = item.linked_records || [];\n  }\n}\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date !== null && date !== void 0 && date.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);else if (Date.parse(date)) d = new Date(date);\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer !== null && mer !== void 0 && mer.includes(\"p\") && h < 12) h += 12;\n      if (mer !== null && mer !== void 0 && mer.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  var _json$data2;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(data.name);\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n  const values = {\n    [ATTRIBUTE_IDS.first_name]: first,\n    [ATTRIBUTE_IDS.last_name]: last,\n    [ATTRIBUTE_IDS.notes]: data.notes\n  };\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const url = record ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}` : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n  const method = record ? \"PUT\" : \"POST\";\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Person sync error:\", json);\n  } else {\n    console.log(`‚úÖ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n  return (record === null || record === void 0 ? void 0 : record.id) || ((_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.id);\n}\nasync function deletePerson(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(name);\n  if (!record) return console.warn(\"‚ö†Ô∏è Person not found:\", name);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    console.log(\"üóëÔ∏è Deleted person:\", name);\n  } else {\n    console.error(\"‚ùå Failed to delete person:\", name);\n  }\n}\nasync function queryPersonByName(name) {\n  var _json$data3;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      name\n    },\n    limit: 1,\n    offset: 0\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return ((_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3[0]) || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  const personId = data.link_to_person_name ? await getPersonIdByName(data.link_to_person_name) : null;\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      linked_records: personId ? [{\n        target_object: \"people\",\n        target_record_id: personId\n      }] : [],\n      assignees: data.assignees || []\n    }\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"‚úÖ Task created:\", json);\n  } else {\n    console.error(\"‚ùå Task creation failed:\", json);\n  }\n}\nasync function deleteTaskByDescription(desc) {\n  var _json$data4;\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const match = (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : _json$data4.find(t => {\n    var _t$content;\n    return ((_t$content = t.content) === null || _t$content === void 0 ? void 0 : _t$content.trim().toLowerCase()) === desc.trim().toLowerCase();\n  });\n  if (!match) return;\n  const del = await fetch(`${ATTIO_API_BASE}/tasks/${match.id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (del.ok) {\n    console.log(\"üóëÔ∏è Deleted task:\", desc);\n  } else {\n    console.error(\"‚ùå Failed to delete task:\", desc);\n  }\n}\nasync function getPersonIdByName(name) {\n  const record = await queryPersonByName(name);\n  return (record === null || record === void 0 ? void 0 : record.id) || null;\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","ATTRIBUTE_IDS","first_name","last_name","notes","sendToAttio","updates","item","intent","detectIntent","ensureFields","type","deletePerson","name","upsertPerson","deleteTaskByDescription","description","upsertTask","err","console","error","text","toLowerCase","includes","due_date","parseDateTime","due_time","assignees","linked_records","date","time","d","Date","setDate","getDate","parse","t","mer","split","h","m","map","Number","setHours","toISOString","getObjectIdBySlug","slug","_json$data","_json$data$id","res","fetch","headers","Authorization","json","id","data","object_id","Error","_json$data2","peopleId","record","queryPersonByName","first","rest","last","join","values","payload","JSON","stringify","url","method","body","ok","log","warn","_json$data3","filter","limit","offset","personId","link_to_person_name","getPersonIdByName","content","format","deadline_at","is_completed","target_object","target_record_id","desc","_json$data4","match","find","_t$content","trim","del"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n// In-memory cache for object IDs (e.g., people, companies)\nconst objectCache = {}; // caches object_ids like \"people\"\n\n// üß† Map attributes for people records\nconst ATTRIBUTE_IDS = {\n  first_name: \"first_name\", // Replace with actual UUID like \"41252299-f8c7...\"\n  last_name: \"last_name\",\n  notes: \"notes\"\n};\n\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      const intent = detectIntent(item);\n      ensureFields(item);\n\n      if (item.type === \"person\") {\n        if (intent === \"delete\") await deletePerson(item.name);\n        else await upsertPerson(item);\n      }\n\n      if (item.type === \"task\") {\n        if (intent === \"delete\") await deleteTaskByDescription(item.description);\n        else await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\n\nfunction detectIntent(item) {\n  const text = (item.description || item.notes || \"\").toLowerCase();\n  if (text.includes(\"remove\") || text.includes(\"cancel\")) return \"delete\";\n  if (text.includes(\"update\") || text.includes(\"change\")) return \"update\";\n  return \"upsert\";\n}\n\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n    item.assignees = item.assignees || [];\n    item.linked_records = item.linked_records || [];\n  }\n}\n\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date?.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);\n    else if (Date.parse(date)) d = new Date(date);\n\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer?.includes(\"p\") && h < 12) h += 12;\n      if (mer?.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(data.name);\n\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n\n  const values = {\n    [ATTRIBUTE_IDS.first_name]: first,\n    [ATTRIBUTE_IDS.last_name]: last,\n    [ATTRIBUTE_IDS.notes]: data.notes\n  };\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const url = record\n    ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`\n    : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n\n  const method = record ? \"PUT\" : \"POST\";\n\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Person sync error:\", json);\n  } else {\n    console.log(`‚úÖ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n\n  return record?.id || json.data?.id;\n}\n\nasync function deletePerson(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(name);\n  if (!record) return console.warn(\"‚ö†Ô∏è Person not found:\", name);\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`, {\n    method: \"DELETE\",\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (res.ok) {\n    console.log(\"üóëÔ∏è Deleted person:\", name);\n  } else {\n    console.error(\"‚ùå Failed to delete person:\", name);\n  }\n}\n\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const payload = {\n    filter: { name },\n    limit: 1,\n    offset: 0\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data?.[0] || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  const personId = data.link_to_person_name\n    ? await getPersonIdByName(data.link_to_person_name)\n    : null;\n\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      linked_records: personId\n        ? [{ target_object: \"people\", target_record_id: personId }]\n        : [],\n      assignees: data.assignees || []\n    }\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"‚úÖ Task created:\", json);\n  } else {\n    console.error(\"‚ùå Task creation failed:\", json);\n  }\n}\n\nasync function deleteTaskByDescription(desc) {\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const match = json.data?.find(t =>\n    t.content?.trim().toLowerCase() === desc.trim().toLowerCase()\n  );\n\n  if (!match) return;\n\n  const del = await fetch(`${ATTIO_API_BASE}/tasks/${match.id}`, {\n    method: \"DELETE\",\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (del.ok) {\n    console.log(\"üóëÔ∏è Deleted task:\", desc);\n  } else {\n    console.error(\"‚ùå Failed to delete task:\", desc);\n  }\n}\n\nasync function getPersonIdByName(name) {\n  const record = await queryPersonByName(name);\n  return record?.id || null;\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}