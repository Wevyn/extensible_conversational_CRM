{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {}; // caches object_ids like \"people\"\n\nconst ATTRIBUTE_IDS = {\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\"\n};\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      ensureFields(item);\n      if (item.type === \"person\") {\n        await upsertPerson(item);\n      }\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process item:\", item, err);\n    }\n  }\n}\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n  }\n}\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date !== null && date !== void 0 && date.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);else if (Date.parse(date)) d = new Date(date);\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer !== null && mer !== void 0 && mer.includes(\"p\") && h < 12) h += 12;\n      if (mer !== null && mer !== void 0 && mer.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(data.name);\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n  const values = {\n    [ATTRIBUTE_IDS.first_name]: first,\n    [ATTRIBUTE_IDS.last_name]: last,\n    [ATTRIBUTE_IDS.notes]: data.notes,\n    [ATTRIBUTE_IDS.interest]: data.interest\n  };\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const url = record ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}` : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n  const method = record ? \"PUT\" : \"POST\";\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"❌ Person sync error:\", json);\n  } else {\n    console.log(`✅ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n}\nasync function queryPersonByName(name) {\n  var _json$data2;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      name\n    },\n    limit: 1,\n    offset: 0\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return ((_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2[0]) || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  const taskContent = `@${data.link_to_person_name || \"\"} ${data.description}`.trim();\n  const payload = {\n    data: {\n      content: taskContent,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: []\n    }\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"✅ Task created:\", json);\n  } else {\n    console.error(\"❌ Task creation failed:\", json);\n  }\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","ATTRIBUTE_IDS","name","sendToAttio","updates","item","ensureFields","type","upsertPerson","upsertTask","err","console","error","notes","description","due_date","parseDateTime","due_time","date","time","d","Date","toLowerCase","includes","setDate","getDate","parse","t","mer","split","h","m","map","Number","setHours","toISOString","getObjectIdBySlug","slug","_json$data","_json$data$id","res","fetch","headers","Authorization","json","id","data","object_id","Error","peopleId","record","queryPersonByName","first","rest","last","join","values","first_name","last_name","interest","payload","JSON","stringify","url","method","body","ok","log","_json$data2","filter","limit","offset","taskContent","link_to_person_name","trim","content","format","deadline_at","is_completed","assignees"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n\nconst objectCache = {}; // caches object_ids like \"people\"\n\nconst ATTRIBUTE_IDS = {\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\"\n};\n\n\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      ensureFields(item);\n\n      if (item.type === \"person\") {\n        await upsertPerson(item);\n      }\n\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to process item:\", item, err);\n    }\n  }\n}\n\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n  }\n}\n\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date?.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);\n    else if (Date.parse(date)) d = new Date(date);\n\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\" ).map(Number);\n      if (mer?.includes(\"p\") && h < 12) h += 12;\n      if (mer?.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`❌ Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(data.name);\n\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n\n  const values = {\n    [ATTRIBUTE_IDS.first_name]: first,\n    [ATTRIBUTE_IDS.last_name]: last,\n    [ATTRIBUTE_IDS.notes]: data.notes,\n    [ATTRIBUTE_IDS.interest]: data.interest\n  };\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const url = record\n    ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`\n    : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n\n  const method = record ? \"PUT\" : \"POST\";\n\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"❌ Person sync error:\", json);\n  } else {\n    console.log(`✅ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n}\n\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const payload = {\n    filter: { name },\n    limit: 1,\n    offset: 0\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data?.[0] || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  const taskContent = `@${data.link_to_person_name || \"\"} ${data.description}`.trim();\n\n  const payload = {\n    data: {\n      content: taskContent,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: []\n    }\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"✅ Task created:\", json);\n  } else {\n    console.error(\"❌ Task creation failed:\", json);\n  }\n}\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}