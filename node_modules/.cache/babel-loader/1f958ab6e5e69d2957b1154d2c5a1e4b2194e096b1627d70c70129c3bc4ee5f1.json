{"ast":null,"code":"// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {};\nconst attributeCache = {};\nconst validStagesCache = {}; // Cache for valid stage options\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  department: \"2bdd1ea8-2983-49a4-8570-de7bd4c037a5\",\n  // Add department field\n  employee_id: \"6ab0bbc9-4eba-4f4a-9ee2-f6c19ea9948a\",\n  // For internal employees\n  manager: \"bd699e5b-79d5-4745-9f24-75a23d6cdfdf\",\n  // Employee manager relationship\n\n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  deal_owner: \"3b616cdc-1714-4db7-b99a-1007103ed6cf\",\n  internal_stakeholders: \"944fe8e7-a984-4da2-af86-f51c4ada7541\",\n  // For employee-employee deals\n\n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\",\n  internal_department: \"3c8bfbe9-9261-458f-a499-254582e5469f\" // For internal departments\n};\n\n// Deal stage mapping based on language patterns\nconst DEAL_STAGES = {\n  \"Qualified\": [\"qualified\", \"first call\", \"initial discussion\", \"introduction\"],\n  \"Discovery\": [\"discovery\", \"understanding\", \"requirements\", \"pain points\", \"challenges\"],\n  \"Demo\": [\"demo\", \"demonstration\", \"showing\", \"presentation\"],\n  \"Proposal\": [\"proposal\", \"quote\", \"pricing\", \"budget approved\"],\n  \"Negotiation\": [\"negotiation\", \"legal review\", \"contract\", \"terms\", \"negotiating\"],\n  \"Closed Won\": [\"closed won\", \"signed\", \"closed\", \"deal done\", \"approved\", \"won\"],\n  \"Closed Lost\": [\"closed lost\", \"went with\", \"chose\", \"lost to\", \"not moving forward\", \"lost\"]\n};\n\n// Team/Role indicators that should NOT be created as people\nconst TEAM_ROLE_INDICATORS = [\"team\", \"department\", \"group\", \"division\", \"unit\", \"committee\", \"board\", \"panel\", \"squad\", \"crew\", \"staff\", \"workforce\"];\n\n// Function to get valid stage options from Attio\nasync function getValidStageOptions() {\n  if (validStagesCache.stages) {\n    return validStagesCache.stages;\n  }\n  try {\n    const dealsId = await getObjectIdBySlug(\"deals\");\n    const stageAttributeId = ATTRIBUTE_IDS.stage;\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/attributes/${stageAttributeId}`, {\n      headers: {\n        Authorization: BEARER_TOKEN\n      }\n    });\n    if (res.ok) {\n      var _json$data, _json$data$config;\n      const json = await res.json();\n      const options = ((_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$config = _json$data.config) === null || _json$data$config === void 0 ? void 0 : _json$data$config.options) || [];\n      validStagesCache.stages = options.map(option => ({\n        id: option.id,\n        title: option.title\n      }));\n      console.log('‚úÖ Valid stage options loaded:', validStagesCache.stages);\n      return validStagesCache.stages;\n    }\n  } catch (err) {\n    console.error('‚ùå Failed to load stage options:', err);\n  }\n\n  // Fallback to common stage names\n  validStagesCache.stages = [{\n    id: 'qualified',\n    title: 'Qualified'\n  }, {\n    id: 'discovery',\n    title: 'Discovery'\n  }, {\n    id: 'demo',\n    title: 'Demo'\n  }, {\n    id: 'proposal',\n    title: 'Proposal'\n  }, {\n    id: 'negotiation',\n    title: 'Negotiation'\n  }, {\n    id: 'closed-won',\n    title: 'Closed Won'\n  }, {\n    id: 'closed-lost',\n    title: 'Closed Lost'\n  }];\n  return validStagesCache.stages;\n}\n\n// Function to map stage name to valid Attio stage\nasync function mapToValidStage(stageInput) {\n  if (!stageInput) return null;\n  const validStages = await getValidStageOptions();\n  const lowerInput = stageInput.toLowerCase().trim();\n  console.log(`üéØ Mapping stage \"${stageInput}\" against valid stages:`, validStages.map(s => s.title));\n\n  // Exact match\n  const exactMatch = validStages.find(stage => stage.title.toLowerCase() === lowerInput);\n  if (exactMatch) {\n    console.log(`‚úÖ Exact stage match: \"${exactMatch.title}\" -> ID: ${exactMatch.id}`);\n    return exactMatch;\n  }\n\n  // Fuzzy match\n  for (const [validStageTitle, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(ind => lowerInput.includes(ind.toLowerCase()))) {\n      const fuzzyMatch = validStages.find(stage => stage.title.toLowerCase() === validStageTitle.toLowerCase());\n      if (fuzzyMatch) {\n        console.log(`‚úÖ Fuzzy match found: \"${stageInput}\" -> \"${fuzzyMatch.title}\" via \"${validStageTitle}\"`);\n        return fuzzyMatch;\n      }\n    }\n  }\n\n  // Partial match\n  const partial = validStages.find(stage => stage.title.toLowerCase().includes(lowerInput) || lowerInput.includes(stage.title.toLowerCase()));\n  if (partial) {\n    console.log(`‚úÖ Partial stage match: \"${stageInput}\" -> \"${partial.title}\"`);\n    return partial;\n  }\n\n  // Default fallback\n  const fallback = validStages.find(stage => stage.title.toLowerCase().includes(\"discovery\") || stage.title.toLowerCase().includes(\"qualified\"));\n  if (fallback) {\n    console.log(`‚ö†Ô∏è Using fallback stage: \"${fallback.title}\"`);\n    return fallback;\n  }\n  console.log(`‚ùå No valid stage found for \"${stageInput}\"`);\n  return null;\n}\n\n// Check if a name represents a team/role rather than an individual person\nfunction isTeamOrRole(name) {\n  if (!name || typeof name !== 'string') return false;\n  const lowerName = name.toLowerCase().trim();\n\n  // Check for team indicators\n  const hasTeamIndicator = TEAM_ROLE_INDICATORS.some(indicator => lowerName.includes(indicator));\n\n  // Check for standalone role titles\n  const roleOnlyTitles = ['cto', 'ceo', 'cfo', 'cmo', 'coo', 'cpo', 'ciso', 'vp', 'director', 'manager', 'lead', 'head', 'president', 'founder', 'owner'];\n  const isRoleOnly = roleOnlyTitles.includes(lowerName);\n  return hasTeamIndicator || isRoleOnly;\n}\nasync function sendToAttio(updates) {\n  console.log('üîÑ Processing advanced updates:', updates);\n\n  // Filter out team/role entries from person creation\n  const filteredUpdates = updates.filter(item => {\n    if (item.type === 'person' && isTeamOrRole(item.name)) {\n      console.log(`üö´ Skipping team/role as person: \"${item.name}\"`);\n      return false;\n    }\n    return true;\n  });\n\n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = filteredUpdates.filter(item => item.type === \"company\");\n  const personUpdates = filteredUpdates.filter(item => item.type === \"person\");\n  const dealUpdates = filteredUpdates.filter(item => item.type === \"deal\");\n  const taskUpdates = filteredUpdates.filter(item => item.type === \"task\");\n  const relationshipUpdates = filteredUpdates.filter(item => item.type === \"relationship\");\n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n\n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process company:\", item, err);\n    }\n  }\n\n  // Process people with enhanced duplicate detection\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPersonEnhanced(item);\n      processedEntities.people[item.name] = personId;\n\n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process person:\", item, err);\n    }\n  }\n\n  // Process deals with enhanced linking\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDealEnhanced(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process deal:\", item, err);\n    }\n  }\n\n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process relationship:\", item, err);\n    }\n  }\n\n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPersonEnhanced(data) {\n  console.log('üë§ Enhanced upserting person:', data.name);\n\n  // Enhanced search - try email first, then name variations\n  let existing = null;\n\n  // Search by email if provided\n  if (data.email) {\n    existing = await queryPersonByEmail(data.email);\n    if (existing) {\n      console.log(`‚úÖ Found existing person by email: ${data.email}`);\n    }\n  }\n\n  // Search by name variations if not found by email\n  if (!existing) {\n    existing = await queryPersonByNameEnhanced(data.name);\n  }\n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    return await createPersonWithSentiment(data);\n  }\n}\nasync function queryPersonByEmail(email) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.email,\n        query: email\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\nasync function queryPersonByNameEnhanced(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  // Try exact match first\n  let payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name,\n        query_mode: \"exact_match\"\n      }]\n    },\n    limit: 1\n  };\n  let res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  let json = await res.json();\n  if (json.data && json.data.length > 0) {\n    console.log(`‚úÖ Found exact name match: ${name}`);\n    return json.data[0];\n  }\n\n  // Try fuzzy search\n  payload.filter.and[0].query_mode = \"contains\";\n  res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  json = await res.json();\n  if (json.data && json.data.length > 0) {\n    var _existing$values, _existing$values$ATTR, _existing$values$ATTR2;\n    // Check if it's a close match\n    const existing = json.data[0];\n    const existingName = ((_existing$values = existing.values) === null || _existing$values === void 0 ? void 0 : (_existing$values$ATTR = _existing$values[ATTRIBUTE_IDS.name]) === null || _existing$values$ATTR === void 0 ? void 0 : (_existing$values$ATTR2 = _existing$values$ATTR[0]) === null || _existing$values$ATTR2 === void 0 ? void 0 : _existing$values$ATTR2.full_name) || \"\";\n    if (namesAreSimilar(name, existingName)) {\n      console.log(`‚úÖ Found similar name match: \"${name}\" -> \"${existingName}\"`);\n      return existing;\n    }\n  }\n  return null;\n}\nfunction namesAreSimilar(name1, name2) {\n  if (!name1 || !name2) return false;\n  const normalize = str => str.toLowerCase().trim().replace(/[^\\w\\s]/g, '');\n  const n1 = normalize(name1);\n  const n2 = normalize(name2);\n\n  // Exact match\n  if (n1 === n2) return true;\n\n  // Check if one is contained in the other (for partial names)\n  if (n1.includes(n2) || n2.includes(n1)) return true;\n\n  // Check word overlap for compound names\n  const words1 = n1.split(/\\s+/);\n  const words2 = n2.split(/\\s+/);\n  const overlap = words1.filter(word => words2.includes(word));\n\n  // Consider similar if significant word overlap\n  return overlap.length >= Math.min(words1.length, words2.length) * 0.5;\n}\nasync function createPersonWithSentiment(data) {\n  var _json$data2, _json$data2$id, _json$data3, _json$data3$id;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes with role/team handling\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n\n  // Handle role and team information intelligently\n  let roleText = data.role || \"\";\n  let notesText = data.notes || \"\";\n\n  // If this person is associated with a team, add it to their description\n  if (data.team || data.role && isTeamOrRole(data.role)) {\n    const teamInfo = data.team || data.role;\n    notesText = notesText ? `${notesText}\\nTeam/Department: ${teamInfo}` : `Team/Department: ${teamInfo}`;\n    if (ATTRIBUTE_IDS.department) {\n      values[ATTRIBUTE_IDS.department] = teamInfo;\n    }\n  }\n  if (roleText && ATTRIBUTE_IDS.role && !isTeamOrRole(roleText)) {\n    values[ATTRIBUTE_IDS.role] = roleText;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (notesText && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = notesText;\n  }\n\n  // Employee-specific fields\n  if (data.employee_id && ATTRIBUTE_IDS.employee_id) {\n    values[ATTRIBUTE_IDS.employee_id] = data.employee_id;\n  }\n  if (data.manager && ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = data.manager;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Person created with enhanced attributes:\", (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : (_json$data2$id = _json$data2.id) === null || _json$data2$id === void 0 ? void 0 : _json$data2$id.record_id);\n  return (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : (_json$data3$id = _json$data3.id) === null || _json$data3$id === void 0 ? void 0 : _json$data3$id.record_id;\n}\n\n// ========== ENHANCED DEAL MANAGEMENT ==========\n\nasync function upsertDealEnhanced(data, processedEntities) {\n  console.log('üíº Enhanced upserting deal:', data.name);\n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDealEnhanced(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDealEnhanced(data, processedEntities);\n  }\n}\nasync function createDealEnhanced(data, processedEntities) {\n  var _json$data4, _json$data4$id;\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  if (data.deal_owner && ATTRIBUTE_IDS.deal_owner) {\n    values[ATTRIBUTE_IDS.deal_owner] = data.deal_owner;\n  }\n\n  // FIXED: Enhanced stage validation with better logging\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Validating deal stage: \"${data.stage}\"`);\n    const validStages = await getValidStageOptions();\n    const matchedStageTitle = await mapToValidStage(data.stage);\n    const matchedStage = validStages.find(stage => stage.title === matchedStageTitle);\n    if (matchedStage) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage set: \"${data.stage}\" -> \"${matchedStageTitle}\" -> ID: ${matchedStage.id}`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage assignment`);\n    }\n  } else {\n    console.log(`‚ÑπÔ∏è No stage provided or stage attribute not configured`);\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n\n  // Employee-employee deal support\n  if (data.internal_stakeholders && ATTRIBUTE_IDS.internal_stakeholders) {\n    values[ATTRIBUTE_IDS.internal_stakeholders] = Array.isArray(data.internal_stakeholders) ? data.internal_stakeholders.join(', ') : data.internal_stakeholders;\n  }\n  const payload = {\n    data: {\n      values\n    }\n  };\n\n  // Enhanced linking to companies and people\n  const linkedRecords = [];\n  if (data.company && processedEntities.companies[data.company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    });\n  }\n\n  // Link to decision maker if they exist\n  if (data.decision_maker && processedEntities.people[data.decision_maker]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.decision_maker]\n    });\n  }\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n  console.log('üìù Creating deal with enhanced payload:', JSON.stringify(payload, null, 2));\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error('‚ùå Enhanced deal creation failed:', JSON.stringify(json, null, 2));\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n  const dealId = (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : (_json$data4$id = _json$data4.id) === null || _json$data4$id === void 0 ? void 0 : _json$data4$id.record_id;\n  console.log(\"‚úÖ Enhanced deal created:\", dealId);\n\n  // Store deal ID for reverse linking\n  if (dealId) {\n    processedEntities.deals[data.name] = dealId;\n  }\n  return dealId;\n}\nasync function updateDealEnhanced(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n\n  // FIXED: Enhanced stage validation for updates\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Validating updated deal stage: \"${data.stage}\"`);\n    const validStages = await getValidStageOptions();\n    const matchedStageTitle = await mapToValidStage(data.stage);\n    const matchedStage = validStages.find(stage => stage.title === matchedStageTitle);\n    if (matchedStage) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage updated: \"${data.stage}\" -> \"${matchedStageTitle}\" -> ID: ${matchedStage.id}`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage update`);\n    }\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n  if (Object.keys(values).length === 0) {\n    console.log('‚ÑπÔ∏è No deal updates needed');\n    return recordId;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Enhanced deal updated:\", recordId);\n  return recordId;\n}\n\n// ========== LINKING FUNCTIONALITY ==========\n\nasync function linkPersonToCompany(personId, companyId) {\n  console.log(`üîó Linking person ${personId} to company ${companyId}`);\n  try {\n    // This creates a relationship between person and company\n    // Implementation depends on your Attio workspace relationship configuration\n\n    const payload = {\n      data: {\n        linked_records: [{\n          target_object: \"companies\",\n          target_record_id: companyId\n        }]\n      }\n    };\n    const peopleId = await getObjectIdBySlug(\"people\");\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${personId}`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    if (res.ok) {\n      console.log(`‚úÖ Successfully linked person to company`);\n    } else {\n      console.log(`‚ö†Ô∏è Person-company linking may need manual configuration`);\n    }\n  } catch (err) {\n    console.log(`‚ö†Ô∏è Person-company linking failed - may need workspace setup:`, err.message);\n  }\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('üîó Updating enhanced relationships:', data);\n\n  // Multi-contact relationship updates with team handling\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      // Skip if this is a team/role rather than person\n      if (isTeamOrRole(update.name)) {\n        console.log(`üö´ Skipping team/role relationship update: ${update.name}`);\n        continue;\n      }\n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n\n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n\n  // Internal department relationships for employee-employee CRM\n  if (data.internal_relationships) {\n    for (const relationship of data.internal_relationships) {\n      if (relationship.type === 'reporting' && relationship.manager && relationship.employee) {\n        // Link manager-employee relationships\n        const managerId = processedEntities.people[relationship.manager];\n        const employeeId = processedEntities.people[relationship.employee];\n        if (managerId && employeeId && ATTRIBUTE_IDS.manager) {\n          await updatePersonWithManager(employeeId, managerId);\n        }\n      }\n    }\n  }\n}\nasync function updatePersonWithManager(employeeId, managerId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {};\n  if (ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = managerId;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${employeeId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (res.ok) {\n    console.log(`‚úÖ Manager relationship updated: ${employeeId} -> ${managerId}`);\n  } else {\n    console.log(`‚ö†Ô∏è Failed to update manager relationship`);\n  }\n}\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {};\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role && !isTeamOrRole(data.role)) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    var _existing$values2;\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = (existing === null || existing === void 0 ? void 0 : (_existing$values2 = existing.values) === null || _existing$values2 === void 0 ? void 0 : _existing$values2[ATTRIBUTE_IDS.notes]) || \"\";\n    const separator = existingNotes ? \"\\n\\n\" : \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes + separator + data.notes;\n  }\n\n  // Handle team/department information\n  if (data.team && ATTRIBUTE_IDS.department) {\n    values[ATTRIBUTE_IDS.department] = data.team;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Person updated with enhanced sentiment:\", recordId);\n  return recordId;\n}\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('üè¢ Upserting company:', data.name);\n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\nasync function createCompany(data) {\n  var _json$data5, _json$data5$id, _json$data6, _json$data6$id;\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n\n  // Internal department support\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Company created:\", (_json$data5 = json.data) === null || _json$data5 === void 0 ? void 0 : (_json$data5$id = _json$data5.id) === null || _json$data5$id === void 0 ? void 0 : _json$data5$id.record_id);\n  return (_json$data6 = json.data) === null || _json$data6 === void 0 ? void 0 : (_json$data6$id = _json$data6.id) === null || _json$data6$id === void 0 ? void 0 : _json$data6$id.record_id;\n}\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Company updated:\", recordId);\n  return recordId;\n}\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  var _json$data7, _json$data8;\n  console.log('üìã Creating advanced task:', data.description);\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities with better entity resolution\n  const linkedRecords = [];\n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Advanced task created:\", (_json$data7 = json.data) === null || _json$data7 === void 0 ? void 0 : _json$data7.id);\n  return (_json$data8 = json.data) === null || _json$data8 === void 0 ? void 0 : _json$data8.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data9, _json$data9$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n  const json = await res.json();\n  const id = (_json$data9 = json.data) === null || _json$data9 === void 0 ? void 0 : (_json$data9$id = _json$data9.id) === null || _json$data9$id === void 0 ? void 0 : _json$data9$id.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\nasync function initializeAttributeIds() {\n  try {\n    var _validStagesCache$sta;\n    console.log('üîß Initializing advanced attribute IDs...');\n\n    // Load valid stage options first\n    await getValidStageOptions();\n\n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n\n    // Map to our attribute system - only override if we find the actual attribute\n    if (peopleAttrs.email_addresses) ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    if (peopleAttrs.phone_numbers) ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    if (peopleAttrs.notes) ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    if (peopleAttrs.role) ATTRIBUTE_IDS.role = peopleAttrs.role;\n    if (peopleAttrs.sentiment) ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    if (peopleAttrs.department) ATTRIBUTE_IDS.department = peopleAttrs.department;\n    if (peopleAttrs.employee_id) ATTRIBUTE_IDS.employee_id = peopleAttrs.employee_id;\n    if (peopleAttrs.manager) ATTRIBUTE_IDS.manager = peopleAttrs.manager;\n    if (dealAttrs.name) ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    if (dealAttrs.value) ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    if (dealAttrs.close_date) ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    if (dealAttrs.stage) ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    if (dealAttrs.probability) ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    if (dealAttrs.competitors) ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    if (dealAttrs.pain_points) ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    if (dealAttrs.internal_stakeholders) ATTRIBUTE_IDS.internal_stakeholders = dealAttrs.internal_stakeholders;\n    if (companyAttrs.name) ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    if (companyAttrs.relationship_health) ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    if (companyAttrs.expansion_opportunity) ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    if (companyAttrs.churn_risk) ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    if (companyAttrs.internal_department) ATTRIBUTE_IDS.internal_department = companyAttrs.internal_department;\n    console.log('‚úÖ Advanced attribute IDs initialized');\n    console.log('üìã Available stages:', (_validStagesCache$sta = validStagesCache.stages) === null || _validStagesCache$sta === void 0 ? void 0 : _validStagesCache$sta.map(s => s.title));\n    console.log('üîß Attribute mapping completed:', ATTRIBUTE_IDS);\n  } catch (err) {\n    console.error('‚ùå Failed to initialize advanced attribute IDs:', err);\n  }\n}\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const attributes = {};\n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'Discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n  const lowerText = text.toLowerCase();\n\n  // Stage detection - now uses proper stage names\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const SENTIMENT_INDICATORS = {\n    positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n    negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n    neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n  };\n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  const LEADING_INDICATORS = {\n    strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n    risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n    urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n    technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n  };\n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => lowerText.includes(signal));\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => lowerText.includes(signal));\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n  return analysis;\n}\nexport { sendToAttio, initializeAttributeIds, analyzeDealLanguage, DEAL_STAGES, mapToValidStage, getValidStageOptions, isTeamOrRole, namesAreSimilar };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","attributeCache","validStagesCache","ATTRIBUTE_IDS","name","email","phone","notes","role","sentiment","department","employee_id","manager","deal_name","deal_value","close_date","stage","probability","competitors","decision_maker","pain_points","deal_owner","internal_stakeholders","company_name","relationship_health","expansion_opportunity","churn_risk","internal_department","DEAL_STAGES","TEAM_ROLE_INDICATORS","getValidStageOptions","stages","dealsId","getObjectIdBySlug","stageAttributeId","res","fetch","headers","Authorization","ok","_json$data","_json$data$config","json","options","data","config","map","option","id","title","console","log","err","error","mapToValidStage","stageInput","validStages","lowerInput","toLowerCase","trim","s","exactMatch","find","validStageTitle","indicators","Object","entries","some","ind","includes","fuzzyMatch","partial","fallback","isTeamOrRole","lowerName","hasTeamIndicator","indicator","roleOnlyTitles","isRoleOnly","sendToAttio","updates","filteredUpdates","filter","item","type","companyUpdates","personUpdates","dealUpdates","taskUpdates","relationshipUpdates","processedEntities","companies","people","deals","companyId","upsertCompany","personId","upsertPersonEnhanced","company","linkPersonToCompany","dealId","upsertDealEnhanced","updateRelationships","upsertAdvancedTask","existing","queryPersonByEmail","queryPersonByNameEnhanced","updatePersonWithSentiment","record_id","createPersonWithSentiment","peopleId","payload","and","attribute","query","limit","method","body","JSON","stringify","length","query_mode","_existing$values","_existing$values$ATTR","_existing$values$ATTR2","existingName","values","full_name","namesAreSimilar","name1","name2","normalize","str","replace","n1","n2","words1","split","words2","overlap","word","Math","min","_json$data2","_json$data2$id","_json$data3","_json$data3$id","fullName","first_name","last_name","email_address","roleText","notesText","team","teamInfo","Error","queryDealByName","updateDealEnhanced","createDealEnhanced","_json$data4","_json$data4$id","value","parseFloat","toString","parseDealDate","matchedStageTitle","matchedStage","Array","isArray","join","linkedRecords","push","target_object","target_record_id","linked_records","recordId","keys","message","contact_updates","update","context","account_health","updateCompany","overall_score","expansion_notes","risk_level","internal_relationships","relationship","employee","managerId","employeeId","updatePersonWithManager","_existing$values2","getPersonById","existingNotes","separator","queryCompanyByName","createCompany","_json$data5","_json$data5$id","_json$data6","_json$data6$id","companiesId","_json$data7","_json$data8","description","content","format","deadline_at","due_date","is_completed","assignees","link_to_person_name","link_to_company","link_to_deal","dateStr","year","Date","getFullYear","toISOString","nextQuarter","setMonth","getMonth","slug","_json$data9","_json$data9$id","status","object_id","initializeAttributeIds","_validStagesCache$sta","peopleAttrs","getAttributeIds","dealAttrs","companyAttrs","email_addresses","phone_numbers","objectSlug","objectId","attributes","forEach","attr","api_slug","attribute_id","analyzeDealLanguage","text","analysis","urgency","buying_signals","risk_signals","value_indicators","lowerText","SENTIMENT_INDICATORS","positive","negative","neutral","positiveCount","negativeCount","LEADING_INDICATORS","strong_buying_signals","urgency_signals","technical_fit","signal","valueMatch","match"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/advanced-attio.js"],"sourcesContent":["// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\nconst objectCache = {};\nconst attributeCache = {};\nconst validStagesCache = {}; // Cache for valid stage options\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  department: \"2bdd1ea8-2983-49a4-8570-de7bd4c037a5\", // Add department field\n  employee_id: \"6ab0bbc9-4eba-4f4a-9ee2-f6c19ea9948a\", // For internal employees\n  manager: \"bd699e5b-79d5-4745-9f24-75a23d6cdfdf\", // Employee manager relationship\n  \n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  deal_owner: \"3b616cdc-1714-4db7-b99a-1007103ed6cf\",\n  internal_stakeholders: \"944fe8e7-a984-4da2-af86-f51c4ada7541\", // For employee-employee deals\n  \n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\",\n  internal_department: \"3c8bfbe9-9261-458f-a499-254582e5469f\" // For internal departments\n};\n\n// Deal stage mapping based on language patterns\nconst DEAL_STAGES = {\n  \"Qualified\": [\"qualified\", \"first call\", \"initial discussion\", \"introduction\"],\n  \"Discovery\": [\"discovery\", \"understanding\", \"requirements\", \"pain points\", \"challenges\"],\n  \"Demo\": [\"demo\", \"demonstration\", \"showing\", \"presentation\"],\n  \"Proposal\": [\"proposal\", \"quote\", \"pricing\", \"budget approved\"],\n  \"Negotiation\": [\"negotiation\", \"legal review\", \"contract\", \"terms\", \"negotiating\"],\n  \"Closed Won\": [\"closed won\", \"signed\", \"closed\", \"deal done\", \"approved\", \"won\"],\n  \"Closed Lost\": [\"closed lost\", \"went with\", \"chose\", \"lost to\", \"not moving forward\", \"lost\"]\n};\n\n// Team/Role indicators that should NOT be created as people\nconst TEAM_ROLE_INDICATORS = [\n  \"team\", \"department\", \"group\", \"division\", \"unit\", \"committee\", \n  \"board\", \"panel\", \"squad\", \"crew\", \"staff\", \"workforce\"\n];\n\n// Function to get valid stage options from Attio\nasync function getValidStageOptions() {\n  if (validStagesCache.stages) {\n    return validStagesCache.stages;\n  }\n\n  try {\n    const dealsId = await getObjectIdBySlug(\"deals\");\n    const stageAttributeId = ATTRIBUTE_IDS.stage;\n    \n    const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/attributes/${stageAttributeId}`, {\n      headers: { Authorization: BEARER_TOKEN }\n    });\n\n    if (res.ok) {\n      const json = await res.json();\n      const options = json.data?.config?.options || [];\n      validStagesCache.stages = options.map(option => ({\n        id: option.id,\n        title: option.title\n      }));\n      console.log('‚úÖ Valid stage options loaded:', validStagesCache.stages);\n      return validStagesCache.stages;\n    }\n  } catch (err) {\n    console.error('‚ùå Failed to load stage options:', err);\n  }\n\n  // Fallback to common stage names\n  validStagesCache.stages = [\n    { id: 'qualified', title: 'Qualified' },\n    { id: 'discovery', title: 'Discovery' },\n    { id: 'demo', title: 'Demo' },\n    { id: 'proposal', title: 'Proposal' },\n    { id: 'negotiation', title: 'Negotiation' },\n    { id: 'closed-won', title: 'Closed Won' },\n    { id: 'closed-lost', title: 'Closed Lost' }\n  ];\n  return validStagesCache.stages;\n}\n\n// Function to map stage name to valid Attio stage\nasync function mapToValidStage(stageInput) {\n  if (!stageInput) return null;\n\n  const validStages = await getValidStageOptions();\n  const lowerInput = stageInput.toLowerCase().trim();\n\n  console.log(`üéØ Mapping stage \"${stageInput}\" against valid stages:`, validStages.map(s => s.title));\n\n  // Exact match\n  const exactMatch = validStages.find(stage => stage.title.toLowerCase() === lowerInput);\n  if (exactMatch) {\n    console.log(`‚úÖ Exact stage match: \"${exactMatch.title}\" -> ID: ${exactMatch.id}`);\n    return exactMatch;\n  }\n\n  // Fuzzy match\n  for (const [validStageTitle, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(ind => lowerInput.includes(ind.toLowerCase()))) {\n      const fuzzyMatch = validStages.find(stage => \n        stage.title.toLowerCase() === validStageTitle.toLowerCase()\n      );\n      if (fuzzyMatch) {\n        console.log(`‚úÖ Fuzzy match found: \"${stageInput}\" -> \"${fuzzyMatch.title}\" via \"${validStageTitle}\"`);\n        return fuzzyMatch;\n      }\n    }\n  }\n\n  // Partial match\n  const partial = validStages.find(stage => \n    stage.title.toLowerCase().includes(lowerInput) || lowerInput.includes(stage.title.toLowerCase())\n  );\n  if (partial) {\n    console.log(`‚úÖ Partial stage match: \"${stageInput}\" -> \"${partial.title}\"`);\n    return partial;\n  }\n\n  // Default fallback\n  const fallback = validStages.find(stage => stage.title.toLowerCase().includes(\"discovery\") || stage.title.toLowerCase().includes(\"qualified\"));\n  if (fallback) {\n    console.log(`‚ö†Ô∏è Using fallback stage: \"${fallback.title}\"`);\n    return fallback;\n  }\n\n  console.log(`‚ùå No valid stage found for \"${stageInput}\"`);\n  return null;\n}\n\n\n// Check if a name represents a team/role rather than an individual person\nfunction isTeamOrRole(name) {\n  if (!name || typeof name !== 'string') return false;\n  \n  const lowerName = name.toLowerCase().trim();\n  \n  // Check for team indicators\n  const hasTeamIndicator = TEAM_ROLE_INDICATORS.some(indicator => \n    lowerName.includes(indicator)\n  );\n  \n  // Check for standalone role titles\n  const roleOnlyTitles = [\n    'cto', 'ceo', 'cfo', 'cmo', 'coo', 'cpo', 'ciso', 'vp', 'director', \n    'manager', 'lead', 'head', 'president', 'founder', 'owner'\n  ];\n  \n  const isRoleOnly = roleOnlyTitles.includes(lowerName);\n  \n  return hasTeamIndicator || isRoleOnly;\n}\n\nasync function sendToAttio(updates) {\n  console.log('üîÑ Processing advanced updates:', updates);\n  \n  // Filter out team/role entries from person creation\n  const filteredUpdates = updates.filter(item => {\n    if (item.type === 'person' && isTeamOrRole(item.name)) {\n      console.log(`üö´ Skipping team/role as person: \"${item.name}\"`);\n      return false;\n    }\n    return true;\n  });\n  \n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = filteredUpdates.filter(item => item.type === \"company\");\n  const personUpdates = filteredUpdates.filter(item => item.type === \"person\");\n  const dealUpdates = filteredUpdates.filter(item => item.type === \"deal\");\n  const taskUpdates = filteredUpdates.filter(item => item.type === \"task\");\n  const relationshipUpdates = filteredUpdates.filter(item => item.type === \"relationship\");\n  \n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n  \n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process company:\", item, err);\n    }\n  }\n  \n  // Process people with enhanced duplicate detection\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPersonEnhanced(item);\n      processedEntities.people[item.name] = personId;\n      \n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process person:\", item, err);\n    }\n  }\n  \n  // Process deals with enhanced linking\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDealEnhanced(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process deal:\", item, err);\n    }\n  }\n  \n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process relationship:\", item, err);\n    }\n  }\n  \n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPersonEnhanced(data) {\n  console.log('üë§ Enhanced upserting person:', data.name);\n  \n  // Enhanced search - try email first, then name variations\n  let existing = null;\n  \n  // Search by email if provided\n  if (data.email) {\n    existing = await queryPersonByEmail(data.email);\n    if (existing) {\n      console.log(`‚úÖ Found existing person by email: ${data.email}`);\n    }\n  }\n  \n  // Search by name variations if not found by email\n  if (!existing) {\n    existing = await queryPersonByNameEnhanced(data.name);\n  }\n  \n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    return await createPersonWithSentiment(data);\n  }\n}\n\nasync function queryPersonByEmail(email) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.email,\n        query: email\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\nasync function queryPersonByNameEnhanced(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  // Try exact match first\n  let payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name,\n        query_mode: \"exact_match\"\n      }]\n    },\n    limit: 1\n  };\n\n  let res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  let json = await res.json();\n  if (json.data && json.data.length > 0) {\n    console.log(`‚úÖ Found exact name match: ${name}`);\n    return json.data[0];\n  }\n\n  // Try fuzzy search\n  payload.filter.and[0].query_mode = \"contains\";\n  \n  res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  json = await res.json();\n  if (json.data && json.data.length > 0) {\n    // Check if it's a close match\n    const existing = json.data[0];\n    const existingName = existing.values?.[ATTRIBUTE_IDS.name]?.[0]?.full_name || \"\";\n    \n    if (namesAreSimilar(name, existingName)) {\n      console.log(`‚úÖ Found similar name match: \"${name}\" -> \"${existingName}\"`);\n      return existing;\n    }\n  }\n\n  return null;\n}\n\nfunction namesAreSimilar(name1, name2) {\n  if (!name1 || !name2) return false;\n  \n  const normalize = (str) => str.toLowerCase().trim().replace(/[^\\w\\s]/g, '');\n  const n1 = normalize(name1);\n  const n2 = normalize(name2);\n  \n  // Exact match\n  if (n1 === n2) return true;\n  \n  // Check if one is contained in the other (for partial names)\n  if (n1.includes(n2) || n2.includes(n1)) return true;\n  \n  // Check word overlap for compound names\n  const words1 = n1.split(/\\s+/);\n  const words2 = n2.split(/\\s+/);\n  const overlap = words1.filter(word => words2.includes(word));\n  \n  // Consider similar if significant word overlap\n  return overlap.length >= Math.min(words1.length, words2.length) * 0.5;\n}\n\nasync function createPersonWithSentiment(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes with role/team handling\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  \n  // Handle role and team information intelligently\n  let roleText = data.role || \"\";\n  let notesText = data.notes || \"\";\n  \n  // If this person is associated with a team, add it to their description\n  if (data.team || (data.role && isTeamOrRole(data.role))) {\n    const teamInfo = data.team || data.role;\n    notesText = notesText ? `${notesText}\\nTeam/Department: ${teamInfo}` : `Team/Department: ${teamInfo}`;\n    \n    if (ATTRIBUTE_IDS.department) {\n      values[ATTRIBUTE_IDS.department] = teamInfo;\n    }\n  }\n  \n  if (roleText && ATTRIBUTE_IDS.role && !isTeamOrRole(roleText)) {\n    values[ATTRIBUTE_IDS.role] = roleText;\n  }\n  \n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  \n  if (notesText && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = notesText;\n  }\n  \n  // Employee-specific fields\n  if (data.employee_id && ATTRIBUTE_IDS.employee_id) {\n    values[ATTRIBUTE_IDS.employee_id] = data.employee_id;\n  }\n  \n  if (data.manager && ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = data.manager;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Person created with enhanced attributes:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\n// ========== ENHANCED DEAL MANAGEMENT ==========\n\nasync function upsertDealEnhanced(data, processedEntities) {\n  console.log('üíº Enhanced upserting deal:', data.name);\n  \n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDealEnhanced(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDealEnhanced(data, processedEntities);\n  }\n}\n\nasync function createDealEnhanced(data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  if (data.deal_owner && ATTRIBUTE_IDS.deal_owner) {\n    values[ATTRIBUTE_IDS.deal_owner] = data.deal_owner;\n  }\n\n  // FIXED: Enhanced stage validation with better logging\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Validating deal stage: \"${data.stage}\"`);\n\n    const validStages = await getValidStageOptions();\n    const matchedStageTitle = await mapToValidStage(data.stage);\n    const matchedStage = validStages.find(stage => stage.title === matchedStageTitle);\n\n    if (matchedStage) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage set: \"${data.stage}\" -> \"${matchedStageTitle}\" -> ID: ${matchedStage.id}`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage assignment`);\n    }\n  } else {\n    console.log(`‚ÑπÔ∏è No stage provided or stage attribute not configured`);\n  }\n\n  \n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n  \n  // Employee-employee deal support\n  if (data.internal_stakeholders && ATTRIBUTE_IDS.internal_stakeholders) {\n    values[ATTRIBUTE_IDS.internal_stakeholders] = Array.isArray(data.internal_stakeholders) ? data.internal_stakeholders.join(', ') : data.internal_stakeholders;\n  }\n\n  const payload = { data: { values } };\n  \n  // Enhanced linking to companies and people\n  const linkedRecords = [];\n  \n  if (data.company && processedEntities.companies[data.company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    });\n  }\n  \n  // Link to decision maker if they exist\n  if (data.decision_maker && processedEntities.people[data.decision_maker]) {\n    linkedRecords.push({\n      target_object: \"people\", \n      target_record_id: processedEntities.people[data.decision_maker]\n    });\n  }\n  \n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n\n  console.log('üìù Creating deal with enhanced payload:', JSON.stringify(payload, null, 2));\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error('‚ùå Enhanced deal creation failed:', JSON.stringify(json, null, 2));\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n\n  const dealId = json.data?.id?.record_id;\n  console.log(\"‚úÖ Enhanced deal created:\", dealId);\n  \n  // Store deal ID for reverse linking\n  if (dealId) {\n    processedEntities.deals[data.name] = dealId;\n  }\n  \n  return dealId;\n}\n\nasync function updateDealEnhanced(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  \n  // FIXED: Enhanced stage validation for updates\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Validating updated deal stage: \"${data.stage}\"`);\n\n    const validStages = await getValidStageOptions();\n    const matchedStageTitle = await mapToValidStage(data.stage);\n    const matchedStage = validStages.find(stage => stage.title === matchedStageTitle);\n\n    if (matchedStage) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage updated: \"${data.stage}\" -> \"${matchedStageTitle}\" -> ID: ${matchedStage.id}`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage update`);\n    }\n  }\n\n  \n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n\n  if (Object.keys(values).length === 0) {\n    console.log('‚ÑπÔ∏è No deal updates needed');\n    return recordId;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Enhanced deal updated:\", recordId);\n  return recordId;\n}\n\n// ========== LINKING FUNCTIONALITY ==========\n\nasync function linkPersonToCompany(personId, companyId) {\n  console.log(`üîó Linking person ${personId} to company ${companyId}`);\n  \n  try {\n    // This creates a relationship between person and company\n    // Implementation depends on your Attio workspace relationship configuration\n    \n    const payload = {\n      data: {\n        linked_records: [{\n          target_object: \"companies\",\n          target_record_id: companyId\n        }]\n      }\n    };\n    \n    const peopleId = await getObjectIdBySlug(\"people\");\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${personId}`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (res.ok) {\n      console.log(`‚úÖ Successfully linked person to company`);\n    } else {\n      console.log(`‚ö†Ô∏è Person-company linking may need manual configuration`);\n    }\n  } catch (err) {\n    console.log(`‚ö†Ô∏è Person-company linking failed - may need workspace setup:`, err.message);\n  }\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('üîó Updating enhanced relationships:', data);\n  \n  // Multi-contact relationship updates with team handling\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      // Skip if this is a team/role rather than person\n      if (isTeamOrRole(update.name)) {\n        console.log(`üö´ Skipping team/role relationship update: ${update.name}`);\n        continue;\n      }\n      \n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n  \n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n  \n  // Internal department relationships for employee-employee CRM\n  if (data.internal_relationships) {\n    for (const relationship of data.internal_relationships) {\n      if (relationship.type === 'reporting' && relationship.manager && relationship.employee) {\n        // Link manager-employee relationships\n        const managerId = processedEntities.people[relationship.manager];\n        const employeeId = processedEntities.people[relationship.employee];\n        \n        if (managerId && employeeId && ATTRIBUTE_IDS.manager) {\n          await updatePersonWithManager(employeeId, managerId);\n        }\n      }\n    }\n  }\n}\n\nasync function updatePersonWithManager(employeeId, managerId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const values = {};\n  if (ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = managerId;\n  }\n  \n  const payload = JSON.stringify({ data: { values } });\n  \n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${employeeId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  \n  if (res.ok) {\n    console.log(`‚úÖ Manager relationship updated: ${employeeId} -> ${managerId}`);\n  } else {\n    console.log(`‚ö†Ô∏è Failed to update manager relationship`);\n  }\n}\n\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const values = {};\n  \n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role && !isTeamOrRole(data.role)) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = existing?.values?.[ATTRIBUTE_IDS.notes] || \"\";\n    const separator = existingNotes ? \"\\n\\n\" : \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes + separator + data.notes;\n  }\n  \n  // Handle team/department information\n  if (data.team && ATTRIBUTE_IDS.department) {\n    values[ATTRIBUTE_IDS.department] = data.team;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Person updated with enhanced sentiment:\", recordId);\n  return recordId;\n}\n\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('üè¢ Upserting company:', data.name);\n  \n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\n\nasync function createCompany(data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  \n  // Internal department support\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Company created:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Company updated:\", recordId);\n  return recordId;\n}\n\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  console.log('üìã Creating advanced task:', data.description);\n  \n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities with better entity resolution\n  const linkedRecords = [];\n  \n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  \n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\", \n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  \n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Advanced task created:\", json.data?.id);\n  return json.data?.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    \n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\nasync function initializeAttributeIds() {\n  try {\n    console.log('üîß Initializing advanced attribute IDs...');\n    \n    // Load valid stage options first\n    await getValidStageOptions();\n    \n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n    \n    // Map to our attribute system - only override if we find the actual attribute\n    if (peopleAttrs.email_addresses) ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    if (peopleAttrs.phone_numbers) ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    if (peopleAttrs.notes) ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    if (peopleAttrs.role) ATTRIBUTE_IDS.role = peopleAttrs.role;\n    if (peopleAttrs.sentiment) ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    if (peopleAttrs.department) ATTRIBUTE_IDS.department = peopleAttrs.department;\n    if (peopleAttrs.employee_id) ATTRIBUTE_IDS.employee_id = peopleAttrs.employee_id;\n    if (peopleAttrs.manager) ATTRIBUTE_IDS.manager = peopleAttrs.manager;\n    \n    if (dealAttrs.name) ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    if (dealAttrs.value) ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    if (dealAttrs.close_date) ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    if (dealAttrs.stage) ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    if (dealAttrs.probability) ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    if (dealAttrs.competitors) ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    if (dealAttrs.pain_points) ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    if (dealAttrs.internal_stakeholders) ATTRIBUTE_IDS.internal_stakeholders = dealAttrs.internal_stakeholders;\n    \n    if (companyAttrs.name) ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    if (companyAttrs.relationship_health) ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    if (companyAttrs.expansion_opportunity) ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    if (companyAttrs.churn_risk) ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    if (companyAttrs.internal_department) ATTRIBUTE_IDS.internal_department = companyAttrs.internal_department;\n    \n    console.log('‚úÖ Advanced attribute IDs initialized');\n    console.log('üìã Available stages:', validStagesCache.stages?.map(s => s.title));\n    console.log('üîß Attribute mapping completed:', ATTRIBUTE_IDS);\n  } catch (err) {\n    console.error('‚ùå Failed to initialize advanced attribute IDs:', err);\n  }\n}\n\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const attributes = {};\n  \n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'Discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n\n  const lowerText = text.toLowerCase();\n\n  // Stage detection - now uses proper stage names\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const SENTIMENT_INDICATORS = {\n    positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n    negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n    neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n  };\n  \n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  \n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';\n  else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  const LEADING_INDICATORS = {\n    strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n    risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n    urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n    technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n  };\n  \n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n\n  return analysis;\n}\n\nexport { \n  sendToAttio, \n  initializeAttributeIds, \n  analyzeDealLanguage,\n  DEAL_STAGES,\n  mapToValidStage,\n  getValidStageOptions,\n  isTeamOrRole,\n  namesAreSimilar\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}