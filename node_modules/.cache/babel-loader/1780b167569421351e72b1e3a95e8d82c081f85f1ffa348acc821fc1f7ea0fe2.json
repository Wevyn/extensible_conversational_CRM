{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {};\nconst attributeCache = {};\n\n// Dynamic attribute resolver\nasync function getAttributeId(objectSlug, attributeSlug) {\n  const cacheKey = `${objectSlug}.${attributeSlug}`;\n  if (attributeCache[cacheKey]) return attributeCache[cacheKey];\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const attr = json.data.find(a => a.slug === attributeSlug);\n  if (!attr) throw new Error(`Attribute \"${attributeSlug}\" not found`);\n  attributeCache[cacheKey] = attr.id;\n  return attr.id;\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ---------------- Main entry ----------------\n\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      const intent = detectIntent(item);\n      ensureFields(item);\n      if (item.type === \"person\") {\n        if (intent === \"delete\") await deletePerson(item.name);else await upsertPerson(item);\n      }\n      if (item.type === \"task\") {\n        if (intent === \"delete\") await deleteTaskByDescription(item.description);else await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\nfunction detectIntent(item) {\n  const text = (item.description || item.notes || \"\").toLowerCase();\n  if (text.includes(\"remove\") || text.includes(\"cancel\")) return \"delete\";\n  if (text.includes(\"update\") || text.includes(\"change\")) return \"update\";\n  return \"upsert\";\n}\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n    item.assignees = item.assignees || [];\n    item.linked_records = item.linked_records || [];\n  }\n}\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date !== null && date !== void 0 && date.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);else if (Date.parse(date)) d = new Date(date);\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer !== null && mer !== void 0 && mer.includes(\"p\") && h < 12) h += 12;\n      if (mer !== null && mer !== void 0 && mer.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\n// ---------------- Person ----------------\n\nasync function upsertPerson(data) {\n  var _json$data2;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(data.name);\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n  const firstNameAttr = await getAttributeId(\"people\", \"first_name\");\n  const lastNameAttr = await getAttributeId(\"people\", \"last_name\");\n  const notesAttr = await getAttributeId(\"people\", \"notes\");\n  const values = {\n    [firstNameAttr]: first,\n    [lastNameAttr]: last,\n    [notesAttr]: data.notes\n  };\n  const url = record ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}` : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n  const method = record ? \"PUT\" : \"POST\";\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      data: {\n        values\n      }\n    })\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Person sync error:\", json);\n  } else {\n    console.log(`‚úÖ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n  return (record === null || record === void 0 ? void 0 : record.id) || ((_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.id);\n}\nasync function deletePerson(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(name);\n  if (!record) return console.warn(\"‚ö†Ô∏è Person not found:\", name);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    console.log(\"üóëÔ∏è Deleted person:\", name);\n  } else {\n    console.error(\"‚ùå Failed to delete person:\", name);\n  }\n}\nasync function queryPersonByName(name) {\n  var _json$data3;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      name\n    },\n    limit: 1,\n    offset: 0\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return ((_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3[0]) || null;\n}\nasync function getPersonIdByName(name) {\n  const record = await queryPersonByName(name);\n  return (record === null || record === void 0 ? void 0 : record.id) || null;\n}\n\n// ---------------- Tasks ----------------\n\nasync function upsertTask(data) {\n  const taskObjectId = await getObjectIdBySlug(\"tasks\");\n  const peopleObjectId = await getObjectIdBySlug(\"people\");\n  const personId = data.link_to_person_name ? await getPersonIdByName(data.link_to_person_name) : null;\n  const linked_records = personId ? [{\n    object: peopleObjectId,\n    record: personId\n  }] : [];\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      linked_records,\n      assignees: data.assignees || []\n    }\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${taskObjectId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Task creation failed:\", json);\n  } else {\n    console.log(\"‚úÖ Task created:\", json);\n  }\n}\nasync function deleteTaskByDescription(desc) {\n  var _json$data4;\n  const taskObjectId = await getObjectIdBySlug(\"tasks\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${taskObjectId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      filter: {\n        description: desc\n      },\n      limit: 1,\n      offset: 0\n    })\n  });\n  const json = await res.json();\n  const match = (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : _json$data4[0];\n  if (!match) return;\n  const del = await fetch(`${ATTIO_API_BASE}/objects/${taskObjectId}/records/${match.id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (del.ok) {\n    console.log(\"üóëÔ∏è Deleted task:\", desc);\n  } else {\n    console.error(\"‚ùå Failed to delete task:\", desc);\n  }\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","attributeCache","getAttributeId","objectSlug","attributeSlug","cacheKey","objectId","getObjectIdBySlug","res","fetch","headers","Authorization","json","attr","data","find","a","slug","Error","id","_json$data","_json$data$id","object_id","sendToAttio","updates","item","intent","detectIntent","ensureFields","type","deletePerson","name","upsertPerson","deleteTaskByDescription","description","upsertTask","err","console","error","text","notes","toLowerCase","includes","due_date","parseDateTime","due_time","assignees","linked_records","date","time","d","Date","setDate","getDate","parse","t","mer","split","h","m","map","Number","setHours","toISOString","_json$data2","peopleId","record","queryPersonByName","first","rest","last","join","firstNameAttr","lastNameAttr","notesAttr","values","url","method","body","JSON","stringify","ok","log","warn","_json$data3","payload","filter","limit","offset","getPersonIdByName","taskObjectId","peopleObjectId","personId","link_to_person_name","object","content","format","deadline_at","is_completed","desc","_json$data4","match","del"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n\nconst objectCache = {};\nconst attributeCache = {};\n\n// Dynamic attribute resolver\nasync function getAttributeId(objectSlug, attributeSlug) {\n  const cacheKey = `${objectSlug}.${attributeSlug}`;\n  if (attributeCache[cacheKey]) return attributeCache[cacheKey];\n\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(\n    `${ATTIO_API_BASE}/objects/${objectId}/attributes`,\n    { headers: { Authorization: BEARER_TOKEN } }\n  );\n  const json = await res.json();\n\n  const attr = json.data.find((a) => a.slug === attributeSlug);\n  if (!attr) throw new Error(`Attribute \"${attributeSlug}\" not found`);\n\n  attributeCache[cacheKey] = attr.id;\n  return attr.id;\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ---------------- Main entry ----------------\n\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      const intent = detectIntent(item);\n      ensureFields(item);\n\n      if (item.type === \"person\") {\n        if (intent === \"delete\") await deletePerson(item.name);\n        else await upsertPerson(item);\n      }\n\n      if (item.type === \"task\") {\n        if (intent === \"delete\") await deleteTaskByDescription(item.description);\n        else await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\n\nfunction detectIntent(item) {\n  const text = (item.description || item.notes || \"\").toLowerCase();\n  if (text.includes(\"remove\") || text.includes(\"cancel\")) return \"delete\";\n  if (text.includes(\"update\") || text.includes(\"change\")) return \"update\";\n  return \"upsert\";\n}\n\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n  }\n\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n    item.assignees = item.assignees || [];\n    item.linked_records = item.linked_records || [];\n  }\n}\n\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date?.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);\n    else if (Date.parse(date)) d = new Date(date);\n\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer?.includes(\"p\") && h < 12) h += 12;\n      if (mer?.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\n// ---------------- Person ----------------\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(data.name);\n\n  const [first, ...rest] = data.name.split(\" \");\n  const last = rest.join(\" \");\n\n  const firstNameAttr = await getAttributeId(\"people\", \"first_name\");\n  const lastNameAttr = await getAttributeId(\"people\", \"last_name\");\n  const notesAttr = await getAttributeId(\"people\", \"notes\");\n\n  const values = {\n    [firstNameAttr]: first,\n    [lastNameAttr]: last,\n    [notesAttr]: data.notes\n  };\n\n  const url = record\n    ? `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`\n    : `${ATTIO_API_BASE}/objects/${peopleId}/records`;\n\n  const method = record ? \"PUT\" : \"POST\";\n  const res = await fetch(url, {\n    method,\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ data: { values } })\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Person sync error:\", json);\n  } else {\n    console.log(`‚úÖ Person ${record ? \"updated\" : \"created\"}:`, json);\n  }\n\n  return record?.id || json.data?.id;\n}\n\nasync function deletePerson(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const record = await queryPersonByName(name);\n  if (!record) return console.warn(\"‚ö†Ô∏è Person not found:\", name);\n\n  const res = await fetch(\n    `${ATTIO_API_BASE}/objects/${peopleId}/records/${record.id}`,\n    {\n      method: \"DELETE\",\n      headers: { Authorization: BEARER_TOKEN }\n    }\n  );\n\n  if (res.ok) {\n    console.log(\"üóëÔ∏è Deleted person:\", name);\n  } else {\n    console.error(\"‚ùå Failed to delete person:\", name);\n  }\n}\n\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const payload = {\n    filter: { name },\n    limit: 1,\n    offset: 0\n  };\n\n  const res = await fetch(\n    `${ATTIO_API_BASE}/objects/${peopleId}/records/query`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }\n  );\n\n  const json = await res.json();\n  return json.data?.[0] || null;\n}\n\nasync function getPersonIdByName(name) {\n  const record = await queryPersonByName(name);\n  return record?.id || null;\n}\n\n// ---------------- Tasks ----------------\n\nasync function upsertTask(data) {\n  const taskObjectId = await getObjectIdBySlug(\"tasks\");\n  const peopleObjectId = await getObjectIdBySlug(\"people\");\n\n  const personId = data.link_to_person_name\n    ? await getPersonIdByName(data.link_to_person_name)\n    : null;\n\n  const linked_records = personId\n    ? [{ object: peopleObjectId, record: personId }]\n    : [];\n\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      linked_records,\n      assignees: data.assignees || []\n    }\n  };\n\n  const res = await fetch(\n    `${ATTIO_API_BASE}/objects/${taskObjectId}/records`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }\n  );\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Task creation failed:\", json);\n  } else {\n    console.log(\"‚úÖ Task created:\", json);\n  }\n}\n\nasync function deleteTaskByDescription(desc) {\n  const taskObjectId = await getObjectIdBySlug(\"tasks\");\n  const res = await fetch(\n    `${ATTIO_API_BASE}/objects/${taskObjectId}/records/query`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        filter: { description: desc },\n        limit: 1,\n        offset: 0\n      })\n    }\n  );\n\n  const json = await res.json();\n  const match = json.data?.[0];\n  if (!match) return;\n\n  const del = await fetch(\n    `${ATTIO_API_BASE}/objects/${taskObjectId}/records/${match.id}`,\n    {\n      method: \"DELETE\",\n      headers: { Authorization: BEARER_TOKEN }\n    }\n  );\n\n  if (del.ok) {\n    console.log(\"üóëÔ∏è Deleted task:\", desc);\n  } else {\n    console.error(\"‚ùå Failed to delete task:\", desc);\n  }\n}\n\nexport { sendToAttio };"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAG,0BAA0B;AACjD,MAAMC,YAAY,GAAG,yEAAyE;AAG9F,MAAMC,WAAW,GAAG,CAAC,CAAC;AACtB,MAAMC,cAAc,GAAG,CAAC,CAAC;;AAEzB;AACA,eAAeC,cAAcA,CAACC,UAAU,EAAEC,aAAa,EAAE;EACvD,MAAMC,QAAQ,GAAG,GAAGF,UAAU,IAAIC,aAAa,EAAE;EACjD,IAAIH,cAAc,CAACI,QAAQ,CAAC,EAAE,OAAOJ,cAAc,CAACI,QAAQ,CAAC;EAE7D,MAAMC,QAAQ,GAAG,MAAMC,iBAAiB,CAACJ,UAAU,CAAC;EACpD,MAAMK,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGX,cAAc,YAAYQ,QAAQ,aAAa,EAClD;IAAEI,OAAO,EAAE;MAAEC,aAAa,EAAEZ;IAAa;EAAE,CAC7C,CAAC;EACD,MAAMa,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;EAE7B,MAAMC,IAAI,GAAGD,IAAI,CAACE,IAAI,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKb,aAAa,CAAC;EAC5D,IAAI,CAACS,IAAI,EAAE,MAAM,IAAIK,KAAK,CAAC,cAAcd,aAAa,aAAa,CAAC;EAEpEH,cAAc,CAACI,QAAQ,CAAC,GAAGQ,IAAI,CAACM,EAAE;EAClC,OAAON,IAAI,CAACM,EAAE;AAChB;AAEA,eAAeZ,iBAAiBA,CAACU,IAAI,EAAE;EAAA,IAAAG,UAAA,EAAAC,aAAA;EACrC,IAAIrB,WAAW,CAACiB,IAAI,CAAC,EAAE,OAAOjB,WAAW,CAACiB,IAAI,CAAC;EAE/C,MAAMT,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGX,cAAc,YAAYmB,IAAI,EAAE,EAAE;IAC3DP,OAAO,EAAE;MAAEC,aAAa,EAAEZ;IAAa;EACzC,CAAC,CAAC;EACF,MAAMa,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;EAC7B,MAAMO,EAAE,IAAAC,UAAA,GAAGR,IAAI,CAACE,IAAI,cAAAM,UAAA,wBAAAC,aAAA,GAATD,UAAA,CAAWD,EAAE,cAAAE,aAAA,uBAAbA,aAAA,CAAeC,SAAS;EACnC,IAAI,CAACH,EAAE,EAAE,MAAM,IAAID,KAAK,CAAC,iCAAiCD,IAAI,EAAE,CAAC;EACjEjB,WAAW,CAACiB,IAAI,CAAC,GAAGE,EAAE;EACtB,OAAOA,EAAE;AACX;;AAEA;;AAEA,eAAeI,WAAWA,CAACC,OAAO,EAAE;EAClC,KAAK,MAAMC,IAAI,IAAID,OAAO,EAAE;IAC1B,IAAI;MACF,MAAME,MAAM,GAAGC,YAAY,CAACF,IAAI,CAAC;MACjCG,YAAY,CAACH,IAAI,CAAC;MAElB,IAAIA,IAAI,CAACI,IAAI,KAAK,QAAQ,EAAE;QAC1B,IAAIH,MAAM,KAAK,QAAQ,EAAE,MAAMI,YAAY,CAACL,IAAI,CAACM,IAAI,CAAC,CAAC,KAClD,MAAMC,YAAY,CAACP,IAAI,CAAC;MAC/B;MAEA,IAAIA,IAAI,CAACI,IAAI,KAAK,MAAM,EAAE;QACxB,IAAIH,MAAM,KAAK,QAAQ,EAAE,MAAMO,uBAAuB,CAACR,IAAI,CAACS,WAAW,CAAC,CAAC,KACpE,MAAMC,UAAU,CAACV,IAAI,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEb,IAAI,EAAEW,GAAG,CAAC;IACvD;EACF;AACF;AAEA,SAAST,YAAYA,CAACF,IAAI,EAAE;EAC1B,MAAMc,IAAI,GAAG,CAACd,IAAI,CAACS,WAAW,IAAIT,IAAI,CAACe,KAAK,IAAI,EAAE,EAAEC,WAAW,CAAC,CAAC;EACjE,IAAIF,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,IAAIH,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,QAAQ;EACvE,IAAIH,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,IAAIH,IAAI,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,QAAQ;EACvE,OAAO,QAAQ;AACjB;AAEA,SAASd,YAAYA,CAACH,IAAI,EAAE;EAC1B,IAAIA,IAAI,CAACI,IAAI,KAAK,QAAQ,EAAE;IAC1BJ,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACM,IAAI,IAAI,SAAS;IAClCN,IAAI,CAACe,KAAK,GAAGf,IAAI,CAACe,KAAK,IAAI,EAAE;EAC/B;EAEA,IAAIf,IAAI,CAACI,IAAI,KAAK,MAAM,EAAE;IACxBJ,IAAI,CAACS,WAAW,GAAGT,IAAI,CAACS,WAAW,IAAI,eAAe;IACtDT,IAAI,CAACkB,QAAQ,GAAGC,aAAa,CAACnB,IAAI,CAACkB,QAAQ,EAAElB,IAAI,CAACoB,QAAQ,CAAC;IAC3DpB,IAAI,CAACqB,SAAS,GAAGrB,IAAI,CAACqB,SAAS,IAAI,EAAE;IACrCrB,IAAI,CAACsB,cAAc,GAAGtB,IAAI,CAACsB,cAAc,IAAI,EAAE;EACjD;AACF;AAEA,SAASH,aAAaA,CAACI,IAAI,EAAEC,IAAI,EAAE;EACjC,IAAI;IACF,IAAIC,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC;IAClB,IAAIH,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEP,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAEQ,CAAC,CAACE,OAAO,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KACpE,IAAIF,IAAI,CAACG,KAAK,CAACN,IAAI,CAAC,EAAEE,CAAC,GAAG,IAAIC,IAAI,CAACH,IAAI,CAAC;IAE7C,IAAIC,IAAI,EAAE;MACR,MAAM,CAACM,CAAC,EAAEC,GAAG,CAAC,GAAGP,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC;MAChC,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGJ,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACG,GAAG,CAACC,MAAM,CAAC;MACrC,IAAIL,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEd,QAAQ,CAAC,GAAG,CAAC,IAAIgB,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,EAAE;MACzC,IAAIF,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEd,QAAQ,CAAC,GAAG,CAAC,IAAIgB,CAAC,KAAK,EAAE,EAAEA,CAAC,GAAG,CAAC;MACzCR,CAAC,CAACY,QAAQ,CAACJ,CAAC,IAAI,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClC;IAEA,OAAOT,CAAC,CAACa,WAAW,CAAC,CAAC;EACxB,CAAC,CAAC,MAAM;IACN,OAAO,IAAIZ,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC,CAAC;EACjC;AACF;;AAEA;;AAEA,eAAe/B,YAAYA,CAAClB,IAAI,EAAE;EAAA,IAAAkD,WAAA;EAChC,MAAMC,QAAQ,GAAG,MAAM1D,iBAAiB,CAAC,QAAQ,CAAC;EAClD,MAAM2D,MAAM,GAAG,MAAMC,iBAAiB,CAACrD,IAAI,CAACiB,IAAI,CAAC;EAEjD,MAAM,CAACqC,KAAK,EAAE,GAAGC,IAAI,CAAC,GAAGvD,IAAI,CAACiB,IAAI,CAAC0B,KAAK,CAAC,GAAG,CAAC;EAC7C,MAAMa,IAAI,GAAGD,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC;EAE3B,MAAMC,aAAa,GAAG,MAAMtE,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC;EAClE,MAAMuE,YAAY,GAAG,MAAMvE,cAAc,CAAC,QAAQ,EAAE,WAAW,CAAC;EAChE,MAAMwE,SAAS,GAAG,MAAMxE,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC;EAEzD,MAAMyE,MAAM,GAAG;IACb,CAACH,aAAa,GAAGJ,KAAK;IACtB,CAACK,YAAY,GAAGH,IAAI;IACpB,CAACI,SAAS,GAAG5D,IAAI,CAAC0B;EACpB,CAAC;EAED,MAAMoC,GAAG,GAAGV,MAAM,GACd,GAAGpE,cAAc,YAAYmE,QAAQ,YAAYC,MAAM,CAAC/C,EAAE,EAAE,GAC5D,GAAGrB,cAAc,YAAYmE,QAAQ,UAAU;EAEnD,MAAMY,MAAM,GAAGX,MAAM,GAAG,KAAK,GAAG,MAAM;EACtC,MAAM1D,GAAG,GAAG,MAAMC,KAAK,CAACmE,GAAG,EAAE;IAC3BC,MAAM;IACNnE,OAAO,EAAE;MACPC,aAAa,EAAEZ,YAAY;MAC3B,cAAc,EAAE;IAClB,CAAC;IACD+E,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAElE,IAAI,EAAE;QAAE6D;MAAO;IAAE,CAAC;EAC3C,CAAC,CAAC;EAEF,MAAM/D,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACJ,GAAG,CAACyE,EAAE,EAAE;IACX5C,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAE1B,IAAI,CAAC;EAC7C,CAAC,MAAM;IACLyB,OAAO,CAAC6C,GAAG,CAAC,YAAYhB,MAAM,GAAG,SAAS,GAAG,SAAS,GAAG,EAAEtD,IAAI,CAAC;EAClE;EAEA,OAAO,CAAAsD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE/C,EAAE,OAAA6C,WAAA,GAAIpD,IAAI,CAACE,IAAI,cAAAkD,WAAA,uBAATA,WAAA,CAAW7C,EAAE;AACpC;AAEA,eAAeW,YAAYA,CAACC,IAAI,EAAE;EAChC,MAAMkC,QAAQ,GAAG,MAAM1D,iBAAiB,CAAC,QAAQ,CAAC;EAClD,MAAM2D,MAAM,GAAG,MAAMC,iBAAiB,CAACpC,IAAI,CAAC;EAC5C,IAAI,CAACmC,MAAM,EAAE,OAAO7B,OAAO,CAAC8C,IAAI,CAAC,sBAAsB,EAAEpD,IAAI,CAAC;EAE9D,MAAMvB,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGX,cAAc,YAAYmE,QAAQ,YAAYC,MAAM,CAAC/C,EAAE,EAAE,EAC5D;IACE0D,MAAM,EAAE,QAAQ;IAChBnE,OAAO,EAAE;MAAEC,aAAa,EAAEZ;IAAa;EACzC,CACF,CAAC;EAED,IAAIS,GAAG,CAACyE,EAAE,EAAE;IACV5C,OAAO,CAAC6C,GAAG,CAAC,qBAAqB,EAAEnD,IAAI,CAAC;EAC1C,CAAC,MAAM;IACLM,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEP,IAAI,CAAC;EACnD;AACF;AAEA,eAAeoC,iBAAiBA,CAACpC,IAAI,EAAE;EAAA,IAAAqD,WAAA;EACrC,MAAMnB,QAAQ,GAAG,MAAM1D,iBAAiB,CAAC,QAAQ,CAAC;EAElD,MAAM8E,OAAO,GAAG;IACdC,MAAM,EAAE;MAAEvD;IAAK,CAAC;IAChBwD,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACV,CAAC;EAED,MAAMhF,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGX,cAAc,YAAYmE,QAAQ,gBAAgB,EACrD;IACEY,MAAM,EAAE,MAAM;IACdnE,OAAO,EAAE;MACPC,aAAa,EAAEZ,YAAY;MAC3B,cAAc,EAAE;IAClB,CAAC;IACD+E,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,OAAO;EAC9B,CACF,CAAC;EAED,MAAMzE,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;EAC7B,OAAO,EAAAwE,WAAA,GAAAxE,IAAI,CAACE,IAAI,cAAAsE,WAAA,uBAATA,WAAA,CAAY,CAAC,CAAC,KAAI,IAAI;AAC/B;AAEA,eAAeK,iBAAiBA,CAAC1D,IAAI,EAAE;EACrC,MAAMmC,MAAM,GAAG,MAAMC,iBAAiB,CAACpC,IAAI,CAAC;EAC5C,OAAO,CAAAmC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE/C,EAAE,KAAI,IAAI;AAC3B;;AAEA;;AAEA,eAAegB,UAAUA,CAACrB,IAAI,EAAE;EAC9B,MAAM4E,YAAY,GAAG,MAAMnF,iBAAiB,CAAC,OAAO,CAAC;EACrD,MAAMoF,cAAc,GAAG,MAAMpF,iBAAiB,CAAC,QAAQ,CAAC;EAExD,MAAMqF,QAAQ,GAAG9E,IAAI,CAAC+E,mBAAmB,GACrC,MAAMJ,iBAAiB,CAAC3E,IAAI,CAAC+E,mBAAmB,CAAC,GACjD,IAAI;EAER,MAAM9C,cAAc,GAAG6C,QAAQ,GAC3B,CAAC;IAAEE,MAAM,EAAEH,cAAc;IAAEzB,MAAM,EAAE0B;EAAS,CAAC,CAAC,GAC9C,EAAE;EAEN,MAAMP,OAAO,GAAG;IACdvE,IAAI,EAAE;MACJiF,OAAO,EAAEjF,IAAI,CAACoB,WAAW;MACzB8D,MAAM,EAAE,WAAW;MACnBC,WAAW,EAAEnF,IAAI,CAAC6B,QAAQ;MAC1BuD,YAAY,EAAE,KAAK;MACnBnD,cAAc;MACdD,SAAS,EAAEhC,IAAI,CAACgC,SAAS,IAAI;IAC/B;EACF,CAAC;EAED,MAAMtC,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGX,cAAc,YAAY4F,YAAY,UAAU,EACnD;IACEb,MAAM,EAAE,MAAM;IACdnE,OAAO,EAAE;MACPC,aAAa,EAAEZ,YAAY;MAC3B,cAAc,EAAE;IAClB,CAAC;IACD+E,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,OAAO;EAC9B,CACF,CAAC;EAED,MAAMzE,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;EAC7B,IAAI,CAACJ,GAAG,CAACyE,EAAE,EAAE;IACX5C,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAE1B,IAAI,CAAC;EAChD,CAAC,MAAM;IACLyB,OAAO,CAAC6C,GAAG,CAAC,iBAAiB,EAAEtE,IAAI,CAAC;EACtC;AACF;AAEA,eAAeqB,uBAAuBA,CAACkE,IAAI,EAAE;EAAA,IAAAC,WAAA;EAC3C,MAAMV,YAAY,GAAG,MAAMnF,iBAAiB,CAAC,OAAO,CAAC;EACrD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGX,cAAc,YAAY4F,YAAY,gBAAgB,EACzD;IACEb,MAAM,EAAE,MAAM;IACdnE,OAAO,EAAE;MACPC,aAAa,EAAEZ,YAAY;MAC3B,cAAc,EAAE;IAClB,CAAC;IACD+E,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBM,MAAM,EAAE;QAAEpD,WAAW,EAAEiE;MAAK,CAAC;MAC7BZ,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC;EACH,CACF,CAAC;EAED,MAAM5E,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,CAAC,CAAC;EAC7B,MAAMyF,KAAK,IAAAD,WAAA,GAAGxF,IAAI,CAACE,IAAI,cAAAsF,WAAA,uBAATA,WAAA,CAAY,CAAC,CAAC;EAC5B,IAAI,CAACC,KAAK,EAAE;EAEZ,MAAMC,GAAG,GAAG,MAAM7F,KAAK,CACrB,GAAGX,cAAc,YAAY4F,YAAY,YAAYW,KAAK,CAAClF,EAAE,EAAE,EAC/D;IACE0D,MAAM,EAAE,QAAQ;IAChBnE,OAAO,EAAE;MAAEC,aAAa,EAAEZ;IAAa;EACzC,CACF,CAAC;EAED,IAAIuG,GAAG,CAACrB,EAAE,EAAE;IACV5C,OAAO,CAAC6C,GAAG,CAAC,mBAAmB,EAAEiB,IAAI,CAAC;EACxC,CAAC,MAAM;IACL9D,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAE6D,IAAI,CAAC;EACjD;AACF;AAEA,SAAS5E,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}