{"ast":null,"code":"// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {}; // caches object_ids like \"people\"\n\nconst ATTRIBUTE_IDS = {\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\"\n};\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      ensureFields(item);\n      if (item.type === \"person\") {\n        await upsertPerson(item);\n      }\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n    const [first, ...rest] = item.name.split(\" \");\n    item.first_name = item.first_name || first || \"Unknown\";\n    item.last_name = item.last_name || rest.join(\" \") || \"\";\n  }\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n  }\n}\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date !== null && date !== void 0 && date.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);else if (Date.parse(date)) d = new Date(date);\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\").map(Number);\n      if (mer !== null && mer !== void 0 && mer.includes(\"p\") && h < 12) h += 12;\n      if (mer !== null && mer !== void 0 && mer.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data, _json$data$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const id = (_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$id = _json$data.id) === null || _json$data$id === void 0 ? void 0 : _json$data$id.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  var _json$data2, _json$data2$id;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Person creation error:\", json);\n  } else {\n    console.log(\"‚úÖ Person created:\", json);\n  }\n  return (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : (_json$data2$id = _json$data2.id) === null || _json$data2$id === void 0 ? void 0 : _json$data2$id.record_id;\n}\nasync function queryPersonByName(name) {\n  var _json$data3;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      name\n    },\n    limit: 1,\n    offset: 0\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return ((_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : _json$data3[0]) || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  const personTag = data.link_to_person_name ? `@${data.link_to_person_name}` : \"\";\n  const taskContent = `${personTag} ${data.description}`.trim();\n  const payload = {\n    data: {\n      content: taskContent,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: []\n    }\n  };\n  console.log(\"üì¶ Task payload:\", payload);\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"‚úÖ Task created:\", json);\n  } else {\n    console.error(\"‚ùå Task creation failed:\", json);\n  }\n}\nexport { sendToAttio };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","ATTRIBUTE_IDS","name","sendToAttio","updates","item","ensureFields","type","upsertPerson","upsertTask","err","console","error","notes","first","rest","split","first_name","last_name","join","description","due_date","parseDateTime","due_time","date","time","d","Date","toLowerCase","includes","setDate","getDate","parse","t","mer","h","m","map","Number","setHours","toISOString","getObjectIdBySlug","slug","_json$data","_json$data$id","res","fetch","headers","Authorization","json","id","data","object_id","Error","_json$data2","_json$data2$id","peopleId","fullName","trim","values","full_name","payload","JSON","stringify","method","body","ok","log","record_id","queryPersonByName","_json$data3","filter","limit","offset","personTag","link_to_person_name","taskContent","content","format","deadline_at","is_completed","assignees"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/attio.js"],"sourcesContent":["// attio.js\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\n\nconst objectCache = {}; // caches object_ids like \"people\"\n\nconst ATTRIBUTE_IDS = {\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\"\n};\n\n\nasync function sendToAttio(updates) {\n  for (const item of updates) {\n    try {\n      ensureFields(item);\n\n      if (item.type === \"person\") {\n        await upsertPerson(item);\n      }\n\n      if (item.type === \"task\") {\n        await upsertTask(item);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process item:\", item, err);\n    }\n  }\n}\n\nfunction ensureFields(item) {\n  if (item.type === \"person\") {\n    item.name = item.name || \"Unknown\";\n    item.notes = item.notes || \"\";\n\n    const [first, ...rest] = item.name.split(\" \");\n    item.first_name = item.first_name || first || \"Unknown\";\n    item.last_name = item.last_name || rest.join(\" \") || \"\";\n  }\n\n  if (item.type === \"task\") {\n    item.description = item.description || \"Untitled task\";\n    item.due_date = parseDateTime(item.due_date, item.due_time);\n  }\n}\n\n\nfunction parseDateTime(date, time) {\n  try {\n    let d = new Date();\n    if (date?.toLowerCase().includes(\"tomorrow\")) d.setDate(d.getDate() + 1);\n    else if (Date.parse(date)) d = new Date(date);\n\n    if (time) {\n      const [t, mer] = time.split(\" \");\n      let [h, m] = t.split(\":\" ).map(Number);\n      if (mer?.includes(\"p\") && h < 12) h += 12;\n      if (mer?.includes(\"a\") && h === 12) h = 0;\n      d.setHours(h || 0, m || 0, 0, 0);\n    }\n\n    return d.toISOString();\n  } catch {\n    return new Date().toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\n// ========== PERSONS ==========\n\nasync function upsertPerson(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error(\"‚ùå Person creation error:\", json);\n  } else {\n    console.log(\"‚úÖ Person created:\", json);\n  }\n\n  return json.data?.id?.record_id;\n}\n\n\n\nasync function queryPersonByName(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  const payload = {\n    filter: { name },\n    limit: 1,\n    offset: 0\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data?.[0] || null;\n}\n\n// ========== TASKS ==========\n\nasync function upsertTask(data) {\n  const personTag = data.link_to_person_name ? `@${data.link_to_person_name}` : \"\";\n  const taskContent = `${personTag} ${data.description}`.trim();\n\n  const payload = {\n    data: {\n      content: taskContent,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: []\n    }\n  };\n\n  console.log(\"üì¶ Task payload:\", payload);\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (res.ok) {\n    console.log(\"‚úÖ Task created:\", json);\n  } else {\n    console.error(\"‚ùå Task creation failed:\", json);\n  }\n}\n\n\nexport { sendToAttio };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}