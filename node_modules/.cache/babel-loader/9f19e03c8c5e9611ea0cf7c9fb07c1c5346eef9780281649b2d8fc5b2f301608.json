{"ast":null,"code":"// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\nconst objectCache = {};\nconst attributeCache = {};\nconst validStagesCache = {}; // Cache for valid stage options\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  department: \"2bdd1ea8-2983-49a4-8570-de7bd4c037a5\",\n  // Add department field\n  employee_id: \"6ab0bbc9-4eba-4f4a-9ee2-f6c19ea9948a\",\n  // For internal employees\n  manager: \"bd699e5b-79d5-4745-9f24-75a23d6cdfdf\",\n  // Employee manager relationship\n\n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  deal_owner: \"3b616cdc-1714-4db7-b99a-1007103ed6cf\",\n  internal_stakeholders: \"944fe8e7-a984-4da2-af86-f51c4ada7541\",\n  // For employee-employee deals\n\n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\",\n  internal_department: \"3c8bfbe9-9261-458f-a499-254582e5469f\",\n  // For internal departments\n  // User attributes\n  user_person: \"2aea9c22-ab6b-485d-9846-760c50651684\",\n  // Relationship to person\n  user_id: \"babd4ce9-e33b-463a-828f-e94213280e7b\",\n  // User ID (same as person's record_id)\n  user_email: \"7b008926-28d2-44c1-af08-1700251db9da\" // Primary email for user\n};\n\n// Deal stage mapping based on language patterns\nconst DEAL_STAGES = {\n  \"Lead\": [\"lead\", \"qualified\", \"first call\", \"initial discussion\", \"introduction\", \"prospect\"],\n  \"In Progress\": [\"in progress\", \"discovery\", \"demo\", \"demonstration\", \"presentation\", \"proposal\", \"negotiation\", \"contract\", \"terms\"],\n  \"Won\": [\"won\", \"closed won\", \"signed\", \"closed\", \"deal done\", \"approved\"],\n  \"Lost\": [\"lost\", \"closed lost\", \"went with\", \"chose\", \"not moving forward\", \"lost to\"]\n};\n\n// Team/Role indicators that should NOT be created as people\nconst TEAM_ROLE_INDICATORS = [\"team\", \"department\", \"group\", \"division\", \"unit\", \"committee\", \"board\", \"panel\", \"squad\", \"crew\", \"staff\", \"workforce\"];\n\n// Function to get valid stage options from Attio\nasync function getValidStageOptions() {\n  if (validStagesCache.stages && validStagesCache.stages.length > 0) {\n    console.log('üîÑ Using cached stages:', validStagesCache.stages);\n    return validStagesCache.stages;\n  }\n  try {\n    const dealsId = await getObjectIdBySlug(\"deals\");\n    const stageAttributeId = \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\";\n    console.log(`üîç Loading stage options for deals:${dealsId}, attribute:${stageAttributeId}`);\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/attributes/${stageAttributeId}`, {\n      headers: {\n        Authorization: BEARER_TOKEN\n      }\n    });\n    if (res.ok) {\n      var _json$data, _json$data$config, _json$data2, _json$config;\n      const json = await res.json();\n      console.log('üìã Stage attribute response:', json);\n      const options = ((_json$data = json.data) === null || _json$data === void 0 ? void 0 : (_json$data$config = _json$data.config) === null || _json$data$config === void 0 ? void 0 : _json$data$config.options) || ((_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.options) || ((_json$config = json.config) === null || _json$config === void 0 ? void 0 : _json$config.options) || [];\n      if (options && options.length > 0) {\n        validStagesCache.stages = options.map(option => ({\n          id: option.id || option.value,\n          title: option.title || option.label || option.name\n        }));\n        console.log('‚úÖ Valid stage options loaded from Attio:', validStagesCache.stages);\n        return validStagesCache.stages;\n      }\n    } else {\n      console.error('‚ùå Failed to fetch stage attribute:', res.status);\n    }\n  } catch (err) {\n    console.error('‚ùå Failed to load stage options:', err);\n  }\n\n  // Use your actual Attio stages with real IDs\n  console.log('‚ö†Ô∏è Using actual Attio stage IDs');\n  validStagesCache.stages = [{\n    id: 'f35a5f1b-5558-4f56-971c-c9e9cae43a59',\n    title: 'Lead'\n  }, {\n    id: '78c45eff-9ddf-4635-b177-473c1b1eb993',\n    title: 'In Progress'\n  }, {\n    id: '2976ec08-c2b1-4e38-9d43-659e7050a937',\n    title: 'Won'\n  }, {\n    id: '8af40582-e196-4abf-b373-a9f4dcb0674d',\n    title: 'Lost'\n  }];\n  return validStagesCache.stages;\n}\n\n// Function to map stage name to valid Attio stage\n// Fixed stage mapping function - replace the existing mapToValidStage function\nasync function mapToValidStage(stageInput) {\n  if (!stageInput) return null;\n  const validStages = await getValidStageOptions();\n  const lowerInput = stageInput.toLowerCase().trim();\n  console.log(`üéØ Mapping stage \"${stageInput}\" against valid stages:`, validStages.map(s => s.title));\n\n  // 1. EXACT MATCH (case insensitive) - this should catch \"Demo\" -> \"Demo\"\n  const exactMatch = validStages.find(stage => stage.title.toLowerCase() === lowerInput);\n  if (exactMatch) {\n    console.log(`‚úÖ Exact stage match: \"${exactMatch.title}\" -> ID: ${exactMatch.id}`);\n    return exactMatch;\n  }\n\n  // 2. PARTIAL MATCH - check if input contains stage name or vice versa\n  const partialMatch = validStages.find(stage => {\n    const stageTitle = stage.title.toLowerCase();\n    return stageTitle.includes(lowerInput) || lowerInput.includes(stageTitle);\n  });\n  if (partialMatch) {\n    console.log(`‚úÖ Partial stage match: \"${stageInput}\" -> \"${partialMatch.title}\"`);\n    return partialMatch;\n  }\n\n  // 3. FUZZY MATCH using DEAL_STAGES patterns\n  for (const [validStageTitle, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(ind => lowerInput.includes(ind.toLowerCase()))) {\n      const fuzzyMatch = validStages.find(stage => stage.title.toLowerCase() === validStageTitle.toLowerCase());\n      if (fuzzyMatch) {\n        console.log(`‚úÖ Fuzzy match found: \"${stageInput}\" -> \"${fuzzyMatch.title}\" via \"${validStageTitle}\"`);\n        return fuzzyMatch;\n      }\n    }\n  }\n\n  // 4. DEFAULT FALLBACK\n  const fallback = validStages.find(stage => stage.title.toLowerCase().includes(\"discovery\") || stage.title.toLowerCase().includes(\"qualified\"));\n  if (fallback) {\n    console.log(`‚ö†Ô∏è Using fallback stage: \"${fallback.title}\"`);\n    return fallback;\n  }\n  console.log(`‚ùå No valid stage found for \"${stageInput}\"`);\n  return null;\n}\n\n// Check if a name represents a team/role rather than an individual person\nfunction isTeamOrRole(name) {\n  if (!name || typeof name !== 'string') return false;\n  const lowerName = name.toLowerCase().trim();\n\n  // Check for team indicators\n  const hasTeamIndicator = TEAM_ROLE_INDICATORS.some(indicator => lowerName.includes(indicator));\n\n  // Check for standalone role titles\n  const roleOnlyTitles = ['cto', 'ceo', 'cfo', 'cmo', 'coo', 'cpo', 'ciso', 'vp', 'director', 'manager', 'lead', 'head', 'president', 'founder', 'owner'];\n  const isRoleOnly = roleOnlyTitles.includes(lowerName);\n  return hasTeamIndicator || isRoleOnly;\n}\nasync function sendToAttio(updates) {\n  console.log('üîÑ Processing advanced updates:', updates);\n\n  // Filter out team/role entries from person creation\n  const filteredUpdates = updates.filter(item => {\n    if (item.type === 'person' && isTeamOrRole(item.name)) {\n      console.log(`üö´ Skipping team/role as person: \"${item.name}\"`);\n      return false;\n    }\n    return true;\n  });\n\n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = filteredUpdates.filter(item => item.type === \"company\");\n  const personUpdates = filteredUpdates.filter(item => item.type === \"person\");\n  const dealUpdates = filteredUpdates.filter(item => item.type === \"deal\");\n  const taskUpdates = filteredUpdates.filter(item => item.type === \"task\");\n  const relationshipUpdates = filteredUpdates.filter(item => item.type === \"relationship\");\n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n\n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process company:\", item, err);\n    }\n  }\n\n  // Process people with enhanced duplicate detection\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPersonEnhanced(item);\n      processedEntities.people[item.name] = personId;\n\n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process person:\", item, err);\n    }\n  }\n\n  // Process deals with enhanced linking\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDealEnhanced(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process deal:\", item, err);\n    }\n  }\n\n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process relationship:\", item, err);\n    }\n  }\n\n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPersonEnhanced(data) {\n  console.log('üë§ Enhanced upserting person:', data.name);\n\n  // Enhanced search - try email first, then name variations\n  let existing = null;\n\n  // Search by email if provided\n  if (data.email) {\n    existing = await queryPersonByEmail(data.email);\n    if (existing) {\n      console.log(`‚úÖ Found existing person by email: ${data.email}`);\n    }\n  }\n\n  // Search by name variations if not found by email\n  if (!existing) {\n    existing = await queryPersonByNameEnhanced(data.name);\n  }\n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    const personId = await createPersonWithSentiment(data);\n    await createUserForPerson(data, personId);\n    return personId;\n  }\n}\nasync function createUserForPerson(personData, personRecordId) {\n  console.log('üë§ Creating user for person:', personData.name);\n  console.log('üì® Email:', personData.email);\n  console.log('üÜî Person Record ID:', personRecordId);\n  if (!personData.email || !personRecordId) {\n    console.error('Missing email or person record ID');\n    return;\n  }\n\n  // Only custom fields in values\n  const values = {\n    // Any other custom attributes (if needed)\n  };\n  const linked_records = [{\n    target_object: 'people',\n    target_record_id: personRecordId,\n    attribute_id: 'babd4ce9-e33b-463a-828f-e94213280e7b' // This is the user_id field\n  }];\n  const payload = {\n    data: {\n      primary_email_address: personData.email,\n      // system field\n      values,\n      linked_records\n    }\n  };\n  try {\n    const response = await fetch('https://api.attio.com/v2/objects/67f9b7bf-eaa3-4e05-8a05-eab58cc288cd/records', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to create user: ${JSON.stringify(errorData)}`);\n    }\n    const responseData = await response.json();\n    console.log('‚úÖ User created:', responseData);\n    return responseData.data.id;\n  } catch (error) {\n    console.error('‚ùå Failed to create user:', error.message);\n  }\n}\nasync function queryPersonByEmail(email) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.email,\n        query: email\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\nasync function queryPersonByNameEnhanced(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n\n  // Try exact match first\n  let payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name,\n        query_mode: \"exact_match\"\n      }]\n    },\n    limit: 1\n  };\n  let res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  let json = await res.json();\n  if (json.data && json.data.length > 0) {\n    console.log(`‚úÖ Found exact name match: ${name}`);\n    return json.data[0];\n  }\n\n  // Try fuzzy search\n  payload.filter.and[0].query_mode = \"contains\";\n  res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  json = await res.json();\n  if (json.data && json.data.length > 0) {\n    var _existing$values, _existing$values$ATTR, _existing$values$ATTR2;\n    // Check if it's a close match\n    const existing = json.data[0];\n    const existingName = ((_existing$values = existing.values) === null || _existing$values === void 0 ? void 0 : (_existing$values$ATTR = _existing$values[ATTRIBUTE_IDS.name]) === null || _existing$values$ATTR === void 0 ? void 0 : (_existing$values$ATTR2 = _existing$values$ATTR[0]) === null || _existing$values$ATTR2 === void 0 ? void 0 : _existing$values$ATTR2.full_name) || \"\";\n    if (namesAreSimilar(name, existingName)) {\n      console.log(`‚úÖ Found similar name match: \"${name}\" -> \"${existingName}\"`);\n      return existing;\n    }\n  }\n  return null;\n}\nfunction namesAreSimilar(name1, name2) {\n  if (!name1 || !name2) return false;\n  const normalize = str => str.toLowerCase().trim().replace(/[^\\w\\s]/g, '');\n  const n1 = normalize(name1);\n  const n2 = normalize(name2);\n\n  // Exact match\n  if (n1 === n2) return true;\n\n  // Check if one is contained in the other (for partial names)\n  if (n1.includes(n2) || n2.includes(n1)) return true;\n\n  // Check word overlap for compound names\n  const words1 = n1.split(/\\s+/);\n  const words2 = n2.split(/\\s+/);\n  const overlap = words1.filter(word => words2.includes(word));\n\n  // Consider similar if significant word overlap\n  return overlap.length >= Math.min(words1.length, words2.length) * 0.5;\n}\nasync function createPersonWithSentiment(data) {\n  var _json$data3, _json$data3$id, _json$data4, _json$data4$id;\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes with role/team handling\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n\n  // Handle role and team information intelligently\n  let roleText = data.role || \"\";\n  let notesText = data.notes || \"\";\n\n  // If this person is associated with a team, add it to their description\n  if (data.team || data.role && isTeamOrRole(data.role)) {\n    const teamInfo = data.team || data.role;\n    notesText = notesText ? `${notesText}\\nTeam/Department: ${teamInfo}` : `Team/Department: ${teamInfo}`;\n    if (ATTRIBUTE_IDS.department) {\n      values[ATTRIBUTE_IDS.department] = teamInfo;\n    }\n  }\n  if (roleText && ATTRIBUTE_IDS.role && !isTeamOrRole(roleText)) {\n    values[ATTRIBUTE_IDS.role] = roleText;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (notesText && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = notesText;\n  }\n\n  // Employee-specific fields\n  if (data.employee_id && ATTRIBUTE_IDS.employee_id) {\n    values[ATTRIBUTE_IDS.employee_id] = data.employee_id;\n  }\n  if (data.manager && ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = data.manager;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Person created with enhanced attributes:\", (_json$data3 = json.data) === null || _json$data3 === void 0 ? void 0 : (_json$data3$id = _json$data3.id) === null || _json$data3$id === void 0 ? void 0 : _json$data3$id.record_id);\n  return (_json$data4 = json.data) === null || _json$data4 === void 0 ? void 0 : (_json$data4$id = _json$data4.id) === null || _json$data4$id === void 0 ? void 0 : _json$data4$id.record_id;\n}\n\n// ========== ENHANCED DEAL MANAGEMENT ==========\n\nasync function upsertDealEnhanced(data, processedEntities) {\n  console.log('üíº Enhanced upserting deal:', data.name);\n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDealEnhanced(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDealEnhanced(data, processedEntities);\n  }\n}\n\n// Fixed deal owner handling in createDealEnhanced function\nasync function createDealEnhanced(data, processedEntities) {\n  var _json$data5, _json$data5$id;\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n\n  // FIXED: Only set deal owner if explicitly provided\n  if (data.deal_owner && ATTRIBUTE_IDS.deal_owner) {\n    values[ATTRIBUTE_IDS.deal_owner] = data.deal_owner;\n  }\n  // Don't set deal_owner if not provided - let it remain empty/unknown\n\n  // Stage handling\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Processing deal stage: \"${data.stage}\"`);\n    const matchedStage = await mapToValidStage(data.stage);\n    if (matchedStage && matchedStage.id) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage set: \"${data.stage}\" -> \"${matchedStage.title}\" (ID: ${matchedStage.id})`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage assignment`);\n    }\n  } else {\n    console.log(`‚ÑπÔ∏è No stage provided or stage attribute not configured`);\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n\n  // Employee-employee deal support\n  if (data.internal_stakeholders && ATTRIBUTE_IDS.internal_stakeholders) {\n    values[ATTRIBUTE_IDS.internal_stakeholders] = Array.isArray(data.internal_stakeholders) ? data.internal_stakeholders.join(', ') : data.internal_stakeholders;\n  }\n  const payload = {\n    data: {\n      values\n    }\n  };\n\n  // Enhanced linking to companies and people\n  const linkedRecords = [];\n  if (data.company && processedEntities.companies[data.company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    });\n  }\n\n  // Link to decision maker if they exist\n  if (data.decision_maker && processedEntities.people[data.decision_maker]) {\n    values[ATTRIBUTE_IDS.deal_owner] = processedEntities.people[data.decision_maker];\n  }\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n  console.log('üìù Creating deal with enhanced payload:', JSON.stringify(payload, null, 2));\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    console.error('‚ùå Enhanced deal creation failed:', JSON.stringify(json, null, 2));\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n  const dealId = (_json$data5 = json.data) === null || _json$data5 === void 0 ? void 0 : (_json$data5$id = _json$data5.id) === null || _json$data5$id === void 0 ? void 0 : _json$data5$id.record_id;\n  console.log(\"‚úÖ Enhanced deal created:\", dealId);\n\n  // Store deal ID for reverse linking\n  if (dealId) {\n    processedEntities.deals[data.name] = dealId;\n  }\n  return dealId;\n}\nasync function updateDealEnhanced(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const values = {};\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n\n  // FIXED: Enhanced stage validation for updates\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Processing updated deal stage: \"${data.stage}\"`);\n    const matchedStage = await mapToValidStage(data.stage);\n    if (matchedStage && matchedStage.id) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage updated: \"${data.stage}\" -> \"${matchedStage.title}\" (ID: ${matchedStage.id})`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage update`);\n    }\n  }\n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n  if (Object.keys(values).length === 0) {\n    console.log('‚ÑπÔ∏è No deal updates needed');\n    return recordId;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Enhanced deal updated:\", recordId);\n  return recordId;\n}\n\n// ========== LINKING FUNCTIONALITY ==========\n\nasync function linkPersonToCompany(personId, companyId) {\n  console.log(`üîó Linking person ${personId} to company ${companyId}`);\n  try {\n    // This creates a relationship between person and company\n    // Implementation depends on your Attio workspace relationship configuration\n\n    const payload = {\n      data: {\n        linked_records: [{\n          target_object: \"companies\",\n          target_record_id: companyId\n        }]\n      }\n    };\n    const peopleId = await getObjectIdBySlug(\"people\");\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${personId}`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    if (res.ok) {\n      console.log(`‚úÖ Successfully linked person to company`);\n    } else {\n      console.log(`‚ö†Ô∏è Person-company linking may need manual configuration`);\n    }\n  } catch (err) {\n    console.log(`‚ö†Ô∏è Person-company linking failed - may need workspace setup:`, err.message);\n  }\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('üîó Updating enhanced relationships:', data);\n\n  // Multi-contact relationship updates with team handling\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      // Skip if this is a team/role rather than person\n      if (isTeamOrRole(update.name)) {\n        console.log(`üö´ Skipping team/role relationship update: ${update.name}`);\n        continue;\n      }\n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n\n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n\n  // Internal department relationships for employee-employee CRM\n  if (data.internal_relationships) {\n    for (const relationship of data.internal_relationships) {\n      if (relationship.type === 'reporting' && relationship.manager && relationship.employee) {\n        // Link manager-employee relationships\n        const managerId = processedEntities.people[relationship.manager];\n        const employeeId = processedEntities.people[relationship.employee];\n        if (managerId && employeeId && ATTRIBUTE_IDS.manager) {\n          await updatePersonWithManager(employeeId, managerId);\n        }\n      }\n    }\n  }\n}\nasync function updatePersonWithManager(employeeId, managerId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {};\n  if (ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = managerId;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${employeeId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (res.ok) {\n    console.log(`‚úÖ Manager relationship updated: ${employeeId} -> ${managerId}`);\n  } else {\n    console.log(`‚ö†Ô∏è Failed to update manager relationship`);\n  }\n}\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const values = {};\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{\n      email_address: data.email\n    }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role && !isTeamOrRole(data.role)) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    var _existing$values2;\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = (existing === null || existing === void 0 ? void 0 : (_existing$values2 = existing.values) === null || _existing$values2 === void 0 ? void 0 : _existing$values2[ATTRIBUTE_IDS.notes]) || \"\";\n    const separator = existingNotes ? \"\\n\\n\" : \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes + separator + data.notes;\n  }\n\n  // Handle team/department information\n  if (data.team && ATTRIBUTE_IDS.department) {\n    values[ATTRIBUTE_IDS.department] = data.team;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Person updated with enhanced sentiment:\", recordId);\n  return recordId;\n}\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('üè¢ Upserting company:', data.name);\n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\nasync function createCompany(data) {\n  var _json$data6, _json$data6$id, _json$data7, _json$data7$id;\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n\n  // Internal department support\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Company created:\", (_json$data6 = json.data) === null || _json$data6 === void 0 ? void 0 : (_json$data6$id = _json$data6.id) === null || _json$data6$id === void 0 ? void 0 : _json$data6$id.record_id);\n  return (_json$data7 = json.data) === null || _json$data7 === void 0 ? void 0 : (_json$data7$id = _json$data7.id) === null || _json$data7$id === void 0 ? void 0 : _json$data7$id.record_id;\n}\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n  if (Object.keys(values).length === 0) return recordId;\n  const payload = JSON.stringify({\n    data: {\n      values\n    }\n  });\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Company updated:\", recordId);\n  return recordId;\n}\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  var _json$data8, _json$data9;\n  console.log('üìã Creating advanced task:', data.description);\n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities with better entity resolution\n  const linkedRecords = [];\n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n  console.log(\"‚úÖ Advanced task created:\", (_json$data8 = json.data) === null || _json$data8 === void 0 ? void 0 : _json$data8.id);\n  return (_json$data9 = json.data) === null || _json$data9 === void 0 ? void 0 : _json$data9.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\nasync function getObjectIdBySlug(slug) {\n  var _json$data0, _json$data0$id;\n  if (objectCache[slug]) return objectCache[slug];\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n  const json = await res.json();\n  const id = (_json$data0 = json.data) === null || _json$data0 === void 0 ? void 0 : (_json$data0$id = _json$data0.id) === null || _json$data0$id === void 0 ? void 0 : _json$data0$id.object_id;\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n  objectCache[slug] = id;\n  return id;\n}\nasync function initializeAttributeIds() {\n  try {\n    var _validStagesCache$sta;\n    console.log('üîß Initializing advanced attribute IDs...');\n\n    // Load valid stage options first\n    await getValidStageOptions();\n\n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n\n    // Map to our attribute system - only override if we find the actual attribute\n    if (peopleAttrs.email_addresses) ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    if (peopleAttrs.phone_numbers) ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    if (peopleAttrs.notes) ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    if (peopleAttrs.role) ATTRIBUTE_IDS.role = peopleAttrs.role;\n    if (peopleAttrs.sentiment) ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    if (peopleAttrs.department) ATTRIBUTE_IDS.department = peopleAttrs.department;\n    if (peopleAttrs.employee_id) ATTRIBUTE_IDS.employee_id = peopleAttrs.employee_id;\n    if (peopleAttrs.manager) ATTRIBUTE_IDS.manager = peopleAttrs.manager;\n    if (dealAttrs.name) ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    if (dealAttrs.value) ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    if (dealAttrs.close_date) ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    if (dealAttrs.stage) ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    if (dealAttrs.probability) ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    if (dealAttrs.competitors) ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    if (dealAttrs.pain_points) ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    if (dealAttrs.internal_stakeholders) ATTRIBUTE_IDS.internal_stakeholders = dealAttrs.internal_stakeholders;\n    if (companyAttrs.name) ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    if (companyAttrs.relationship_health) ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    if (companyAttrs.expansion_opportunity) ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    if (companyAttrs.churn_risk) ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    if (companyAttrs.internal_department) ATTRIBUTE_IDS.internal_department = companyAttrs.internal_department;\n    console.log('‚úÖ Advanced attribute IDs initialized');\n    console.log('üìã Available stages:', (_validStagesCache$sta = validStagesCache.stages) === null || _validStagesCache$sta === void 0 ? void 0 : _validStagesCache$sta.map(s => s.title));\n    console.log('üîß Attribute mapping completed:', ATTRIBUTE_IDS);\n  } catch (err) {\n    console.error('‚ùå Failed to initialize advanced attribute IDs:', err);\n  }\n}\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: {\n      Authorization: BEARER_TOKEN\n    }\n  });\n  const json = await res.json();\n  const attributes = {};\n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'Discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n  const lowerText = text.toLowerCase();\n\n  // Stage detection - now uses proper stage names\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const SENTIMENT_INDICATORS = {\n    positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n    negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n    neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n  };\n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  const LEADING_INDICATORS = {\n    strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n    risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n    urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n    technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n  };\n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => lowerText.includes(signal));\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => lowerText.includes(signal));\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n  return analysis;\n}\nexport { sendToAttio, initializeAttributeIds, analyzeDealLanguage, DEAL_STAGES, mapToValidStage, getValidStageOptions, isTeamOrRole, namesAreSimilar };","map":{"version":3,"names":["ATTIO_API_BASE","BEARER_TOKEN","objectCache","attributeCache","validStagesCache","ATTRIBUTE_IDS","name","email","phone","notes","role","sentiment","department","employee_id","manager","deal_name","deal_value","close_date","stage","probability","competitors","decision_maker","pain_points","deal_owner","internal_stakeholders","company_name","relationship_health","expansion_opportunity","churn_risk","internal_department","user_person","user_id","user_email","DEAL_STAGES","TEAM_ROLE_INDICATORS","getValidStageOptions","stages","length","console","log","dealsId","getObjectIdBySlug","stageAttributeId","res","fetch","headers","Authorization","ok","_json$data","_json$data$config","_json$data2","_json$config","json","options","data","config","map","option","id","value","title","label","error","status","err","mapToValidStage","stageInput","validStages","lowerInput","toLowerCase","trim","s","exactMatch","find","partialMatch","stageTitle","includes","validStageTitle","indicators","Object","entries","some","ind","fuzzyMatch","fallback","isTeamOrRole","lowerName","hasTeamIndicator","indicator","roleOnlyTitles","isRoleOnly","sendToAttio","updates","filteredUpdates","filter","item","type","companyUpdates","personUpdates","dealUpdates","taskUpdates","relationshipUpdates","processedEntities","companies","people","deals","companyId","upsertCompany","personId","upsertPersonEnhanced","company","linkPersonToCompany","dealId","upsertDealEnhanced","updateRelationships","upsertAdvancedTask","existing","queryPersonByEmail","queryPersonByNameEnhanced","updatePersonWithSentiment","record_id","createPersonWithSentiment","createUserForPerson","personData","personRecordId","values","linked_records","target_object","target_record_id","attribute_id","payload","primary_email_address","response","method","body","JSON","stringify","errorData","Error","responseData","message","peopleId","and","attribute","query","limit","query_mode","_existing$values","_existing$values$ATTR","_existing$values$ATTR2","existingName","full_name","namesAreSimilar","name1","name2","normalize","str","replace","n1","n2","words1","split","words2","overlap","word","Math","min","_json$data3","_json$data3$id","_json$data4","_json$data4$id","fullName","first_name","last_name","email_address","roleText","notesText","team","teamInfo","queryDealByName","updateDealEnhanced","createDealEnhanced","_json$data5","_json$data5$id","parseFloat","toString","parseDealDate","matchedStage","Array","isArray","join","linkedRecords","push","recordId","keys","contact_updates","update","context","account_health","updateCompany","overall_score","expansion_notes","risk_level","internal_relationships","relationship","employee","managerId","employeeId","updatePersonWithManager","_existing$values2","getPersonById","existingNotes","separator","queryCompanyByName","createCompany","_json$data6","_json$data6$id","_json$data7","_json$data7$id","companiesId","_json$data8","_json$data9","description","content","format","deadline_at","due_date","is_completed","assignees","link_to_person_name","link_to_company","link_to_deal","dateStr","year","Date","getFullYear","toISOString","nextQuarter","setMonth","getMonth","slug","_json$data0","_json$data0$id","object_id","initializeAttributeIds","_validStagesCache$sta","peopleAttrs","getAttributeIds","dealAttrs","companyAttrs","email_addresses","phone_numbers","objectSlug","objectId","attributes","forEach","attr","api_slug","analyzeDealLanguage","text","analysis","urgency","buying_signals","risk_signals","value_indicators","lowerText","SENTIMENT_INDICATORS","positive","negative","neutral","positiveCount","negativeCount","LEADING_INDICATORS","strong_buying_signals","urgency_signals","technical_fit","signal","valueMatch","match"],"sources":["/Users/Aditya/ConversationalAI_CRM_Attio/src/advanced-attio.js"],"sourcesContent":["// advanced-attio.js - Enhanced CRM with deal intelligence and relationship mapping\nconst ATTIO_API_BASE = \"https://api.attio.com/v2\";\nconst BEARER_TOKEN = \"Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53\";\n\nconst objectCache = {};\nconst attributeCache = {};\nconst validStagesCache = {}; // Cache for valid stage options\n\n// Enhanced attribute mappings for advanced features\nconst ATTRIBUTE_IDS = {\n  // People attributes\n  name: \"3a2d79ac-1c54-4d1d-9bd1-df92ba80052f\",\n  email: \"4ab52dd0-edfe-4eea-b73c-561028076ea6\",\n  phone: \"57e614f6-a910-4df8-a7a5-f175d85a8825\",\n  notes: \"168ddd0a-6dc6-4aff-8939-60dcfe1cdf41\",\n  role: \"4bb82d05-40dc-49d1-a033-7451290ce027\",\n  sentiment: \"26ad2c8d-1bfe-48b0-ab9a-8a26c9ff5cab\",\n  department: \"2bdd1ea8-2983-49a4-8570-de7bd4c037a5\", // Add department field\n  employee_id: \"6ab0bbc9-4eba-4f4a-9ee2-f6c19ea9948a\", // For internal employees\n  manager: \"bd699e5b-79d5-4745-9f24-75a23d6cdfdf\", // Employee manager relationship\n  \n  // Deal attributes  \n  deal_name: \"10f12732-a9aa-4ed0-a0eb-90e4ce4552e9\",\n  deal_value: \"a0d4ad64-1e1c-4fec-88af-88bfe901d7af\",\n  close_date: \"d3cc7600-bab7-4a4d-bbe7-222620cf8637\",\n  stage: \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\",\n  probability: \"515599b4-63dd-4084-b704-df5fccb81a16\",\n  competitors: \"5f41c718-9fd3-4a16-84fc-ca8c2e97fa49\",\n  decision_maker: \"25ee890c-4306-4b25-8364-2341f52c4184\",\n  pain_points: \"abc75e84-5ebd-4fcb-a0f6-e3f1110dba4c\",\n  deal_owner: \"3b616cdc-1714-4db7-b99a-1007103ed6cf\",\n  internal_stakeholders: \"944fe8e7-a984-4da2-af86-f51c4ada7541\", // For employee-employee deals\n  \n  // Company attributes\n  company_name: \"a79670ce-befc-4e50-b281-7afce520dde6\",\n  relationship_health: \"a73d90c1-495c-488a-87ee-46bdbfa40905\",\n  expansion_opportunity: \"1c2d7097-a3d8-45ed-a751-3c2d4c4dd8a4\",\n  churn_risk: \"cf45e420-3fdf-4837-8aa5-97d56b7d9848\",\n  internal_department: \"3c8bfbe9-9261-458f-a499-254582e5469f\",  // For internal departments\n  // User attributes\n  user_person: \"2aea9c22-ab6b-485d-9846-760c50651684\", // Relationship to person\n  user_id: \"babd4ce9-e33b-463a-828f-e94213280e7b\",     // User ID (same as person's record_id)\n  user_email: \"7b008926-28d2-44c1-af08-1700251db9da\"  // Primary email for user\n\n\n\n};\n\n// Deal stage mapping based on language patterns\nconst DEAL_STAGES = {\n  \"Lead\": [\"lead\", \"qualified\", \"first call\", \"initial discussion\", \"introduction\", \"prospect\"],\n  \"In Progress\": [\"in progress\", \"discovery\", \"demo\", \"demonstration\", \"presentation\", \"proposal\", \"negotiation\", \"contract\", \"terms\"],\n  \"Won\": [\"won\", \"closed won\", \"signed\", \"closed\", \"deal done\", \"approved\"],\n  \"Lost\": [\"lost\", \"closed lost\", \"went with\", \"chose\", \"not moving forward\", \"lost to\"]\n};\n\n\n// Team/Role indicators that should NOT be created as people\nconst TEAM_ROLE_INDICATORS = [\n  \"team\", \"department\", \"group\", \"division\", \"unit\", \"committee\", \n  \"board\", \"panel\", \"squad\", \"crew\", \"staff\", \"workforce\"\n];\n\n// Function to get valid stage options from Attio\nasync function getValidStageOptions() {\n  if (validStagesCache.stages && validStagesCache.stages.length > 0) {\n    console.log('üîÑ Using cached stages:', validStagesCache.stages);\n    return validStagesCache.stages;\n  }\n\n  try {\n    const dealsId = await getObjectIdBySlug(\"deals\");\n    const stageAttributeId = \"6fbebe44-2dfe-4ef4-b524-e196de38ede3\";\n    \n    console.log(`üîç Loading stage options for deals:${dealsId}, attribute:${stageAttributeId}`);\n    \n    const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/attributes/${stageAttributeId}`, {\n      headers: { Authorization: BEARER_TOKEN }\n    });\n\n    if (res.ok) {\n      const json = await res.json();\n      console.log('üìã Stage attribute response:', json);\n      \n      const options = json.data?.config?.options || \n                     json.data?.options || \n                     json.config?.options ||\n                     [];\n      \n      if (options && options.length > 0) {\n        validStagesCache.stages = options.map(option => ({\n          id: option.id || option.value,\n          title: option.title || option.label || option.name\n        }));\n        console.log('‚úÖ Valid stage options loaded from Attio:', validStagesCache.stages);\n        return validStagesCache.stages;\n      }\n    } else {\n      console.error('‚ùå Failed to fetch stage attribute:', res.status);\n    }\n  } catch (err) {\n    console.error('‚ùå Failed to load stage options:', err);\n  }\n\n  // Use your actual Attio stages with real IDs\n  console.log('‚ö†Ô∏è Using actual Attio stage IDs');\n  validStagesCache.stages = [\n    { id: 'f35a5f1b-5558-4f56-971c-c9e9cae43a59', title: 'Lead' },\n    { id: '78c45eff-9ddf-4635-b177-473c1b1eb993', title: 'In Progress' },\n    { id: '2976ec08-c2b1-4e38-9d43-659e7050a937', title: 'Won' },\n    { id: '8af40582-e196-4abf-b373-a9f4dcb0674d', title: 'Lost' }\n  ];\n  \n  return validStagesCache.stages;\n}\n\n// Function to map stage name to valid Attio stage\n// Fixed stage mapping function - replace the existing mapToValidStage function\nasync function mapToValidStage(stageInput) {\n  if (!stageInput) return null;\n\n  const validStages = await getValidStageOptions();\n  const lowerInput = stageInput.toLowerCase().trim();\n\n  console.log(`üéØ Mapping stage \"${stageInput}\" against valid stages:`, validStages.map(s => s.title));\n\n  // 1. EXACT MATCH (case insensitive) - this should catch \"Demo\" -> \"Demo\"\n  const exactMatch = validStages.find(stage => stage.title.toLowerCase() === lowerInput);\n  if (exactMatch) {\n    console.log(`‚úÖ Exact stage match: \"${exactMatch.title}\" -> ID: ${exactMatch.id}`);\n    return exactMatch;\n  }\n\n  // 2. PARTIAL MATCH - check if input contains stage name or vice versa\n  const partialMatch = validStages.find(stage => {\n    const stageTitle = stage.title.toLowerCase();\n    return stageTitle.includes(lowerInput) || lowerInput.includes(stageTitle);\n  });\n  if (partialMatch) {\n    console.log(`‚úÖ Partial stage match: \"${stageInput}\" -> \"${partialMatch.title}\"`);\n    return partialMatch;\n  }\n\n  // 3. FUZZY MATCH using DEAL_STAGES patterns\n  for (const [validStageTitle, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(ind => lowerInput.includes(ind.toLowerCase()))) {\n      const fuzzyMatch = validStages.find(stage => \n        stage.title.toLowerCase() === validStageTitle.toLowerCase()\n      );\n      if (fuzzyMatch) {\n        console.log(`‚úÖ Fuzzy match found: \"${stageInput}\" -> \"${fuzzyMatch.title}\" via \"${validStageTitle}\"`);\n        return fuzzyMatch;\n      }\n    }\n  }\n\n  // 4. DEFAULT FALLBACK\n  const fallback = validStages.find(stage => \n    stage.title.toLowerCase().includes(\"discovery\") || \n    stage.title.toLowerCase().includes(\"qualified\")\n  );\n  if (fallback) {\n    console.log(`‚ö†Ô∏è Using fallback stage: \"${fallback.title}\"`);\n    return fallback;\n  }\n\n  console.log(`‚ùå No valid stage found for \"${stageInput}\"`);\n  return null;\n}\n\n\n// Check if a name represents a team/role rather than an individual person\nfunction isTeamOrRole(name) {\n  if (!name || typeof name !== 'string') return false;\n  \n  const lowerName = name.toLowerCase().trim();\n  \n  // Check for team indicators\n  const hasTeamIndicator = TEAM_ROLE_INDICATORS.some(indicator => \n    lowerName.includes(indicator)\n  );\n  \n  // Check for standalone role titles\n  const roleOnlyTitles = [\n    'cto', 'ceo', 'cfo', 'cmo', 'coo', 'cpo', 'ciso', 'vp', 'director', \n    'manager', 'lead', 'head', 'president', 'founder', 'owner'\n  ];\n  \n  const isRoleOnly = roleOnlyTitles.includes(lowerName);\n  \n  return hasTeamIndicator || isRoleOnly;\n}\n\nasync function sendToAttio(updates) {\n  console.log('üîÑ Processing advanced updates:', updates);\n  \n  // Filter out team/role entries from person creation\n  const filteredUpdates = updates.filter(item => {\n    if (item.type === 'person' && isTeamOrRole(item.name)) {\n      console.log(`üö´ Skipping team/role as person: \"${item.name}\"`);\n      return false;\n    }\n    return true;\n  });\n  \n  // Process in order: companies -> people -> deals -> tasks\n  const companyUpdates = filteredUpdates.filter(item => item.type === \"company\");\n  const personUpdates = filteredUpdates.filter(item => item.type === \"person\");\n  const dealUpdates = filteredUpdates.filter(item => item.type === \"deal\");\n  const taskUpdates = filteredUpdates.filter(item => item.type === \"task\");\n  const relationshipUpdates = filteredUpdates.filter(item => item.type === \"relationship\");\n  \n  const processedEntities = {\n    companies: {},\n    people: {},\n    deals: {}\n  };\n  \n  // Process companies first\n  for (const item of companyUpdates) {\n    try {\n      const companyId = await upsertCompany(item);\n      processedEntities.companies[item.name] = companyId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process company:\", item, err);\n    }\n  }\n  \n  // Process people with enhanced duplicate detection\n  for (const item of personUpdates) {\n    try {\n      const personId = await upsertPersonEnhanced(item);\n      processedEntities.people[item.name] = personId;\n      \n      // Link to company if specified\n      if (item.company && processedEntities.companies[item.company]) {\n        await linkPersonToCompany(personId, processedEntities.companies[item.company]);\n      }\n    } catch (err) {\n      console.error(\"‚ùå Failed to process person:\", item, err);\n    }\n  }\n  \n  // Process deals with enhanced linking\n  for (const item of dealUpdates) {\n    try {\n      const dealId = await upsertDealEnhanced(item, processedEntities);\n      processedEntities.deals[item.name] = dealId;\n    } catch (err) {\n      console.error(\"‚ùå Failed to process deal:\", item, err);\n    }\n  }\n  \n  // Process relationship updates\n  for (const item of relationshipUpdates) {\n    try {\n      await updateRelationships(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process relationship:\", item, err);\n    }\n  }\n  \n  // Process tasks with enhanced linking\n  for (const item of taskUpdates) {\n    try {\n      await upsertAdvancedTask(item, processedEntities);\n    } catch (err) {\n      console.error(\"‚ùå Failed to process task:\", item, err);\n    }\n  }\n}\n\n// ========== ENHANCED PERSON MANAGEMENT ==========\n\nasync function upsertPersonEnhanced(data) {\n  console.log('üë§ Enhanced upserting person:', data.name);\n  \n  // Enhanced search - try email first, then name variations\n  let existing = null;\n  \n  // Search by email if provided\n  if (data.email) {\n    existing = await queryPersonByEmail(data.email);\n    if (existing) {\n      console.log(`‚úÖ Found existing person by email: ${data.email}`);\n    }\n  }\n  \n  // Search by name variations if not found by email\n  if (!existing) {\n    existing = await queryPersonByNameEnhanced(data.name);\n  }\n  \n  if (existing) {\n    return await updatePersonWithSentiment(existing.id.record_id, data);\n  } else {\n    const personId = await createPersonWithSentiment(data);\n    await createUserForPerson(data, personId);\n    return personId;\n\n  }\n}\nasync function createUserForPerson(personData, personRecordId) {\n  console.log('üë§ Creating user for person:', personData.name);\n  console.log('üì® Email:', personData.email);\n  console.log('üÜî Person Record ID:', personRecordId);\n\n  if (!personData.email || !personRecordId) {\n    console.error('Missing email or person record ID');\n    return;\n  }\n\n  // Only custom fields in values\n  const values = {\n    // Any other custom attributes (if needed)\n  };\n\n  const linked_records = [\n    {\n      target_object: 'people',\n      target_record_id: personRecordId,\n      attribute_id: 'babd4ce9-e33b-463a-828f-e94213280e7b' // This is the user_id field\n    }\n  ];\n\n  const payload = {\n    data: {\n      primary_email_address: personData.email, // system field\n      values,\n      linked_records\n    }\n  };\n\n  try {\n    const response = await fetch('https://api.attio.com/v2/objects/67f9b7bf-eaa3-4e05-8a05-eab58cc288cd/records', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer e01cca9d5d70d62535755e3f1609118082790728f8c98dbd0b3f9cce1aae3f53',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to create user: ${JSON.stringify(errorData)}`);\n    }\n\n    const responseData = await response.json();\n    console.log('‚úÖ User created:', responseData);\n    return responseData.data.id;\n\n  } catch (error) {\n    console.error('‚ùå Failed to create user:', error.message);\n  }\n}\n\n\n\n\n\n\nasync function queryPersonByEmail(email) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.email,\n        query: email\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\nasync function queryPersonByNameEnhanced(name) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  // Try exact match first\n  let payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.name,\n        query: name,\n        query_mode: \"exact_match\"\n      }]\n    },\n    limit: 1\n  };\n\n  let res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  let json = await res.json();\n  if (json.data && json.data.length > 0) {\n    console.log(`‚úÖ Found exact name match: ${name}`);\n    return json.data[0];\n  }\n\n  // Try fuzzy search\n  payload.filter.and[0].query_mode = \"contains\";\n  \n  res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  json = await res.json();\n  if (json.data && json.data.length > 0) {\n    // Check if it's a close match\n    const existing = json.data[0];\n    const existingName = existing.values?.[ATTRIBUTE_IDS.name]?.[0]?.full_name || \"\";\n    \n    if (namesAreSimilar(name, existingName)) {\n      console.log(`‚úÖ Found similar name match: \"${name}\" -> \"${existingName}\"`);\n      return existing;\n    }\n  }\n\n  return null;\n}\n\nfunction namesAreSimilar(name1, name2) {\n  if (!name1 || !name2) return false;\n  \n  const normalize = (str) => str.toLowerCase().trim().replace(/[^\\w\\s]/g, '');\n  const n1 = normalize(name1);\n  const n2 = normalize(name2);\n  \n  // Exact match\n  if (n1 === n2) return true;\n  \n  // Check if one is contained in the other (for partial names)\n  if (n1.includes(n2) || n2.includes(n1)) return true;\n  \n  // Check word overlap for compound names\n  const words1 = n1.split(/\\s+/);\n  const words2 = n2.split(/\\s+/);\n  const overlap = words1.filter(word => words2.includes(word));\n  \n  // Consider similar if significant word overlap\n  return overlap.length >= Math.min(words1.length, words2.length) * 0.5;\n}\n\nasync function createPersonWithSentiment(data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  const fullName = `${data.first_name || \"\"} ${data.last_name || \"\"}`.trim();\n\n  const values = {\n    [ATTRIBUTE_IDS.name]: [{\n      first_name: data.first_name || \"Unknown\",\n      last_name: data.last_name || \"\",\n      full_name: fullName\n    }]\n  };\n\n  // Enhanced attributes with role/team handling\n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  \n  // Handle role and team information intelligently\n  let roleText = data.role || \"\";\n  let notesText = data.notes || \"\";\n  \n  // If this person is associated with a team, add it to their description\n  if (data.team || (data.role && isTeamOrRole(data.role))) {\n    const teamInfo = data.team || data.role;\n    notesText = notesText ? `${notesText}\\nTeam/Department: ${teamInfo}` : `Team/Department: ${teamInfo}`;\n    \n    if (ATTRIBUTE_IDS.department) {\n      values[ATTRIBUTE_IDS.department] = teamInfo;\n    }\n  }\n  \n  if (roleText && ATTRIBUTE_IDS.role && !isTeamOrRole(roleText)) {\n    values[ATTRIBUTE_IDS.role] = roleText;\n  }\n  \n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  \n  if (notesText && ATTRIBUTE_IDS.notes) {\n    values[ATTRIBUTE_IDS.notes] = notesText;\n  }\n  \n  // Employee-specific fields\n  if (data.employee_id && ATTRIBUTE_IDS.employee_id) {\n    values[ATTRIBUTE_IDS.employee_id] = data.employee_id;\n  }\n  \n  if (data.manager && ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = data.manager;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Person created with enhanced attributes:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\n// ========== ENHANCED DEAL MANAGEMENT ==========\n\nasync function upsertDealEnhanced(data, processedEntities) {\n  console.log('üíº Enhanced upserting deal:', data.name);\n  \n  const existing = await queryDealByName(data.name);\n  if (existing) {\n    return await updateDealEnhanced(existing.id.record_id, data, processedEntities);\n  } else {\n    return await createDealEnhanced(data, processedEntities);\n  }\n}\n\n// Fixed deal owner handling in createDealEnhanced function\nasync function createDealEnhanced(data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (ATTRIBUTE_IDS.deal_name) {\n    values[ATTRIBUTE_IDS.deal_name] = data.name;\n  }\n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  \n  // FIXED: Only set deal owner if explicitly provided\n  if (data.deal_owner && ATTRIBUTE_IDS.deal_owner) {\n    values[ATTRIBUTE_IDS.deal_owner] = data.deal_owner;\n  }\n  // Don't set deal_owner if not provided - let it remain empty/unknown\n\n  // Stage handling\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Processing deal stage: \"${data.stage}\"`);\n    \n    const matchedStage = await mapToValidStage(data.stage);\n    \n    if (matchedStage && matchedStage.id) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage set: \"${data.stage}\" -> \"${matchedStage.title}\" (ID: ${matchedStage.id})`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage assignment`);\n    }\n  } else {\n    console.log(`‚ÑπÔ∏è No stage provided or stage attribute not configured`);\n  }\n  \n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n  \n  // Employee-employee deal support\n  if (data.internal_stakeholders && ATTRIBUTE_IDS.internal_stakeholders) {\n    values[ATTRIBUTE_IDS.internal_stakeholders] = Array.isArray(data.internal_stakeholders) ? data.internal_stakeholders.join(', ') : data.internal_stakeholders;\n  }\n\n  const payload = { data: { values } };\n  \n  // Enhanced linking to companies and people\n  const linkedRecords = [];\n  \n  if (data.company && processedEntities.companies[data.company]) {\n    linkedRecords.push({\n      target_object: \"companies\",\n      target_record_id: processedEntities.companies[data.company]\n    });\n  }\n  \n  // Link to decision maker if they exist\n  if (data.decision_maker && processedEntities.people[data.decision_maker]) {\n    values[ATTRIBUTE_IDS.deal_owner] = processedEntities.people[data.decision_maker];\n  }\n\n  \n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n\n  console.log('üìù Creating deal with enhanced payload:', JSON.stringify(payload, null, 2));\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    console.error('‚ùå Enhanced deal creation failed:', JSON.stringify(json, null, 2));\n    throw new Error(`Failed to create deal: ${JSON.stringify(json)}`);\n  }\n\n  const dealId = json.data?.id?.record_id;\n  console.log(\"‚úÖ Enhanced deal created:\", dealId);\n  \n  // Store deal ID for reverse linking\n  if (dealId) {\n    processedEntities.deals[data.name] = dealId;\n  }\n  \n  return dealId;\n}\n\nasync function updateDealEnhanced(recordId, data, processedEntities) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const values = {};\n  \n  if (data.value && ATTRIBUTE_IDS.deal_value) {\n    values[ATTRIBUTE_IDS.deal_value] = parseFloat(data.value.toString().replace(/[,$]/g, ''));\n  }\n  if (data.close_date && ATTRIBUTE_IDS.close_date) {\n    values[ATTRIBUTE_IDS.close_date] = parseDealDate(data.close_date);\n  }\n  \n  // FIXED: Enhanced stage validation for updates\n  if (data.stage && ATTRIBUTE_IDS.stage) {\n    console.log(`üéØ Processing updated deal stage: \"${data.stage}\"`);\n    \n    const matchedStage = await mapToValidStage(data.stage);\n    \n    if (matchedStage && matchedStage.id) {\n      values[ATTRIBUTE_IDS.stage] = matchedStage.id;\n      console.log(`‚úÖ Stage updated: \"${data.stage}\" -> \"${matchedStage.title}\" (ID: ${matchedStage.id})`);\n    } else {\n      console.log(`‚ö†Ô∏è Invalid stage \"${data.stage}\", skipping stage update`);\n    }\n  }\n\n  \n  if (data.probability && ATTRIBUTE_IDS.probability) {\n    values[ATTRIBUTE_IDS.probability] = data.probability;\n  }\n  if (data.competitors && ATTRIBUTE_IDS.competitors) {\n    values[ATTRIBUTE_IDS.competitors] = Array.isArray(data.competitors) ? data.competitors.join(', ') : data.competitors;\n  }\n  if (data.pain_points && ATTRIBUTE_IDS.pain_points) {\n    values[ATTRIBUTE_IDS.pain_points] = Array.isArray(data.pain_points) ? data.pain_points.join(', ') : data.pain_points;\n  }\n\n  if (Object.keys(values).length === 0) {\n    console.log('‚ÑπÔ∏è No deal updates needed');\n    return recordId;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update deal: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Enhanced deal updated:\", recordId);\n  return recordId;\n}\n\n// ========== LINKING FUNCTIONALITY ==========\n\nasync function linkPersonToCompany(personId, companyId) {\n  console.log(`üîó Linking person ${personId} to company ${companyId}`);\n  \n  try {\n    // This creates a relationship between person and company\n    // Implementation depends on your Attio workspace relationship configuration\n    \n    const payload = {\n      data: {\n        linked_records: [{\n          target_object: \"companies\",\n          target_record_id: companyId\n        }]\n      }\n    };\n    \n    const peopleId = await getObjectIdBySlug(\"people\");\n    const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${personId}`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: BEARER_TOKEN,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (res.ok) {\n      console.log(`‚úÖ Successfully linked person to company`);\n    } else {\n      console.log(`‚ö†Ô∏è Person-company linking may need manual configuration`);\n    }\n  } catch (err) {\n    console.log(`‚ö†Ô∏è Person-company linking failed - may need workspace setup:`, err.message);\n  }\n}\n\n// ========== RELATIONSHIP MANAGEMENT ==========\n\nasync function updateRelationships(data, processedEntities) {\n  console.log('üîó Updating enhanced relationships:', data);\n  \n  // Multi-contact relationship updates with team handling\n  if (data.contact_updates) {\n    for (const update of data.contact_updates) {\n      // Skip if this is a team/role rather than person\n      if (isTeamOrRole(update.name)) {\n        console.log(`üö´ Skipping team/role relationship update: ${update.name}`);\n        continue;\n      }\n      \n      if (processedEntities.people[update.name]) {\n        await updatePersonWithSentiment(processedEntities.people[update.name], {\n          sentiment: update.sentiment,\n          notes: update.context\n        });\n      }\n    }\n  }\n  \n  // Account-level health scoring\n  if (data.account_health && data.company && processedEntities.companies[data.company]) {\n    await updateCompany(processedEntities.companies[data.company], {\n      relationship_health: data.account_health.overall_score,\n      expansion_opportunity: data.account_health.expansion_notes,\n      churn_risk: data.account_health.risk_level\n    });\n  }\n  \n  // Internal department relationships for employee-employee CRM\n  if (data.internal_relationships) {\n    for (const relationship of data.internal_relationships) {\n      if (relationship.type === 'reporting' && relationship.manager && relationship.employee) {\n        // Link manager-employee relationships\n        const managerId = processedEntities.people[relationship.manager];\n        const employeeId = processedEntities.people[relationship.employee];\n        \n        if (managerId && employeeId && ATTRIBUTE_IDS.manager) {\n          await updatePersonWithManager(employeeId, managerId);\n        }\n      }\n    }\n  }\n}\n\nasync function updatePersonWithManager(employeeId, managerId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const values = {};\n  if (ATTRIBUTE_IDS.manager) {\n    values[ATTRIBUTE_IDS.manager] = managerId;\n  }\n  \n  const payload = JSON.stringify({ data: { values } });\n  \n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${employeeId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n  \n  if (res.ok) {\n    console.log(`‚úÖ Manager relationship updated: ${employeeId} -> ${managerId}`);\n  } else {\n    console.log(`‚ö†Ô∏è Failed to update manager relationship`);\n  }\n}\n\nasync function updatePersonWithSentiment(recordId, data) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const values = {};\n  \n  if (data.email && ATTRIBUTE_IDS.email) {\n    values[ATTRIBUTE_IDS.email] = [{ email_address: data.email }];\n  }\n  if (data.role && ATTRIBUTE_IDS.role && !isTeamOrRole(data.role)) {\n    values[ATTRIBUTE_IDS.role] = data.role;\n  }\n  if (data.sentiment && ATTRIBUTE_IDS.sentiment) {\n    values[ATTRIBUTE_IDS.sentiment] = data.sentiment;\n  }\n  if (data.notes && ATTRIBUTE_IDS.notes) {\n    // Append to existing notes instead of replacing\n    const existing = await getPersonById(recordId);\n    const existingNotes = existing?.values?.[ATTRIBUTE_IDS.notes] || \"\";\n    const separator = existingNotes ? \"\\n\\n\" : \"\";\n    values[ATTRIBUTE_IDS.notes] = existingNotes + separator + data.notes;\n  }\n  \n  // Handle team/department information\n  if (data.team && ATTRIBUTE_IDS.department) {\n    values[ATTRIBUTE_IDS.department] = data.team;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update person: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Person updated with enhanced sentiment:\", recordId);\n  return recordId;\n}\n\nasync function getPersonById(recordId) {\n  const peopleId = await getObjectIdBySlug(\"people\");\n  \n  const res = await fetch(`${ATTIO_API_BASE}/objects/${peopleId}/records/${recordId}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (res.ok) {\n    const json = await res.json();\n    return json.data;\n  }\n  return null;\n}\n\n// ========== COMPANIES ==========\n\nasync function upsertCompany(data) {\n  console.log('üè¢ Upserting company:', data.name);\n  \n  const existing = await queryCompanyByName(data.name);\n  if (existing) {\n    return await updateCompany(existing.id.record_id, data);\n  } else {\n    return await createCompany(data);\n  }\n}\n\nasync function createCompany(data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (ATTRIBUTE_IDS.company_name) {\n    values[ATTRIBUTE_IDS.company_name] = data.name;\n  }\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  \n  // Internal department support\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Company created:\", json.data?.id?.record_id);\n  return json.data?.id?.record_id;\n}\n\nasync function updateCompany(recordId, data) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const values = {};\n  if (data.relationship_health && ATTRIBUTE_IDS.relationship_health) {\n    values[ATTRIBUTE_IDS.relationship_health] = data.relationship_health;\n  }\n  if (data.expansion_opportunity && ATTRIBUTE_IDS.expansion_opportunity) {\n    values[ATTRIBUTE_IDS.expansion_opportunity] = data.expansion_opportunity;\n  }\n  if (data.churn_risk && ATTRIBUTE_IDS.churn_risk) {\n    values[ATTRIBUTE_IDS.churn_risk] = data.churn_risk;\n  }\n  if (data.internal_department && ATTRIBUTE_IDS.internal_department) {\n    values[ATTRIBUTE_IDS.internal_department] = data.internal_department;\n  }\n\n  if (Object.keys(values).length === 0) return recordId;\n\n  const payload = JSON.stringify({ data: { values } });\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/${recordId}`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: payload\n  });\n\n  if (!res.ok) {\n    const json = await res.json();\n    throw new Error(`Failed to update company: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Company updated:\", recordId);\n  return recordId;\n}\n\nasync function queryCompanyByName(name) {\n  const companiesId = await getObjectIdBySlug(\"companies\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.company_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${companiesId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\nasync function queryDealByName(name) {\n  const dealsId = await getObjectIdBySlug(\"deals\");\n  \n  const payload = {\n    filter: {\n      and: [{\n        attribute: ATTRIBUTE_IDS.deal_name,\n        query: name\n      }]\n    },\n    limit: 1\n  };\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${dealsId}/records/query`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  return json.data && json.data.length > 0 ? json.data[0] : null;\n}\n\n// ========== ADVANCED TASK MANAGEMENT ==========\n\nasync function upsertAdvancedTask(data, processedEntities) {\n  console.log('üìã Creating advanced task:', data.description);\n  \n  const payload = {\n    data: {\n      content: data.description,\n      format: \"plaintext\",\n      deadline_at: data.due_date,\n      is_completed: false,\n      assignees: data.assignees || []\n    }\n  };\n\n  // Enhanced linking to multiple entities with better entity resolution\n  const linkedRecords = [];\n  \n  if (data.link_to_person_name && processedEntities.people[data.link_to_person_name]) {\n    linkedRecords.push({\n      target_object: \"people\",\n      target_record_id: processedEntities.people[data.link_to_person_name]\n    });\n  }\n  \n  if (data.link_to_company && processedEntities.companies[data.link_to_company]) {\n    linkedRecords.push({\n      target_object: \"companies\", \n      target_record_id: processedEntities.companies[data.link_to_company]\n    });\n  }\n  \n  if (data.link_to_deal && processedEntities.deals[data.link_to_deal]) {\n    linkedRecords.push({\n      target_object: \"deals\",\n      target_record_id: processedEntities.deals[data.link_to_deal]\n    });\n  }\n\n  if (linkedRecords.length > 0) {\n    payload.data.linked_records = linkedRecords;\n  }\n\n  const res = await fetch(`${ATTIO_API_BASE}/tasks`, {\n    method: \"POST\",\n    headers: {\n      Authorization: BEARER_TOKEN,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  const json = await res.json();\n  if (!res.ok) {\n    throw new Error(`Failed to create advanced task: ${JSON.stringify(json)}`);\n  }\n\n  console.log(\"‚úÖ Advanced task created:\", json.data?.id);\n  return json.data?.id;\n}\n\n// ========== UTILITY FUNCTIONS ==========\n\nfunction parseDealDate(dateStr) {\n  try {\n    if (dateStr.toLowerCase().includes('q1')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 2, 31).toISOString(); // End of Q1\n    }\n    if (dateStr.toLowerCase().includes('q2')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 5, 30).toISOString(); // End of Q2\n    }\n    if (dateStr.toLowerCase().includes('q3')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 8, 30).toISOString(); // End of Q3\n    }\n    if (dateStr.toLowerCase().includes('q4')) {\n      const year = new Date().getFullYear() + (dateStr.includes('next year') ? 1 : 0);\n      return new Date(year, 11, 31).toISOString(); // End of Q4\n    }\n    \n    return new Date(dateStr).toISOString();\n  } catch {\n    const nextQuarter = new Date();\n    nextQuarter.setMonth(nextQuarter.getMonth() + 3);\n    return nextQuarter.toISOString();\n  }\n}\n\nasync function getObjectIdBySlug(slug) {\n  if (objectCache[slug]) return objectCache[slug];\n\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${slug}`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to get object ${slug}: ${res.status}`);\n  }\n\n  const json = await res.json();\n  const id = json.data?.id?.object_id;\n\n  if (!id) throw new Error(`‚ùå Cannot resolve object slug: ${slug}`);\n\n  objectCache[slug] = id;\n  return id;\n}\n\nasync function initializeAttributeIds() {\n  try {\n    console.log('üîß Initializing advanced attribute IDs...');\n    \n    // Load valid stage options first\n    await getValidStageOptions();\n    \n    // Get all object attributes\n    const peopleAttrs = await getAttributeIds('people');\n    const dealAttrs = await getAttributeIds('deals');\n    const companyAttrs = await getAttributeIds('companies');\n    \n    // Map to our attribute system - only override if we find the actual attribute\n    if (peopleAttrs.email_addresses) ATTRIBUTE_IDS.email = peopleAttrs.email_addresses;\n    if (peopleAttrs.phone_numbers) ATTRIBUTE_IDS.phone = peopleAttrs.phone_numbers;\n    if (peopleAttrs.notes) ATTRIBUTE_IDS.notes = peopleAttrs.notes;\n    if (peopleAttrs.role) ATTRIBUTE_IDS.role = peopleAttrs.role;\n    if (peopleAttrs.sentiment) ATTRIBUTE_IDS.sentiment = peopleAttrs.sentiment;\n    if (peopleAttrs.department) ATTRIBUTE_IDS.department = peopleAttrs.department;\n    if (peopleAttrs.employee_id) ATTRIBUTE_IDS.employee_id = peopleAttrs.employee_id;\n    if (peopleAttrs.manager) ATTRIBUTE_IDS.manager = peopleAttrs.manager;\n    \n    if (dealAttrs.name) ATTRIBUTE_IDS.deal_name = dealAttrs.name;\n    if (dealAttrs.value) ATTRIBUTE_IDS.deal_value = dealAttrs.value;\n    if (dealAttrs.close_date) ATTRIBUTE_IDS.close_date = dealAttrs.close_date;\n    if (dealAttrs.stage) ATTRIBUTE_IDS.stage = dealAttrs.stage;\n    if (dealAttrs.probability) ATTRIBUTE_IDS.probability = dealAttrs.probability;\n    if (dealAttrs.competitors) ATTRIBUTE_IDS.competitors = dealAttrs.competitors;\n    if (dealAttrs.pain_points) ATTRIBUTE_IDS.pain_points = dealAttrs.pain_points;\n    if (dealAttrs.internal_stakeholders) ATTRIBUTE_IDS.internal_stakeholders = dealAttrs.internal_stakeholders;\n    \n    if (companyAttrs.name) ATTRIBUTE_IDS.company_name = companyAttrs.name;\n    if (companyAttrs.relationship_health) ATTRIBUTE_IDS.relationship_health = companyAttrs.relationship_health;\n    if (companyAttrs.expansion_opportunity) ATTRIBUTE_IDS.expansion_opportunity = companyAttrs.expansion_opportunity;\n    if (companyAttrs.churn_risk) ATTRIBUTE_IDS.churn_risk = companyAttrs.churn_risk;\n    if (companyAttrs.internal_department) ATTRIBUTE_IDS.internal_department = companyAttrs.internal_department;\n    \n    console.log('‚úÖ Advanced attribute IDs initialized');\n    console.log('üìã Available stages:', validStagesCache.stages?.map(s => s.title));\n    console.log('üîß Attribute mapping completed:', ATTRIBUTE_IDS);\n  } catch (err) {\n    console.error('‚ùå Failed to initialize advanced attribute IDs:', err);\n  }\n}\n\nasync function getAttributeIds(objectSlug) {\n  if (attributeCache[objectSlug]) return attributeCache[objectSlug];\n\n  const objectId = await getObjectIdBySlug(objectSlug);\n  const res = await fetch(`${ATTIO_API_BASE}/objects/${objectId}/attributes`, {\n    headers: { Authorization: BEARER_TOKEN }\n  });\n\n  const json = await res.json();\n  const attributes = {};\n  \n  if (json.data) {\n    json.data.forEach(attr => {\n      attributes[attr.api_slug] = attr.id.attribute_id;\n    });\n  }\n\n  attributeCache[objectSlug] = attributes;\n  return attributes;\n}\n\n// ========== INTELLIGENCE LAYER ==========\n\nfunction analyzeDealLanguage(text) {\n  const analysis = {\n    stage: 'Discovery',\n    probability: 50,\n    sentiment: 'neutral',\n    urgency: 'medium',\n    buying_signals: [],\n    risk_signals: [],\n    competitors: [],\n    value_indicators: []\n  };\n\n  const lowerText = text.toLowerCase();\n\n  // Stage detection - now uses proper stage names\n  for (const [stage, indicators] of Object.entries(DEAL_STAGES)) {\n    if (indicators.some(indicator => lowerText.includes(indicator))) {\n      analysis.stage = stage;\n      break;\n    }\n  }\n\n  // Sentiment analysis\n  const SENTIMENT_INDICATORS = {\n    positive: [\"love\", \"great\", \"excellent\", \"fantastic\", \"really well\", \"impressed\", \"excited\"],\n    negative: [\"concerned\", \"worried\", \"skeptical\", \"issues\", \"problems\", \"disappointed\"],\n    neutral: [\"okay\", \"fine\", \"standard\", \"normal\", \"average\"]\n  };\n  \n  const positiveCount = SENTIMENT_INDICATORS.positive.filter(word => lowerText.includes(word)).length;\n  const negativeCount = SENTIMENT_INDICATORS.negative.filter(word => lowerText.includes(word)).length;\n  \n  if (positiveCount > negativeCount) analysis.sentiment = 'positive';\n  else if (negativeCount > positiveCount) analysis.sentiment = 'negative';\n\n  // Leading indicators\n  const LEADING_INDICATORS = {\n    strong_buying_signals: [\"budget approved\", \"decision made\", \"ready to move forward\", \"when can we start\"],\n    risk_signals: [\"legal reviewing\", \"budget concerns\", \"need to think\", \"other priorities\"],\n    urgency_signals: [\"asap\", \"urgent\", \"by end of quarter\", \"timeline\"],\n    technical_fit: [\"integration\", \"API\", \"technical requirements\", \"engineering team\"]\n  };\n  \n  analysis.buying_signals = LEADING_INDICATORS.strong_buying_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n  analysis.risk_signals = LEADING_INDICATORS.risk_signals.filter(signal => \n    lowerText.includes(signal)\n  );\n\n  // Probability adjustment based on signals\n  if (analysis.buying_signals.length > 0) analysis.probability += 20;\n  if (analysis.risk_signals.length > 0) analysis.probability -= 15;\n\n  // Value extraction (look for dollar amounts)\n  const valueMatch = text.match(/\\$?([\\d,]+)k?/gi);\n  if (valueMatch) {\n    analysis.value_indicators = valueMatch;\n  }\n\n  return analysis;\n}\n\nexport { \n  sendToAttio, \n  initializeAttributeIds, \n  analyzeDealLanguage,\n  DEAL_STAGES,\n  mapToValidStage,\n  getValidStageOptions,\n  isTeamOrRole,\n  namesAreSimilar\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}